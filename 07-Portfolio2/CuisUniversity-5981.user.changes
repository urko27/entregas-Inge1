

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (22 October 2023 19:06:23) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


----End fileIn of C:\Users\Intekio\Desktop\Portfolio-Solucion.st----!

TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceTest category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:06:52'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:07:01'!
Object subclass: #Transference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest methodsFor: 'no messages' stamp: 'hh 10/22/2023 19:06:57'!
test01TransferenceTransfersMoneyFromSenderToReceiver

	|senderAccount receiverAccount|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: senderAccount .
	
	Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: senderAccount balance equals: 0.
	self assert: receiverAccount balance equals: 100.! !

!testRun: #TransferenceTest #test01TransferenceTransfersMoneyFromSenderToReceiver stamp: 'hh 10/22/2023 19:07:04'!
ERROR!

!testRun: #TransferenceTest #test01TransferenceTransfersMoneyFromSenderToReceiver stamp: 'hh 10/22/2023 19:07:04'!
ERROR!
!Transference class methodsFor: 'instance creation' stamp: 'hh 10/22/2023 19:07:07'!
from: senderAccount to: receiverAccount withValue: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: senderAccount to: receiverAccount withValue: aRenameMe1 ! !
!Transference class methodsFor: 'instance creation' stamp: 'hh 10/22/2023 19:08:07' prior: 50651083!
from: senderAccount to: receiverAccount withValue: transferenceValue

	Deposit register: transferenceValue on: receiverAccount .
	Withdraw register: transferenceValue on: senderAccount .! !

!testRun: #TransferenceTest #test01TransferenceTransfersMoneyFromSenderToReceiver stamp: 'hh 10/22/2023 19:08:10'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 19:09:15'!
test01TransferenceChangesAccountsBalance

	|senderAccount receiverAccount|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: senderAccount .
	
	Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: senderAccount balance equals: 0.
	self assert: receiverAccount balance equals: 100.! !

!methodRemoval: TransferenceTest #test01TransferenceTransfersMoneyFromSenderToReceiver stamp: 'hh 10/22/2023 19:09:15'!
test01TransferenceTransfersMoneyFromSenderToReceiver

	|senderAccount receiverAccount|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: senderAccount .
	
	Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: senderAccount balance equals: 0.
	self assert: receiverAccount balance equals: 100.!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 19:09:53'!
test02TransferenceAccountsHaveTransferenceLegRegistered

	|senderAccount receiverAccount|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: senderAccount .
	
	Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: senderAccount balance equals: 0.
	self assert: receiverAccount balance equals: 100.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 19:10:54' prior: 50651138!
test02TransferenceAccountsHaveTransferenceLegRegistered

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: senderAccount .
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (senderAccount hasRegistered: transference withdrawLeg).
	self assert: (receiverAccount hasRegistered: transference depositLeg).! !

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:11:00'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:11:00'!
ERROR!
!Transference class methodsFor: 'instance creation' stamp: 'hh 10/22/2023 19:11:46' prior: 50651094!
from: senderAccount to: receiverAccount withValue: transferenceValue

	Deposit register: transferenceValue on: receiverAccount .
	Withdraw register: transferenceValue on: senderAccount .
	
	^self new with: transferenceValue from: senderAccount to: receiverAccount .! !

Object subclass: #TransferenceLegs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceLegs category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:12:50'!
Object subclass: #TransferenceLegs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:13:48'!
Object subclass: #Transference
	instanceVariableNames: 'withdrawLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawLeg category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:13:58'!
TransferenceLegs subclass: #WithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:14:01'!
Object subclass: #Transference
	instanceVariableNames: 'withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:14:09'!
TransferenceLegs subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:14:16'!
Object subclass: #Transference
	instanceVariableNames: 'withdrawLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'initialize' stamp: 'hh 10/22/2023 19:13:46'!
with: transferenceValue from: senderAccount to: receiverAccount

	withdrawLeg := WithdrawLeg for: transferenceValue .
	depositLeg := DepositLeg for: transferenceValue .
	value := transferenceValue .
	
	senderAccount register: withdrawLeg.
	receiverAccount register:depositLeg.! !
!DepositLeg class methodsFor: 'no messages' stamp: 'hh 10/22/2023 19:16:01'!
for: transference

	^self new initializeFor: transference .! !
!TransferenceLegs class methodsFor: 'no messages' stamp: 'hh 10/22/2023 19:16:09'!
for: transference

	^self new initializeFor: transference .! !

!methodRemoval: DepositLeg class #for: stamp: 'hh 10/22/2023 19:16:13'!
for: transference

	^self new initializeFor: transference .!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:16:43'!
TransferenceLegs subclass: #DepositLeg
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'initialize' stamp: 'hh 10/22/2023 19:16:42'!
initializeFor: aTransference

	transference := aTransference .! !

!methodRemoval: DepositLeg #initializeFor: stamp: 'hh 10/22/2023 19:17:13'!
initializeFor: aTransference

	transference := aTransference .!

TransferenceLegs subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:17:30'!
TransferenceLegs subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceLegs category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:17:36'!
Object subclass: #TransferenceLegs
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceLegs methodsFor: 'initialize' stamp: 'hh 10/22/2023 19:17:35'!
initializeFor: aTransference

	transference := aTransference .! !

AccountTransaction subclass: #TransferenceLegs
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceLegs category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 19:18:22'!
AccountTransaction subclass: #TransferenceLegs
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:18:30'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:18:30'!
ERROR!
!Transference methodsFor: 'legs' stamp: 'hh 10/22/2023 19:18:38'!
withdrawLeg
	self shouldBeImplemented.
	^withdrawLeg! !
!Transference methodsFor: 'legs' stamp: 'hh 10/22/2023 19:18:41' prior: 50651331!
withdrawLeg
	
	^withdrawLeg! !

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:18:45'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:18:45'!
ERROR!
!Transference methodsFor: 'legs' stamp: 'hh 10/22/2023 19:18:51'!
depositLeg
	self shouldBeImplemented.
	^depositLeg! !
!Transference methodsFor: 'legs' stamp: 'hh 10/22/2023 19:18:53' prior: 50651347!
depositLeg
	
	^depositLeg! !

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:18:55'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:19:10'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 19:19:12'!
ERROR!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 19:19:12'!
ERROR!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 19:19:51'!
ERROR!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 19:19:51'!
ERROR!
!DepositLeg methodsFor: 'affectBalance' stamp: 'hh 10/22/2023 19:20:48' overrides: 50650942!
affectBalance: currentBalance

	^currentBalance + transference value! !
!WithdrawLeg methodsFor: 'affectBalance' stamp: 'hh 10/22/2023 19:21:01' overrides: 50650942!
affectBalance: currentBalance

	^currentBalance + transference value negated! !
!Transference methodsFor: 'value' stamp: 'hh 10/22/2023 19:21:19' overrides: 16902254!
value

	^value! !

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 19:21:46'!
FAILURE!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:21:46'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 19:21:46'!
FAILURE!
!Transference class methodsFor: 'instance creation' stamp: 'hh 10/22/2023 19:21:55' prior: 50651180!
from: senderAccount to: receiverAccount withValue: transferenceValue
	
	^self new with: transferenceValue from: senderAccount to: receiverAccount .! !

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 19:21:57'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:21:57'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 19:23:56' prior: 50651154!
test02TransferenceAccountsHaveTransferenceLegRegistered

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: senderAccount .
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference accountHasWithdrawLeg: senderAccount ).
	self assert: (transference accountHasDepositLeg: receiverAccount ).! !

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:24:00'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:24:00'!
ERROR!
!Transference methodsFor: 'tests' stamp: 'hh 10/22/2023 19:24:07'!
accountHasWithdrawLeg: senderAccount 
	self shouldBeImplemented.! !
!Transference methodsFor: 'tests' stamp: 'hh 10/22/2023 19:24:35' prior: 50651446!
accountHasWithdrawLeg: anAccount 
	
	^anAccount hasRegistered: withdrawLeg ! !

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:24:39'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:24:39'!
ERROR!
!Transference methodsFor: 'tests' stamp: 'hh 10/22/2023 19:24:43'!
accountHasDepositLeg: receiverAccount 
	self shouldBeImplemented.! !
!Transference methodsFor: 'tests' stamp: 'hh 10/22/2023 19:24:58' prior: 50651464!
accountHasDepositLeg: anAccount 
	
	^anAccount hasRegistered: depositLeg .! !

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:25:00'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 19:25:02'!
PASSED!

!methodRemoval: Transference #withdrawLeg stamp: 'hh 10/22/2023 19:25:07'!
withdrawLeg
	
	^withdrawLeg!

!methodRemoval: Transference #depositLeg stamp: 'hh 10/22/2023 19:25:11'!
depositLeg
	
	^depositLeg!

----SNAPSHOT----(22 October 2023 19:25:51) CuisUniversity-5981.image priorSource: 10197292!
!Transference methodsFor: 'initialize' stamp: 'hh 10/22/2023 19:29:12' prior: 50651242!
with: transferenceValue from: senderAccount to: receiverAccount

	withdrawLeg := WithdrawLeg for: self .
	depositLeg := DepositLeg for: self .
	value := transferenceValue .
	
	senderAccount register: withdrawLeg.
	receiverAccount register:depositLeg.! !

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 19:29:15'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:29:15'!
PASSED!
!Transference methodsFor: 'initialize' stamp: 'hh 10/22/2023 19:30:06' prior: 50651492!
with: transferenceValue from: senderAccount to: receiverAccount

	withdrawLeg := WithdrawLeg register: self on: senderAccount .
	depositLeg := DepositLeg register: self on: receiverAccount .
	value := transferenceValue .! !

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 19:30:09'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 19:30:09'!
PASSED!

----SNAPSHOT----(22 October 2023 19:30:12) CuisUniversity-5981.image priorSource: 10234795!

----SNAPSHOT----(22 October 2023 19:31:36) CuisUniversity-5981.image priorSource: 10236078!

----QUIT----(22 October 2023 19:31:39) CuisUniversity-5981.image priorSource: 10236171!

----STARTUP---- (22 October 2023 23:04:32) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


----QUIT----(22 October 2023 23:04:52) CuisUniversity-5981.image priorSource: 10236264!

----STARTUP---- (22 October 2023 23:05:08) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!

!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 23:25:02'!
test03WithdrawLegCanNagivateToTransference

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference withdrawLeg transference ) equals: transference .! !

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:25:09'!
ERROR!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:25:09'!
ERROR!
!Transference methodsFor: 'legs' stamp: 'hh 10/22/2023 23:25:19'!
withdrawLeg
	self shouldBeImplemented.
	^withdrawLeg! !
!Transference methodsFor: 'legs' stamp: 'hh 10/22/2023 23:25:21' prior: 50651567!
withdrawLeg
	
	^withdrawLeg! !

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:25:24'!
ERROR!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:25:24'!
ERROR!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:25:34'!
ERROR!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:25:34'!
ERROR!
!WithdrawLeg methodsFor: 'transference' stamp: 'hh 10/22/2023 23:25:44'!
transference
	self shouldBeImplemented.! !
!WithdrawLeg methodsFor: 'transference' stamp: 'hh 10/22/2023 23:25:51' prior: 50651590!
transference
	
	^transference! !

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:25:53'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 23:25:55'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 23:25:55'!
PASSED!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:25:55'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 23:26:05'!
test03DepositLegCanNagivateToTransference

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference depositLeg transference ) equals: transference .! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 23:26:10'!
test04DepositLegCanNagivateToTransference

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference depositLeg transference ) equals: transference .! !

!methodRemoval: TransferenceTest #test03DepositLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:26:10'!
test03DepositLegCanNagivateToTransference

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference depositLeg transference ) equals: transference .!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:26:12'!
ERROR!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:26:12'!
ERROR!
!Transference methodsFor: 'legs' stamp: 'hh 10/22/2023 23:26:16'!
depositLeg
	self shouldBeImplemented.
	^depositLeg! !
!Transference methodsFor: 'legs' stamp: 'hh 10/22/2023 23:26:18' prior: 50651662!
depositLeg
	
	^depositLeg! !

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:26:20'!
ERROR!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:26:20'!
ERROR!
!DepositLeg methodsFor: 'transference' stamp: 'hh 10/22/2023 23:26:29'!
transference
	self shouldBeImplemented.! !
!DepositLeg methodsFor: 'transference' stamp: 'hh 10/22/2023 23:26:33' prior: 50651678!
transference
	
	^transference! !

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:26:46'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 23:28:00'!
test05DepositLegCanNagivateToWithdrawLeg

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference depositLeg withdrawLeg ) equals: transference depositLeg .! !

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'hh 10/22/2023 23:28:02'!
ERROR!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'hh 10/22/2023 23:28:02'!
ERROR!
!DepositLeg methodsFor: 'withdrawLeg' stamp: 'hh 10/22/2023 23:28:17'!
withdrawLeg
	self shouldBeImplemented.! !
!DepositLeg methodsFor: 'withdrawLeg' stamp: 'hh 10/22/2023 23:28:24' prior: 50651712!
withdrawLeg
	
	^transference withdrawLeg ! !

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'hh 10/22/2023 23:28:35'!
FAILURE!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'hh 10/22/2023 23:28:35'!
FAILURE!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'hh 10/22/2023 23:28:42'!
FAILURE!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'hh 10/22/2023 23:28:42'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 23:28:53' prior: 50651691!
test05DepositLegCanNagivateToWithdrawLeg

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference depositLeg withdrawLeg ) equals: transference withdrawLeg .! !

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'hh 10/22/2023 23:28:54'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 23:28:55'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 23:28:56'!
PASSED!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:28:56'!
PASSED!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:28:56'!
PASSED!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'hh 10/22/2023 23:28:56'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 23:29:21'!
test05WithdrawLegCanNagivateToDepositLeg

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference withdrawLeg depositLeg ) equals: transference depositLeg .! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 23:29:25'!
test06WithdrawLegCanNagivateToDepositLeg

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference withdrawLeg depositLeg ) equals: transference depositLeg .! !

!methodRemoval: TransferenceTest #test05WithdrawLegCanNagivateToDepositLeg stamp: 'hh 10/22/2023 23:29:26'!
test05WithdrawLegCanNagivateToDepositLeg

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference withdrawLeg depositLeg ) equals: transference depositLeg .!

!testRun: #TransferenceTest #test06WithdrawLegCanNagivateToDepositLeg stamp: 'hh 10/22/2023 23:29:27'!
ERROR!

!testRun: #TransferenceTest #test06WithdrawLegCanNagivateToDepositLeg stamp: 'hh 10/22/2023 23:29:27'!
ERROR!
!WithdrawLeg methodsFor: 'depositLeg' stamp: 'hh 10/22/2023 23:29:33'!
depositLeg
	self shouldBeImplemented.! !
!WithdrawLeg methodsFor: 'depositLeg' stamp: 'hh 10/22/2023 23:29:44' prior: 50651821!
depositLeg
	
	^transference depositLeg ! !

!testRun: #TransferenceTest #test06WithdrawLegCanNagivateToDepositLeg stamp: 'hh 10/22/2023 23:29:46'!
PASSED!
!Transference methodsFor: 'tests' stamp: 'hh 10/22/2023 23:31:03'!
accountHasWithdrawLegRegistered: anAccount 
	
	^anAccount hasRegistered: withdrawLeg ! !

!methodRemoval: Transference #accountHasWithdrawLeg: stamp: 'hh 10/22/2023 23:31:04'!
accountHasWithdrawLeg: anAccount 
	
	^anAccount hasRegistered: withdrawLeg !
!Transference methodsFor: 'tests' stamp: 'hh 10/22/2023 23:31:17'!
accountHasDepositLegRegistered: anAccount 
	
	^anAccount hasRegistered: depositLeg .! !

!methodRemoval: Transference #accountHasDepositLeg: stamp: 'hh 10/22/2023 23:31:17'!
accountHasDepositLeg: anAccount 
	
	^anAccount hasRegistered: depositLeg .!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 23:31:26' prior: 50651421!
test02TransferenceAccountsHaveTransferenceLegRegistered

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: senderAccount .
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference accountHasWithdrawLegRegistered: senderAccount ).
	self assert: (transference accountHasDepositLegRegistered: receiverAccount ).! !

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 23:31:31'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 23:31:31'!
PASSED!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:31:32'!
PASSED!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:31:32'!
PASSED!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'hh 10/22/2023 23:31:32'!
PASSED!

!testRun: #TransferenceTest #test06WithdrawLegCanNagivateToDepositLeg stamp: 'hh 10/22/2023 23:31:32'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 23:33:59'!
test07WithdrawLegKnowsTransferenceValue

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference withdrawLeg value ) equals: transference value .! !

!testRun: #TransferenceTest #test07WithdrawLegKnowsTransferenceValue stamp: 'hh 10/22/2023 23:34:01'!
ERROR!

!testRun: #TransferenceTest #test07WithdrawLegKnowsTransferenceValue stamp: 'hh 10/22/2023 23:34:01'!
ERROR!
!WithdrawLeg methodsFor: 'value' stamp: 'hh 10/22/2023 23:34:09' overrides: 50650938!
value
	self shouldBeImplemented.! !
!WithdrawLeg methodsFor: 'value' stamp: 'hh 10/22/2023 23:34:15' prior: 50651914 overrides: 50650938!
value
	
	^transference value! !

!testRun: #TransferenceTest #test07WithdrawLegKnowsTransferenceValue stamp: 'hh 10/22/2023 23:34:18'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'hh 10/22/2023 23:34:30'!
test08DepositLegKnowsTransferenceValue

	|senderAccount receiverAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount to: receiverAccount withValue: 100.
	
	self assert: (transference depositLeg value ) equals: transference value .! !

!testRun: #TransferenceTest #test08DepositLegKnowsTransferenceValue stamp: 'hh 10/22/2023 23:34:31'!
ERROR!

!testRun: #TransferenceTest #test08DepositLegKnowsTransferenceValue stamp: 'hh 10/22/2023 23:34:31'!
ERROR!
!DepositLeg methodsFor: 'value' stamp: 'hh 10/22/2023 23:34:36' overrides: 50650938!
value
	self shouldBeImplemented.! !
!DepositLeg methodsFor: 'value' stamp: 'hh 10/22/2023 23:34:41' prior: 50651948 overrides: 50650938!
value
	
	^transference value! !

!testRun: #TransferenceTest #test08DepositLegKnowsTransferenceValue stamp: 'hh 10/22/2023 23:34:43'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'hh 10/22/2023 23:34:44'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'hh 10/22/2023 23:34:45'!
PASSED!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:34:45'!
PASSED!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'hh 10/22/2023 23:34:45'!
PASSED!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'hh 10/22/2023 23:34:45'!
PASSED!

!testRun: #TransferenceTest #test06WithdrawLegCanNagivateToDepositLeg stamp: 'hh 10/22/2023 23:34:45'!
PASSED!

!testRun: #TransferenceTest #test07WithdrawLegKnowsTransferenceValue stamp: 'hh 10/22/2023 23:34:45'!
PASSED!

!testRun: #TransferenceTest #test08DepositLegKnowsTransferenceValue stamp: 'hh 10/22/2023 23:34:45'!
PASSED!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'hh 10/22/2023 23:35:50'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(22 October 2023 23:37:12) CuisUniversity-5981.image priorSource: 10236458!

----QUIT----(22 October 2023 23:37:15) CuisUniversity-5981.image priorSource: 10251182!

----STARTUP---- (25 October 2023 14:08:26) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'hh 10/25/2023 14:26:39'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'no messages' stamp: 'hh 10/25/2023 14:26:33'!
test01AccountSummaryWithNoTransactionsHasCeroAsBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary equals: (OrderedCollection new add: 'Balance = 0').! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:26:42'!
ERROR!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:26:42'!
ERROR!
!AccountSummary class methodsFor: 'instance creation' stamp: 'hh 10/25/2023 14:26:48'!
for: anAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: anAccount ! !
!AccountSummary class methodsFor: 'instance creation' stamp: 'hh 10/25/2023 14:26:56' prior: 50652036!
for: anAccount 

	^self new initializeFor: anAccount.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'hh 10/25/2023 14:27:35'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialize' stamp: 'hh 10/25/2023 14:27:35'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!AccountSummary methodsFor: 'initialize' stamp: 'hh 10/25/2023 14:27:42' prior: 50652056!
initializeFor: anAccount 
	
	account := anAccount.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:27:53'!
ERROR!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:27:53'!
ERROR!
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 14:27:59'!
computeSummary
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 14:28:11' prior: 50652074!
computeSummary
	
	^'Balance = 0'! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:28:14'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:32:40'!
test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Deposit for 100'.
	self assert: accountSummary computeSummary second equals: 'Balance = 100'.! !

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:32:41'!
FAILURE!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:32:42'!
FAILURE!
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 14:35:49' prior: 50652079!
computeSummary
	
	^account accountSummary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 14:38:58'!
accountSummary

	|summary|
	
	summary := OrderedCollection new.

	transactions ifNotEmpty: [
		(transactions first isKindOf: Deposit) ifTrue: [summary add: 'Deposit for ',transactions first value]
		].
	
	summary add: 'Balance = ',self balance.
	
	^summary.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:39:02'!
ERROR!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:39:02'!
ERROR!

accountSummary computeSummary!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 14:40:55' prior: 50652114!
accountSummary

	|summary|
	
	summary := OrderedCollection new.

	transactions ifNotEmpty: [
		(transactions first isKindOf: Deposit) ifTrue: [summary add: 'Deposit for ',transactions first value asString]
		].
	
	summary add: 'Balance = ',self balance asString.
	
	^summary.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:40:56'!
FAILURE!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:40:56'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:40:56'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:41:13' prior: 50652017!
test01AccountSummaryWithNoTransactionsHasCeroAsBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary equals: (OrderedCollection new add: 'Balance = 0';yourself).! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:41:14'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:41:15'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:41:58'!
test02AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 50 on: anAccount .
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Withdraw for 50'.
	self assert: accountSummary computeSummary second equals: 'Balance = -50'.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:42:06'!
test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 50 on: anAccount .
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Withdraw for 50'.
	self assert: accountSummary computeSummary second equals: 'Balance = -50'.! !

!methodRemoval: ReportTest #test02AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:42:06'!
test02AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 50 on: anAccount .
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Withdraw for 50'.
	self assert: accountSummary computeSummary second equals: 'Balance = -50'.!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 14:42:36' prior: 50652134!
accountSummary

	|summary|
	
	summary := OrderedCollection new.

	transactions ifNotEmpty: [
		(transactions first isKindOf: Deposit) ifTrue: [summary add: 'Deposit for ',transactions first value asString].
		(transactions first isKindOf: Withdraw) ifTrue: [summary add: 'Withdraw for ',transactions first value asString].
		].
	
	summary add: 'Balance = ',self balance asString.
	
	^summary.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:42:38'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:42:38'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:42:38'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:43:58'!
test03AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Exit by transference for 50'.
	self assert: accountSummary computeSummary second equals: 'Balance = -50'.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 14:44:29' prior: 50652224!
accountSummary

	|summary|
	
	summary := OrderedCollection new.

	transactions ifNotEmpty: [
		(transactions first isKindOf: Deposit) ifTrue: [summary add: 'Deposit for ',transactions first value asString].
		(transactions first isKindOf: Withdraw) ifTrue: [summary add: 'Withdraw for ',transactions first value asString].
		(transactions first isKindOf: WithdrawLeg) ifTrue: [summary add: 'Exit by transference ',transactions first value asString]
		].
	
	summary add: 'Balance = ',self balance asString.
	
	^summary.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:44:32'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:44:32'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:44:32'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:44:32'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:44:32'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:44:47'!
test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Exit by transference for 50'.
	self assert: accountSummary computeSummary second equals: 'Balance = -50'.! !

!methodRemoval: ReportTest #test03AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:44:47'!
test03AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Exit by transference for 50'.
	self assert: accountSummary computeSummary second equals: 'Balance = -50'.!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:44:51' prior: 50652307!
test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Exit by transference of 50'.
	self assert: accountSummary computeSummary second equals: 'Balance = -50'.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 14:44:57' prior: 50652268!
accountSummary

	|summary|
	
	summary := OrderedCollection new.

	transactions ifNotEmpty: [
		(transactions first isKindOf: Deposit) ifTrue: [summary add: 'Deposit for ',transactions first value asString].
		(transactions first isKindOf: Withdraw) ifTrue: [summary add: 'Withdraw for ',transactions first value asString].
		(transactions first isKindOf: WithdrawLeg) ifTrue: [summary add: 'Exit by transference of ',transactions first value asString]
		].
	
	summary add: 'Balance = ',self balance asString.
	
	^summary.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:44:59'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:44:59'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:44:59'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:44:59'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:45:30'!
test0AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Entrance by transference of 50'.
	self assert: accountSummary computeSummary second equals: 'Balance = 50'.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 14:45:51' prior: 50652358!
accountSummary

	|summary|
	
	summary := OrderedCollection new.

	transactions ifNotEmpty: [
		(transactions first isKindOf: Deposit) ifTrue: [summary add: 'Deposit for ',transactions first value asString].
		(transactions first isKindOf: Withdraw) ifTrue: [summary add: 'Withdraw for ',transactions first value asString].
		(transactions first isKindOf: WithdrawLeg) ifTrue: [summary add: 'Exit by transference of ',transactions first value asString].
		(transactions first isKindOf: DepositLeg) ifTrue: [summary add: 'Entrance by transference of ',transactions first value asString]
		].
	
	summary add: 'Balance = ',self balance asString.
	
	^summary.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:45:53'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:45:53'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:45:53'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:45:53'!
PASSED!

!testRun: #ReportTest #test0AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:45:53'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:45:59'!
test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Entrance by transference of 50'.
	self assert: accountSummary computeSummary second equals: 'Balance = 50'.! !

!methodRemoval: ReportTest #test0AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:45:59'!
test0AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Entrance by transference of 50'.
	self assert: accountSummary computeSummary second equals: 'Balance = 50'.!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:48:34'!
test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
	Withdraw register: 50 on: anAccount .
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Deposit for 100'.
	self assert: accountSummary computeSummary second equals: 'Withdraw for 50'.
	self assert: accountSummary computeSummary third equals: 'Entrance by transference of 50'.
	self assert: accountSummary computeSummary fourth equals: 'Exit by transference of 50'.
	self assert: accountSummary computeSummary fifth equals: 'Balance = 100'.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 14:50:41' prior: 50652410!
accountSummary

	|summary|
	
	summary := OrderedCollection new.
	
	transactions inject: summary into: [:accountSummary :aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposit for ',aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Withdraw for ',aTransaction value asString].
		(aTransaction isKindOf: WithdrawLeg) ifTrue: [accountSummary add: 'Exit by transference of ',aTransaction value asString].
		(aTransaction isKindOf: DepositLeg) ifTrue: [accountSummary add: 'Entrance by transference of ',aTransaction value asString]. accountSummary .
		].
	
	summary add: 'Balance = ',self balance asString.
	
	^summary.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:50:43'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:50:43'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:50:43'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:50:43'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:50:43'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 14:50:43'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 14:50:43'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 14:50:48'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 14:50:48'!
FAILURE!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:50:52'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:50:54'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 14:50:55'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 14:50:55'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:51:17' prior: 50652486!
test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
	Withdraw register: 50 on: anAccount .
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Deposit for 100'.
	self assert: accountSummary computeSummary second equals: 'Withdraw for 50'.
	self assert: accountSummary computeSummary third equals: 'Exit by transference of 50'.
	self assert: accountSummary computeSummary fourth equals: 'Entrance by transference of 50'.
	self assert: accountSummary computeSummary fifth equals: 'Balance = 100'.! !

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 14:51:18'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 14:51:18'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 14:51:25' prior: 50652596!
test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
	Withdraw register: 50 on: anAccount .
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary computeSummary first equals: 'Deposit for 100'.
	self assert: accountSummary computeSummary second equals: 'Withdraw for 50'.
	self assert: accountSummary computeSummary third equals: 'Exit by transference of 50'.
	self assert: accountSummary computeSummary fourth equals: 'Entrance by transference of 50'.
	self assert: accountSummary computeSummary fifth equals: 'Balance = 50'.! !

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 14:51:26'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 14:55:10' prior: 50652515!
accountSummary

	|summary|
	
	summary := OrderedCollection new.
	
	transactions inject: summary into: [:accountSummary :aTransaction |
			accountSummary add:aTransaction stringSummary;yourself
		].
	
	summary add: 'Balance = ',self balance asString.
	
	^summary.
	
	"(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposit for ',aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Withdraw for ',aTransaction value asString].
		(aTransaction isKindOf: WithdrawLeg) ifTrue: [accountSummary add: 'Exit by transference of ',aTransaction value asString].
		(aTransaction isKindOf: DepositLeg) ifTrue: [accountSummary add: 'Entrance by transference of ',aTransaction value asString]."! !
!Deposit methodsFor: 'reports' stamp: 'hh 10/25/2023 14:55:48'!
stringSummary

	^'Deposit for ',self value.! !
!Deposit methodsFor: 'reports' stamp: 'hh 10/25/2023 14:55:51' prior: 50652695!
stringSummary

	^'Deposit for ',self value asString.! !
!Withdraw methodsFor: 'value' stamp: 'hh 10/25/2023 14:56:04'!
stringSummary

	^'Withdraw for ',self value asString.! !
!DepositLeg methodsFor: 'affectBalance' stamp: 'hh 10/25/2023 14:56:32'!
stringSummary

	^'Entrance by transference of ',self value asString.! !
!WithdrawLeg methodsFor: 'affectBalance' stamp: 'hh 10/25/2023 14:56:38'!
stringSummary

	^'Exit by transference of ',self value asString.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 14:56:41'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:56:41'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:56:41'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:56:41'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 14:56:41'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 14:56:41'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 14:56:50' prior: 50652669!
accountSummary

	|summary|
	
	summary := OrderedCollection new.
	
	transactions inject: summary into: [:accountSummary :aTransaction |
			accountSummary add: aTransaction stringSummary;yourself
		].
	
	summary add: 'Balance = ',self balance asString.
	
	^summary.
	
	"(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposit for ',aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Withdraw for ',aTransaction value asString].
		(aTransaction isKindOf: WithdrawLeg) ifTrue: [accountSummary add: 'Exit by transference of ',aTransaction value asString].
		(aTransaction isKindOf: DepositLeg) ifTrue: [accountSummary add: 'Entrance by transference of ',aTransaction value asString]."! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 14:57:26' prior: 50652743!
accountSummary

	|summary|
	
	summary := OrderedCollection new.
	
	transactions inject: summary into: [:accountSummary :aTransaction |
			accountSummary add: aTransaction stringSummary;yourself
		].
	
	summary add: 'Balance = ',self balance asString.
	
	^summary.! !

1 to: 0!

1 to: 0!

|c|
c:=0.
1 to: 0 do: [:anelement | c:= c+ 1].c!

|c|
c:=0.
1 to: 0 do: [:anelement | c:= c+ 1].c!

|c|
c:=0.
1 to: 1 do: [:anelement | c:= c+ 1].c!

|c|
c:=0.
1 to: 1 do: [:anelement | c:= c+ 1].c.1 to:0 size!

|c|
c:=0.
1 to: 1 do: [:anelement | c:= c+ 1].c.(1 to:0) size!

|c|
c:=0.
OrderedCollection new do: [:anelement | c:= c+ 1].c!

OrderedCollection new size!

(OrderedCollection new add: 1) size!

(OrderedCollection new add: 1) size!

(OrderedCollection new add: 1)!

(OrderedCollection new add: 1)!

OrderedCollection new add: 1;yourself !

(OrderedCollection new add: 1;yourself )size!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'hh 10/25/2023 15:15:51'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialize' stamp: 'hh 10/25/2023 15:15:50' prior: 50652062!
initializeFor: anAccount 
	
	account := anAccount.
	summary := OrderedCollection new.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:15:58'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:15:58'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:15:58'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:15:58'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:15:58'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 15:15:58'!
PASSED!
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 15:17:17' prior: 50652110!
computeSummary
	
	^account computeSummary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 15:18:47'!
computeSummary
	
	transactions do: [:aTransaction |
			aTransaction addStringSummaryToSummary
		].! !
!AccountTransaction methodsFor: 'value' stamp: 'hh 10/25/2023 15:18:58'!
addStringSummaryToSummary

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'hh 10/25/2023 15:19:08' overrides: 50652849!
addStringSummaryToSummary

	self subclassResponsibility ! !
!Withdraw methodsFor: 'value' stamp: 'hh 10/25/2023 15:19:08' overrides: 50652849!
addStringSummaryToSummary

	self subclassResponsibility ! !
!TransferenceLegs methodsFor: 'value' stamp: 'hh 10/25/2023 15:19:08' overrides: 50652849!
addStringSummaryToSummary

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'hh 10/25/2023 15:19:08' prior: 50652849!
addStringSummaryToSummary

	self subclassResponsibility! !
!WithdrawLeg methodsFor: 'value' stamp: 'hh 10/25/2023 15:19:24' overrides: 50652864!
addStringSummaryToSummary

	self subclassResponsibility ! !
!DepositLeg methodsFor: 'value' stamp: 'hh 10/25/2023 15:19:24' overrides: 50652864!
addStringSummaryToSummary

	self subclassResponsibility ! !
!TransferenceLegs methodsFor: 'value' stamp: 'hh 10/25/2023 15:19:25' prior: 50652864 overrides: 50652869!
addStringSummaryToSummary

	self subclassResponsibility! !
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 15:19:54' prior: 50652839!
computeSummary
	
	^account computeSummary: self.! !

!methodRemoval: ReceptiveAccount #computeSummary stamp: 'hh 10/25/2023 15:20:13'!
computeSummary
	
	transactions do: [:aTransaction |
			aTransaction addStringSummaryToSummary
		].!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 15:20:43'!
computeSummary: aMethodObject
	
	transactions do: [:aTransaction |
			aTransaction addStringSummaryToSummary: aMethodObject 
		].! !

!methodRemoval: AccountTransaction #addStringSummaryToSummary stamp: 'hh 10/25/2023 15:20:56'!
addStringSummaryToSummary

	self subclassResponsibility!
!AccountTransaction methodsFor: 'balance' stamp: 'hh 10/25/2023 15:21:03'!
addStringSummaryToSummary: aMethodObject 

	self subclassResponsibility ! !
!Deposit methodsFor: 'balance' stamp: 'hh 10/25/2023 15:21:07' overrides: 50652912!
addStringSummaryToSummary: aMethodObject 

	self subclassResponsibility ! !
!Withdraw methodsFor: 'balance' stamp: 'hh 10/25/2023 15:21:08' overrides: 50652912!
addStringSummaryToSummary: aMethodObject 

	self subclassResponsibility ! !
!TransferenceLegs methodsFor: 'balance' stamp: 'hh 10/25/2023 15:21:08' overrides: 50652912!
addStringSummaryToSummary: aMethodObject 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'hh 10/25/2023 15:21:08' prior: 50652912!
addStringSummaryToSummary: aMethodObject

	self subclassResponsibility! !
!WithdrawLeg methodsFor: 'balance' stamp: 'hh 10/25/2023 15:21:15' overrides: 50652929!
addStringSummaryToSummary: aMethodObject 

	self subclassResponsibility ! !
!DepositLeg methodsFor: 'balance' stamp: 'hh 10/25/2023 15:21:15' overrides: 50652929!
addStringSummaryToSummary: aMethodObject 

	self subclassResponsibility ! !
!TransferenceLegs methodsFor: 'balance' stamp: 'hh 10/25/2023 15:21:15' prior: 50652929 overrides: 50652935!
addStringSummaryToSummary: aMethodObject

	self subclassResponsibility! !

!methodRemoval: TransferenceLegs #addStringSummaryToSummary stamp: 'hh 10/25/2023 15:21:17'!
addStringSummaryToSummary

	self subclassResponsibility!

!methodRemoval: Deposit #addStringSummaryToSummary stamp: 'hh 10/25/2023 15:21:24'!
addStringSummaryToSummary

	self subclassResponsibility !

!methodRemoval: Withdraw #addStringSummaryToSummary stamp: 'hh 10/25/2023 15:21:26'!
addStringSummaryToSummary

	self subclassResponsibility !

!methodRemoval: WithdrawLeg #addStringSummaryToSummary stamp: 'hh 10/25/2023 15:21:29'!
addStringSummaryToSummary

	self subclassResponsibility !

!methodRemoval: DepositLeg #addStringSummaryToSummary stamp: 'hh 10/25/2023 15:21:31'!
addStringSummaryToSummary

	self subclassResponsibility !
!AccountTransaction methodsFor: 'balance' stamp: 'hh 10/25/2023 15:22:45' prior: 50652935!
addStringSummaryToSummary: aMethodObject 

	aMethodObject addStringSummary: self stringSummary! !

!methodRemoval: Deposit #addStringSummaryToSummary: stamp: 'hh 10/25/2023 15:23:12'!
addStringSummaryToSummary: aMethodObject 

	self subclassResponsibility !

!methodRemoval: TransferenceLegs #addStringSummaryToSummary: stamp: 'hh 10/25/2023 15:23:14'!
addStringSummaryToSummary: aMethodObject

	self subclassResponsibility!

!methodRemoval: DepositLeg #addStringSummaryToSummary: stamp: 'hh 10/25/2023 15:23:16'!
addStringSummaryToSummary: aMethodObject 

	self subclassResponsibility !

!methodRemoval: WithdrawLeg #addStringSummaryToSummary: stamp: 'hh 10/25/2023 15:23:18'!
addStringSummaryToSummary: aMethodObject 

	self subclassResponsibility !

!methodRemoval: Withdraw #addStringSummaryToSummary: stamp: 'hh 10/25/2023 15:23:21'!
addStringSummaryToSummary: aMethodObject 

	self subclassResponsibility !
!AccountTransaction methodsFor: 'reports' stamp: 'hh 10/25/2023 15:23:31'!
stringSummary

	^'Deposit for ',self value asString.! !

!methodRemoval: Deposit #stringSummary stamp: 'hh 10/25/2023 15:23:31'!
stringSummary

	^'Deposit for ',self value asString.!
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 15:24:11'!
addStringSummary: aStringSummary
	
	summary add: aStringSummary .! !
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 15:24:57' prior: 50652890!
computeSummary

	summary := OrderedCollection new.
	
	account computeSummary: self.
	
	^summary! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:25:15'!
FAILURE!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:25:15'!
ERROR!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:25:15'!
ERROR!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:25:15'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:25:15'!
ERROR!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 15:25:15'!
ERROR!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:25:26'!
FAILURE!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:25:26'!
FAILURE!
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 15:26:01' prior: 50653025!
computeSummary

	summary := OrderedCollection new.
	
	account computeSummary: self.
	
	summary add: 'Balance = ',account balance asString.
	
	^summary! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:26:03'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:26:03'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:26:03'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:26:03'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:26:03'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 15:26:03'!
PASSED!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'hh 10/25/2023 15:27:43'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 15:27:39'!
test06TransferNetWithNoTransactionsEqualsCero

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	self assert: transferNet computeTransferNet equals: 0.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 15:27:49'!
test07TransferNetWithNoTransactionsEqualsCero

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	self assert: transferNet computeTransferNet equals: 0.! !

!methodRemoval: ReportTest #test06TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 15:27:49'!
test06TransferNetWithNoTransactionsEqualsCero

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	self assert: transferNet computeTransferNet equals: 0.!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 15:27:50'!
ERROR!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 15:27:50'!
ERROR!
!TransferNet class methodsFor: 'instance creation' stamp: 'hh 10/25/2023 15:27:56'!
for: anAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: anAccount ! !
!TransferNet class methodsFor: 'instance creation' stamp: 'hh 10/25/2023 15:28:01' prior: 50653139!
for: anAccount 
	
	^self new initializeFor: anAccount.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'hh 10/25/2023 15:28:20'!
Object subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialize' stamp: 'hh 10/25/2023 15:28:20'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!TransferNet methodsFor: 'initialize' stamp: 'hh 10/25/2023 15:28:22' prior: 50653159!
initializeFor: anAccount 
	
	account := anAccount.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:28:31'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:28:31'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:28:31'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:28:31'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:28:31'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 15:28:31'!
PASSED!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 15:28:31'!
ERROR!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 15:28:31'!
ERROR!
!TransferNet methodsFor: 'compute' stamp: 'hh 10/25/2023 15:28:37'!
computeTransferNet
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'compute' stamp: 'hh 10/25/2023 15:28:40' prior: 50653201!
computeTransferNet
	
	^0! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:28:43'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:28:43'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:28:43'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:28:43'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:28:43'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 15:28:43'!
PASSED!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 15:28:43'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 15:33:24'!
test08TransferNetProcessDepositLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	
	self assert: transferNet computeTransferNet equals: -50.! !
!TransferNet methodsFor: 'compute' stamp: 'hh 10/25/2023 15:34:01' prior: 50653206!
computeTransferNet
	
	^account computeTransferNet: self.! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'hh 10/25/2023 15:34:10'!
accountSummary

	|summary|
	
	summary := OrderedCollection new.
	
	transactions inject: summary into: [:accountSummary :aTransaction |
			accountSummary add: aTransaction stringSummary;yourself
		].
	
	summary add: 'Balance = ',self balance asString.
	
	^summary.!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:34:13'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:34:13'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:34:13'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:34:13'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:34:13'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 15:34:13'!
PASSED!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 15:34:13'!
ERROR!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 15:34:13'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 15:34:54'!
computeTransferNet: aMethodObject
	
	transactions do: [:aTransaction |
			aTransaction calculateTransferNet: aMethodObject .
		].! !
!AccountTransaction methodsFor: 'balance' stamp: 'hh 10/25/2023 15:35:09'!
calculateTransferNet: aMethodObject

	self subclassResponsibility .! !
!Deposit methodsFor: 'balance' stamp: 'hh 10/25/2023 15:35:15' overrides: 50653304!
calculateTransferNet: aMethodObject

	self subclassResponsibility .! !
!Withdraw methodsFor: 'balance' stamp: 'hh 10/25/2023 15:35:15' overrides: 50653304!
calculateTransferNet: aMethodObject

	self subclassResponsibility .! !
!TransferenceLegs methodsFor: 'balance' stamp: 'hh 10/25/2023 15:35:15' overrides: 50653304!
calculateTransferNet: aMethodObject

	self subclassResponsibility .! !
!AccountTransaction methodsFor: 'balance' stamp: 'hh 10/25/2023 15:35:15' prior: 50653304!
calculateTransferNet: aMethodObject

	self subclassResponsibility! !
!WithdrawLeg methodsFor: 'balance' stamp: 'hh 10/25/2023 15:35:20' overrides: 50653320!
calculateTransferNet: aMethodObject

	self subclassResponsibility .! !
!DepositLeg methodsFor: 'balance' stamp: 'hh 10/25/2023 15:35:20' overrides: 50653320!
calculateTransferNet: aMethodObject

	self subclassResponsibility .! !
!TransferenceLegs methodsFor: 'balance' stamp: 'hh 10/25/2023 15:35:20' prior: 50653320 overrides: 50653326!
calculateTransferNet: aMethodObject

	self subclassResponsibility! !
!Deposit methodsFor: 'balance' stamp: 'hh 10/25/2023 15:35:26' prior: 50653309 overrides: 50653326!
calculateTransferNet: aMethodObject

	! !
!DepositLeg methodsFor: 'balance' stamp: 'hh 10/25/2023 15:35:54' prior: 50653336 overrides: 50653342!
calculateTransferNet: aMethodObject

	aMethodObject increaseTransferNetBy: self value.! !
!WithdrawLeg methodsFor: 'affectBalance' stamp: 'hh 10/25/2023 15:36:18' prior: 50653331 overrides: 50653342!
calculateTransferNet: aMethodObject

	aMethodObject decreaseTransferNetBy: self value.! !
!Withdraw methodsFor: 'balance' stamp: 'hh 10/25/2023 15:36:30' prior: 50653314 overrides: 50653326!
calculateTransferNet: aMethodObject! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'hh 10/25/2023 15:37:40'!
Object subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'compute' stamp: 'hh 10/25/2023 15:37:39'!
decreaseTransferNetBy: aTransferenceValue
	
	transferNet := transferNet - aTransferenceValue .! !
!TransferNet methodsFor: 'initialize' stamp: 'hh 10/25/2023 15:37:49' prior: 50653165!
initializeFor: anAccount 
	
	account := anAccount.
	transferNet := 0.! !
!TransferNet methodsFor: 'compute' stamp: 'hh 10/25/2023 15:38:03' prior: 50653250!
computeTransferNet
	
	transferNet := 0.
	
	account computeTransferNet: self.
	
	^transferNet .! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:38:06'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:38:06'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:38:06'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:38:06'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:38:06'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 15:38:06'!
PASSED!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 15:38:06'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 15:38:06'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 15:38:34'!
test09TransferNetProcessWithdrawLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount new withValue: 50.
	
	self assert: transferNet computeTransferNet equals: 50.! !

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 15:38:36'!
ERROR!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 15:38:36'!
ERROR!
!TransferNet methodsFor: 'compute' stamp: 'hh 10/25/2023 15:38:53'!
increaseTransferNetBy: aTransferenceValue
	
	transferNet := transferNet + aTransferenceValue .! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:38:55'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:38:55'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:38:55'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:38:55'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:38:55'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 15:38:55'!
PASSED!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 15:38:55'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 15:38:55'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 15:38:55'!
ERROR!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 15:38:55'!
ERROR!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 15:39:21'!
ERROR!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 15:39:21'!
ERROR!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 15:39:29' prior: 50653426!
test09TransferNetProcessWithdrawLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet computeTransferNet equals: 50.! !

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 15:39:30'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 15:39:31'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:39:31'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:39:31'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:39:31'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 15:39:31'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 15:39:31'!
PASSED!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 15:39:31'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 15:39:31'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 15:39:32'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 15:47:18'!
makeReportFor: aMethodObject
	
	transactions do: [:aTransaction |
			aTransaction makeOperationFor: aMethodObject 
		].! !
!AccountTransaction methodsFor: 'balance' stamp: 'hh 10/25/2023 15:47:32'!
makeOperationFor: aMethodObject 

	self subclassResponsibility ! !
!Deposit methodsFor: 'balance' stamp: 'hh 10/25/2023 15:47:45' overrides: 50653553!
makeOperationFor: aMethodObject 

	self subclassResponsibility ! !
!Withdraw methodsFor: 'balance' stamp: 'hh 10/25/2023 15:47:45' overrides: 50653553!
makeOperationFor: aMethodObject 

	self subclassResponsibility ! !
!TransferenceLegs methodsFor: 'balance' stamp: 'hh 10/25/2023 15:47:45' overrides: 50653553!
makeOperationFor: aMethodObject 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'hh 10/25/2023 15:47:45' prior: 50653553!
makeOperationFor: aMethodObject

	self subclassResponsibility! !
!WithdrawLeg methodsFor: 'balance' stamp: 'hh 10/25/2023 15:47:49' overrides: 50653568!
makeOperationFor: aMethodObject 

	self subclassResponsibility ! !
!DepositLeg methodsFor: 'balance' stamp: 'hh 10/25/2023 15:47:49' overrides: 50653568!
makeOperationFor: aMethodObject 

	self subclassResponsibility ! !
!TransferenceLegs methodsFor: 'balance' stamp: 'hh 10/25/2023 15:47:49' prior: 50653568 overrides: 50653573!
makeOperationFor: aMethodObject

	self subclassResponsibility! !
!Deposit methodsFor: 'balance' stamp: 'hh 10/25/2023 15:51:28' prior: 50653558 overrides: 50653573!
makeOperationFor: aMethodObject 

	aMethodObject depositOperation! !
!DepositLeg methodsFor: 'balance' stamp: 'hh 10/25/2023 15:51:36' prior: 50653583 overrides: 50653589!
makeOperationFor: aMethodObject 

	aMethodObject depositLegOperation! !
!WithdrawLeg methodsFor: 'balance' stamp: 'hh 10/25/2023 15:51:54' prior: 50653578 overrides: 50653589!
makeOperationFor: aMethodObject 

	aMethodObject withdrawLegOperation! !
!Withdraw methodsFor: 'balance' stamp: 'hh 10/25/2023 15:52:08' prior: 50653563 overrides: 50653573!
makeOperationFor: aMethodObject 

	aMethodObject withdrawOperation! !

!methodRemoval: Withdraw #stringSummary stamp: 'hh 10/25/2023 15:54:48'!
stringSummary

	^'Withdraw for ',self value asString.!

!methodRemoval: WithdrawLeg #stringSummary stamp: 'hh 10/25/2023 15:54:51'!
stringSummary

	^'Exit by transference of ',self value asString.!

!methodRemoval: AccountTransaction #stringSummary stamp: 'hh 10/25/2023 15:55:02'!
stringSummary

	^'Deposit for ',self value asString.!
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 15:56:08'!
depositOperation! !
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 15:57:18'!
depositOperation: aDeposit

	^summary add: 'Deposit for', aDeposit value! !

!methodRemoval: AccountSummary #depositOperation stamp: 'hh 10/25/2023 15:57:22'!
depositOperation!
!Deposit methodsFor: 'reportOperation' stamp: 'hh 10/25/2023 15:57:34' prior: 50653595 overrides: 50653573!
makeOperationFor: aMethodObject 

	aMethodObject depositOperation: self.! !
!DepositLeg methodsFor: 'reportOperation' stamp: 'hh 10/25/2023 15:57:44' prior: 50653601 overrides: 50653589!
makeOperationFor: aMethodObject 

	aMethodObject depositLegOperation: self! !
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 15:58:09'!
depositLegOperation: aDepositLeg

	! !

!methodRemoval: DepositLeg #stringSummary stamp: 'hh 10/25/2023 15:58:17'!
stringSummary

	^'Entrance by transference of ',self value asString.!
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 15:58:29' prior: 50653654!
depositLegOperation: aDepositLeg

	^'Entrance by transference of ',aDepositLeg value asString.! !
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 15:58:33' prior: 50653634!
depositOperation: aDeposit

	^summary add: 'Deposit for', aDeposit value asString! !
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 15:58:56'!
withdrawOperation: aWithdraw

	^summary add: 'Withdraw for', aWithdraw value asString! !
!Withdraw methodsFor: 'reportOperation' stamp: 'hh 10/25/2023 15:59:05' prior: 50653613 overrides: 50653573!
makeOperationFor: aMethodObject 

	aMethodObject withdrawOperation: self! !
!WithdrawLeg methodsFor: 'reportOperation' stamp: 'hh 10/25/2023 15:59:12' prior: 50653607 overrides: 50653589!
makeOperationFor: aMethodObject 

	aMethodObject withdrawLegOperation: self! !
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 16:00:01'!
withdrawLegOperation: aWithdrawLeg

	^summary add: 'Exit by transference for', aWithdrawLeg value asString! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 16:00:07'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:00:07'!
ERROR!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:00:07'!
ERROR!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:00:08'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:00:08'!
ERROR!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 16:00:08'!
ERROR!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:00:08'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:00:08'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:00:08'!
PASSED!
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 16:01:25' prior: 50653063!
computeSummary

	summary := OrderedCollection new.
	
	account compute: self.
	
	summary add: 'Balance = ',account balance asString.
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'hh 10/25/2023 16:01:43'!
compute: aMethodObject
	
	transactions do: [:aTransaction |
			aTransaction makeReportFor: aMethodObject 
		].! !

!methodRemoval: ReceptiveAccount #compute: stamp: 'hh 10/25/2023 16:01:54'!
compute: aMethodObject
	
	transactions do: [:aTransaction |
			aTransaction makeReportFor: aMethodObject 
		].!
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 16:02:05' prior: 50653733!
computeSummary

	summary := OrderedCollection new.
	
	account makeReportFor: self.
	
	summary add: 'Balance = ',account balance asString.
	
	^summary! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 16:02:06'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:06'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:06'!
FAILURE!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:06'!
FAILURE!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:07'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 16:02:07'!
FAILURE!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:02:07'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:02:07'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:02:07'!
PASSED!
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 16:02:32' prior: 50653669!
depositOperation: aDeposit

	^summary add: 'Deposit for ', aDeposit value asString! !
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 16:02:36' prior: 50653692!
withdrawLegOperation: aWithdrawLeg

	^summary add: 'Exit by transference for ', aWithdrawLeg value asString! !
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 16:02:39' prior: 50653674!
withdrawOperation: aWithdraw

	^summary add: 'Withdraw for ', aWithdraw value asString! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 16:02:44'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:44'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:44'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:44'!
FAILURE!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:44'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 16:02:44'!
FAILURE!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:02:44'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:02:44'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:02:44'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 16:02:47'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:47'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:47'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:47'!
FAILURE!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:02:47'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 16:02:47'!
FAILURE!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:02:47'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:02:47'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:02:47'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 16:03:49'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:03:49'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:03:49'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:03:49'!
FAILURE!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:03:49'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 16:03:49'!
FAILURE!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:03:49'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:03:49'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:03:49'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:03:52'!
FAILURE!
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 16:04:09' prior: 50653803!
withdrawLegOperation: aWithdrawLeg

	^summary add: 'Exit by transference of ', aWithdrawLeg value asString! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 16:04:15'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:04:15'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:04:15'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:04:15'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:04:16'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 16:04:16'!
FAILURE!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:04:16'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:04:16'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:04:16'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:04:19'!
FAILURE!

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 16:05:33'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:05:33'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:05:33'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:05:33'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:05:33'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 16:05:33'!
FAILURE!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:05:33'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:05:33'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:05:33'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:05:34'!
FAILURE!

accountSummary computeSummary!
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/25/2023 16:06:57' prior: 50653663!
depositLegOperation: aDepositLeg

	^summary add: 'Entrance by transference of ',aDepositLeg value asString.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 16:07:00'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:07:01'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:07:01'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:07:01'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:07:01'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 16:07:01'!
PASSED!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:07:01'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:07:01'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:07:01'!
PASSED!

!methodRemoval: AccountTransaction #addStringSummaryToSummary: stamp: 'hh 10/25/2023 16:07:08'!
addStringSummaryToSummary: aMethodObject 

	aMethodObject addStringSummary: self stringSummary!

!methodRemoval: ReceptiveAccount #computeSummary: stamp: 'hh 10/25/2023 16:07:26'!
computeSummary: aMethodObject
	
	transactions do: [:aTransaction |
			aTransaction addStringSummaryToSummary: aMethodObject 
		].!
!TransferNet methodsFor: 'compute' stamp: 'hh 10/25/2023 16:07:54' prior: 50653389!
computeTransferNet
	
	transferNet := 0.
	
	account makeReportFor: self.
	
	^transferNet .! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:09:01'!
depositOperation

! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:09:15'!
depositLegOperation: aMethodObject

	

! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:09:22'!
depositOperation: aMethodObject

! !

!methodRemoval: TransferNet #depositOperation stamp: 'hh 10/25/2023 16:09:23'!
depositOperation

!
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:09:42' prior: 50654074!
depositLegOperation: aMethodObject

	aMethodObject depositLegOperation: self.
	
! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:09:51' prior: 50654078!
depositOperation: aMethodObject! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:10:01'!
withdrawLegOperation: aMethodObject

	aMethodObject withdrawLegOperation: self.
	
! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:10:05'!
withdrawOperation: aMethodObject
	
! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:10:44' prior: 50654100!
withdrawOperation: aWithdraw
	
! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:11:11' prior: 50654095!
withdrawLegOperation: aWithdrawLeg

	transferNet := transferNet - aWithdrawLeg value.
	
! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:11:28' prior: 50654085!
depositLegOperation: aDepositLeg

	transferNet := transferNet + aDepositLeg value.
	
! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/25/2023 16:11:33' prior: 50654091!
depositOperation: aDeposit! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 16:11:54'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:11:54'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:11:54'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:11:54'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:11:54'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 16:11:54'!
PASSED!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:11:54'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:11:54'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:11:54'!
PASSED!

!methodRemoval: TransferNet #decreaseTransferNetBy: stamp: 'hh 10/25/2023 16:12:00'!
decreaseTransferNetBy: aTransferenceValue
	
	transferNet := transferNet - aTransferenceValue .!

!methodRemoval: TransferNet #increaseTransferNetBy: stamp: 'hh 10/25/2023 16:12:01'!
increaseTransferNetBy: aTransferenceValue
	
	transferNet := transferNet + aTransferenceValue .!

!methodRemoval: Withdraw #calculateTransferNet: stamp: 'hh 10/25/2023 16:12:11'!
calculateTransferNet: aMethodObject!

!methodRemoval: WithdrawLeg #calculateTransferNet: stamp: 'hh 10/25/2023 16:12:15'!
calculateTransferNet: aMethodObject

	aMethodObject decreaseTransferNetBy: self value.!

!methodRemoval: DepositLeg #calculateTransferNet: stamp: 'hh 10/25/2023 16:12:18'!
calculateTransferNet: aMethodObject

	aMethodObject increaseTransferNetBy: self value.!

!methodRemoval: TransferenceLegs #calculateTransferNet: stamp: 'hh 10/25/2023 16:12:22'!
calculateTransferNet: aMethodObject

	self subclassResponsibility!

!methodRemoval: Deposit #calculateTransferNet: stamp: 'hh 10/25/2023 16:12:41'!
calculateTransferNet: aMethodObject

	!

!methodRemoval: AccountTransaction #calculateTransferNet: stamp: 'hh 10/25/2023 16:12:47'!
calculateTransferNet: aMethodObject

	self subclassResponsibility!
!TransferenceLegs methodsFor: 'transference' stamp: 'hh 10/25/2023 16:13:13'!
transference
	
	^transference! !

!methodRemoval: DepositLeg #transference stamp: 'hh 10/25/2023 16:13:14'!
transference
	
	^transference!
!TransferenceLegs methodsFor: 'transference' stamp: 'hh 10/25/2023 16:13:22' prior: 50654198!
transference
	
	self subclassResponsibility ! !

!methodRemoval: ReceptiveAccount #computeTransferNet: stamp: 'hh 10/25/2023 16:13:53'!
computeTransferNet: aMethodObject
	
	transactions do: [:aTransaction |
			aTransaction calculateTransferNet: aMethodObject .
		].!
!TransferNet methodsFor: 'compute' stamp: 'hh 10/25/2023 16:14:08'!
compute
	
	transferNet := 0.
	
	account makeReportFor: self.
	
	^transferNet .! !

!methodRemoval: TransferNet #computeTransferNet stamp: 'hh 10/25/2023 16:14:11'!
computeTransferNet
	
	transferNet := 0.
	
	account makeReportFor: self.
	
	^transferNet .!

!methodRemoval: AccountSummary #addStringSummary: stamp: 'hh 10/25/2023 16:14:16'!
addStringSummary: aStringSummary
	
	summary add: aStringSummary .!
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 16:14:21'!
compute

	summary := OrderedCollection new.
	
	account makeReportFor: self.
	
	summary add: 'Balance = ',account balance asString.
	
	^summary! !

!methodRemoval: AccountSummary #compute stamp: 'hh 10/25/2023 16:14:33'!
compute

	summary := OrderedCollection new.
	
	account makeReportFor: self.
	
	summary add: 'Balance = ',account balance asString.
	
	^summary!
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/25/2023 16:14:41'!
compute

	summary := OrderedCollection new.
	
	account makeReportFor: self.
	
	summary add: 'Balance = ',account balance asString.
	
	^summary! !

!methodRemoval: AccountSummary #computeSummary stamp: 'hh 10/25/2023 16:14:42'!
computeSummary

	summary := OrderedCollection new.
	
	account makeReportFor: self.
	
	summary add: 'Balance = ',account balance asString.
	
	^summary!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:14:53' prior: 50652158!
test01AccountSummaryWithNoTransactionsHasCeroAsBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary compute equals: (OrderedCollection new add: 'Balance = 0';yourself).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:14:59' prior: 50652087!
test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary compute first equals: 'Deposit for 100'.
	self assert: accountSummary compute second equals: 'Balance = 100'.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:15:05' prior: 50652193!
test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 50 on: anAccount .
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary compute first equals: 'Withdraw for 50'.
	self assert: accountSummary compute second equals: 'Balance = -50'.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:15:10' prior: 50652341!
test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary compute first equals: 'Exit by transference of 50'.
	self assert: accountSummary compute second equals: 'Balance = -50'.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:15:15' prior: 50652453!
test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary compute first equals: 'Entrance by transference of 50'.
	self assert: accountSummary compute second equals: 'Balance = 50'.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:15:25' prior: 50652635!
test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
	Withdraw register: 50 on: anAccount .
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary compute first equals: 'Deposit for 100'.
	self assert: accountSummary compute second equals: 'Withdraw for 50'.
	self assert: accountSummary compute third equals: 'Exit by transference of 50'.
	self assert: accountSummary compute fourth equals: 'Entrance by transference of 50'.
	self assert: accountSummary compute fifth equals: 'Balance = 50'.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:15:29' prior: 50653112!
test07TransferNetWithNoTransactionsEqualsCero

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	self assert: transferNet compute equals: 0.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:15:32' prior: 50653238!
test08TransferNetProcessDepositLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	
	self assert: transferNet compute equals: -50.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:15:36' prior: 50653496!
test09TransferNetProcessWithdrawLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet compute equals: 50.! !

!testRun: #ReportTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/25/2023 16:15:37'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:15:37'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:15:37'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:15:37'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/25/2023 16:15:38'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/25/2023 16:15:38'!
PASSED!

!testRun: #ReportTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:15:38'!
PASSED!

!testRun: #ReportTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:15:38'!
PASSED!

!testRun: #ReportTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:15:38'!
PASSED!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'hh 10/25/2023 16:15:54'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'hh 10/25/2023 16:16:06'!
Report subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'hh 10/25/2023 16:16:14'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'compute' stamp: 'hh 10/25/2023 16:16:22'!
compute

	self subclassResponsibility! !
!Report methodsFor: 'operations' stamp: 'hh 10/25/2023 16:16:32'!
depositLegOperation: aDepositLeg

	self subclassResponsibility! !
!Report methodsFor: 'operations' stamp: 'hh 10/25/2023 16:16:35'!
depositOperation: aDeposit

	self subclassResponsibility! !
!Report methodsFor: 'operations' stamp: 'hh 10/25/2023 16:16:38'!
withdrawLegOperation: aWithdrawLeg

	self subclassResponsibility! !
!Report methodsFor: 'operations' stamp: 'hh 10/25/2023 16:16:40'!
withdrawOperation: aWithdraw

	self subclassResponsibility! !

----SNAPSHOT----(25 October 2023 16:18:12) CuisUniversity-5981.image priorSource: 10251275!

----QUIT----(25 October 2023 16:18:19) CuisUniversity-5981.image priorSource: 10330845!

----STARTUP---- (25 October 2023 16:27:58) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


!classRenamed: #ReportTest as: #AccountSummaryTest stamp: 'hh 10/25/2023 16:30:24'!
Smalltalk renameClassNamed: #ReportTest as: #AccountSummaryTest!

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'hh 10/25/2023 16:31:00'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'no messages' stamp: 'hh 10/25/2023 16:32:40'!
test01TransferNetWithNoTransactionsEqualsCero

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	self assert: transferNet compute equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:32:55'!
test02TransferNetProcessDepositLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	
	self assert: transferNet compute equals: -50.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:33:10'!
test03TransferNetProcessWithdrawLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet compute equals: 50.! !

!testRun: #TransferNetTest #test01TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:33:11'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:33:11'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:33:12'!
PASSED!

!methodRemoval: AccountSummaryTest #test09TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/25/2023 16:33:38'!
test09TransferNetProcessWithdrawLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet compute equals: 50.!

!methodRemoval: AccountSummaryTest #test08TransferNetProcessDepositLegCorrectly stamp: 'hh 10/25/2023 16:33:39'!
test08TransferNetProcessDepositLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	
	self assert: transferNet compute equals: -50.!

!methodRemoval: AccountSummaryTest #test07TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/25/2023 16:33:40'!
test07TransferNetWithNoTransactionsEqualsCero

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	self assert: transferNet compute equals: 0.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:35:00'!
test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance

	|portfolio accountSummary|
	
	portfolio := ReceptiveAccount new.
	accountSummary := AccountSummary for: portfolio .
	
	self assert: accountSummary compute first equals: 'Balance = 0'.! !

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/25/2023 16:35:02'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/25/2023 16:35:55' prior: 50654594!
test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance

	|portfolio accountSummary|
	
	portfolio := Portfolio new.
	accountSummary := AccountSummary for: portfolio .
	
	self assert: accountSummary compute first equals: 'Balance = 0'.! !

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/25/2023 16:35:56'!
ERROR!

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/25/2023 16:35:56'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'hh 10/25/2023 16:36:09'!
makeReportFor: anAccountSummary 
	self shouldBeImplemented.! !

----SNAPSHOT----(25 October 2023 16:41:49) CuisUniversity-5981.image priorSource: 10330938!

----QUIT----(25 October 2023 16:41:53) CuisUniversity-5981.image priorSource: 10335422!

----STARTUP---- (26 October 2023 01:15:28) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


!testRun: #AccountSummaryTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/26/2023 01:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/26/2023 01:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/26/2023 01:15:42'!
ERROR!

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/26/2023 01:15:42'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 01:16:10' prior: 50654628!
makeReportFor: aReport
	
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/26/2023 01:16:13'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:16:13'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:16:13'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:16:13'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:16:13'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/26/2023 01:16:13'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/26/2023 01:16:13'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'hh 10/26/2023 01:16:25' prior: 50653546!
makeReportFor: aReport
	
	transactions do: [:aTransaction |
			aTransaction makeOperationFor: aReport 
		].! !
!AccountTransaction methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:17:42'!
handleReportFor: aMethodObject

	self subclassResponsibility! !
!Deposit methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:17:42' overrides: 50654717!
handleReportFor: aMethodObject 

	aMethodObject depositOperation: self.! !
!TransferenceLegs methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:17:42' overrides: 50654717!
handleReportFor: aMethodObject

	self subclassResponsibility! !
!DepositLeg methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:17:42' overrides: 50654728!
handleReportFor: aMethodObject 

	aMethodObject depositLegOperation: self! !
!WithdrawLeg methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:17:42' overrides: 50654728!
handleReportFor: aMethodObject 

	aMethodObject withdrawLegOperation: self! !
!Withdraw methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:17:42' overrides: 50654717!
handleReportFor: aMethodObject 

	aMethodObject withdrawOperation: self! !

!methodRemoval: AccountTransaction #makeOperationFor: stamp: 'hh 10/26/2023 01:17:43'!
makeOperationFor: aMethodObject

	self subclassResponsibility!

!methodRemoval: Deposit #makeOperationFor: stamp: 'hh 10/26/2023 01:17:43'!
makeOperationFor: aMethodObject 

	aMethodObject depositOperation: self.!

!methodRemoval: TransferenceLegs #makeOperationFor: stamp: 'hh 10/26/2023 01:17:43'!
makeOperationFor: aMethodObject

	self subclassResponsibility!

!methodRemoval: DepositLeg #makeOperationFor: stamp: 'hh 10/26/2023 01:17:43'!
makeOperationFor: aMethodObject 

	aMethodObject depositLegOperation: self!

!methodRemoval: WithdrawLeg #makeOperationFor: stamp: 'hh 10/26/2023 01:17:43'!
makeOperationFor: aMethodObject 

	aMethodObject withdrawLegOperation: self!

!methodRemoval: Withdraw #makeOperationFor: stamp: 'hh 10/26/2023 01:17:43'!
makeOperationFor: aMethodObject 

	aMethodObject withdrawOperation: self!
!AccountTransaction methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:17:55' prior: 50654717!
handleReportFor: aReport

	self subclassResponsibility! !
!Deposit methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:18:08' prior: 50654722 overrides: 50654780!
handleReportFor: aReport

	aReport depositOperation: self.! !
!TransferenceLegs methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:18:14' prior: 50654728 overrides: 50654780!
handleReportFor: aReport

	self subclassResponsibility! !
!DepositLeg methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:18:22' prior: 50654733 overrides: 50654792!
handleReportFor: aReport

	aReport depositLegOperation: self! !
!WithdrawLeg methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:18:31' prior: 50654739 overrides: 50654792!
handleReportFor: aReport

	aReport withdrawLegOperation: self! !
!Withdraw methodsFor: 'reportOperation' stamp: 'hh 10/26/2023 01:18:40' prior: 50654745 overrides: 50654780!
handleReportFor: aReport

	aReport withdrawOperation: self! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'hh 10/26/2023 01:18:53' prior: 50654710!
makeReportFor: aReport
	
	transactions do: [:aTransaction |
			aTransaction handleReportFor: aReport 
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'hh 10/26/2023 01:18:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hh 10/26/2023 01:18:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'hh 10/26/2023 01:18:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'hh 10/26/2023 01:18:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'hh 10/26/2023 01:18:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'hh 10/26/2023 01:18:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'hh 10/26/2023 01:18:54'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:21:18'!
test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount

	|portfolio anAccount accountSummary|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	accountSummary := AccountSummary for: portfolio .
	Deposit register: 50 on: anAccount.
	
	
	self assert: accountSummary compute first equals: 'Deposit for 50'.
	self assert: accountSummary compute second equals: 'Balance = 50'.
	self assert: accountSummary compute size equals: 2! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:21:32' prior: 50654610!
test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance

	|portfolio accountSummary|
	
	portfolio := Portfolio new.
	accountSummary := AccountSummary for: portfolio .
	
	self assert: accountSummary compute first equals: 'Balance = 0'.
	self assert: accountSummary compute size equals: 1.! !

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/26/2023 01:21:34'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:21:39'!
FAILURE!

!testRun: #AccountSummaryTest #test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:21:39'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 01:22:04' prior: 50654676!
makeReportFor: aReport
	
	accounts ifNotEmpty: [accounts first makeReportFor: aReport ].! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/26/2023 01:22:06'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:22:06'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:22:06'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:22:06'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:22:06'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/26/2023 01:22:06'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/26/2023 01:22:06'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:22:06'!
FAILURE!

!testRun: #AccountSummaryTest #test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:22:06'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:22:39' prior: 50654848!
test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount

	|portfolio anAccount accountSummary|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	accountSummary := AccountSummary for: portfolio .
	Deposit register: 50 on: anAccount.
	portfolio add: anAccount .
	
	
	self assert: accountSummary compute first equals: 'Deposit for 50'.
	self assert: accountSummary compute second equals: 'Balance = 50'.
	self assert: accountSummary compute size equals: 2! !

!testRun: #AccountSummaryTest #test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:22:40'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:26:23'!
test09AccountSummaryProcessCorrectlyPortfolioWithMultipleAccounts

	|composedPortfolio includedPortfolio includedAccount secondIncludedAccount accountSummary|
	
	composedPortfolio := Portfolio new.
	includedPortfolio := Portfolio new.
	includedAccount := ReceptiveAccount new.
	secondIncludedAccount := ReceptiveAccount new.
	accountSummary := AccountSummary for: composedPortfolio .
	Deposit register: 50 on: includedAccount.
	Withdraw register: 50 on: secondIncludedAccount.
	composedPortfolio add: includedPortfolio .
	includedPortfolio add: includedAccount .
	composedPortfolio add: secondIncludedAccount .
	
	self assert: accountSummary compute first equals: 'Deposit for 50'.
	self assert: accountSummary compute second equals: 'Withdraw for 50'.
	self assert: accountSummary compute third equals: 'Balance = 0'.
	self assert: accountSummary compute size equals: 3! !
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 01:26:57' prior: 50654891!
makeReportFor: aReport
	
	accounts do: [:anAccount |
		anAccount makeReportFor: aReport
		].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'hh 10/26/2023 01:27:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'hh 10/26/2023 01:27:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'hh 10/26/2023 01:27:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'hh 10/26/2023 01:27:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'hh 10/26/2023 01:27:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'hh 10/26/2023 01:27:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'hh 10/26/2023 01:27:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'hh 10/26/2023 01:27:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'hh 10/26/2023 01:27:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'hh 10/26/2023 01:27:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'hh 10/26/2023 01:27:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'hh 10/26/2023 01:27:01'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'hh 10/26/2023 01:27:01'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'hh 10/26/2023 01:27:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'hh 10/26/2023 01:27:01'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/26/2023 01:27:04'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:27:04'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:27:05'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:27:05'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:27:05'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/26/2023 01:27:05'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/26/2023 01:27:05'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:27:05'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryProcessCorrectlyPortfolioWithMultipleAccounts stamp: 'hh 10/26/2023 01:27:05'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:28:48'!
test04TransferNetGivesCorrectTransferNetForMultipleTransferences

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	Transference from: anAccount new to: ReceptiveAccount new withValue: 20.
	Transference from: ReceptiveAccount new to: anAccount withValue: 10.
	
	self assert: transferNet compute equals: 40.! !

!testRun: #TransferNetTest #test04TransferNetGivesCorrectTransferNetForMultipleTransferences stamp: 'hh 10/26/2023 01:28:49'!
ERROR!

!testRun: #TransferNetTest #test04TransferNetGivesCorrectTransferNetForMultipleTransferences stamp: 'hh 10/26/2023 01:28:49'!
ERROR!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:28:57' prior: 50655090!
test04TransferNetGivesCorrectTransferNetForMultipleTransferences

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	Transference from: anAccount to: ReceptiveAccount new withValue: 20.
	Transference from: ReceptiveAccount new to: anAccount withValue: 10.
	
	self assert: transferNet compute equals: 40.! !

!testRun: #TransferNetTest #test04TransferNetGivesCorrectTransferNetForMultipleTransferences stamp: 'hh 10/26/2023 01:28:59'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:34:12'!
test05TransferNetGivesCorrectTransferNetForMultipleTransferences

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	Transference from: anAccount to: ReceptiveAccount new withValue: 20.
	Transference from: ReceptiveAccount new to: anAccount withValue: 10.
	
	self assert: transferNet compute equals: 40.! !

!methodRemoval: TransferNetTest #test04TransferNetGivesCorrectTransferNetForMultipleTransferences stamp: 'hh 10/26/2023 01:34:12'!
test04TransferNetGivesCorrectTransferNetForMultipleTransferences

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	Transference from: anAccount to: ReceptiveAccount new withValue: 20.
	Transference from: ReceptiveAccount new to: anAccount withValue: 10.
	
	self assert: transferNet compute equals: 40.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:35:56'!
test05NotTransferenceTransactionsDoNotAffectTransferNet

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount.
	Deposit register: 50 on: anAccount .
	Withdraw register: 20 on: anAccount.
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet compute equals: 50.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:36:02'!
test04TransferNetGivesCorrectTransferNetForMultipleTransferences

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	Transference from: anAccount to: ReceptiveAccount new withValue: 20.
	Transference from: ReceptiveAccount new to: anAccount withValue: 10.
	
	self assert: transferNet compute equals: 40.! !

!methodRemoval: TransferNetTest #test05TransferNetGivesCorrectTransferNetForMultipleTransferences stamp: 'hh 10/26/2023 01:36:02'!
test05TransferNetGivesCorrectTransferNetForMultipleTransferences

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	Transference from: anAccount to: ReceptiveAccount new withValue: 20.
	Transference from: ReceptiveAccount new to: anAccount withValue: 10.
	
	self assert: transferNet compute equals: 40.!

!testRun: #TransferNetTest #test05NotTransferenceTransactionsDoNotAffectTransferNet stamp: 'hh 10/26/2023 01:36:15'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:36:59'!
test05TransactionsOtherThanTransferencesDoNotAffectTransferNet

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount.
	Deposit register: 50 on: anAccount .
	Withdraw register: 20 on: anAccount.
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet compute equals: 50.! !

!methodRemoval: TransferNetTest #test05NotTransferenceTransactionsDoNotAffectTransferNet stamp: 'hh 10/26/2023 01:37:00'!
test05NotTransferenceTransactionsDoNotAffectTransferNet

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount.
	Deposit register: 50 on: anAccount .
	Withdraw register: 20 on: anAccount.
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet compute equals: 50.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:39:31'!
test06TransferNetOfEmptyPortfolo

	|portfolio transferNet|
	
	portfolio := ReceptiveAccount new.
	transferNet := TransferNet for: portfolio.
	
	self assert: transferNet compute equals: 0.! !

!testRun: #TransferNetTest #test06TransferNetOfEmptyPortfolo stamp: 'hh 10/26/2023 01:39:32'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:40:18'!
test06TransferNetOfEmptyPortfoloEqualsCero

	|portfolio transferNet|
	
	portfolio := ReceptiveAccount new.
	transferNet := TransferNet for: portfolio.
	
	self assert: transferNet compute equals: 0.! !

!methodRemoval: TransferNetTest #test06TransferNetOfEmptyPortfolo stamp: 'hh 10/26/2023 01:40:19'!
test06TransferNetOfEmptyPortfolo

	|portfolio transferNet|
	
	portfolio := ReceptiveAccount new.
	transferNet := TransferNet for: portfolio.
	
	self assert: transferNet compute equals: 0.!

----SNAPSHOT----(26 October 2023 01:40:29) CuisUniversity-5981.image priorSource: 10335515!

----SNAPSHOT----(26 October 2023 01:40:39) CuisUniversity-5981.image priorSource: 10356233!

----QUIT----(26 October 2023 01:41:07) CuisUniversity-5981.image priorSource: 10356326!

----STARTUP---- (26 October 2023 01:41:22) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!

!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:51:35'!
test07CorrectTransferNetForPortfolioWithOneAccount

	|portfolio anAccount transferNet|
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio add: anAccount .
	transferNet := TransferNet for: portfolio.
	Transference with: 50 from: ReceptiveAccount new to: anAccount.
	
	self assert: transferNet compute equals: 50.	! !

!testRun: #TransferNetTest #test07CorrectTransferNetForPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:51:36'!
ERROR!

!testRun: #TransferNetTest #test07CorrectTransferNetForPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:51:36'!
ERROR!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:52:03' prior: 50655295!
test07CorrectTransferNetForPortfolioWithOneAccount

	|portfolio anAccount transferNet|
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio add: anAccount .
	transferNet := TransferNet for: portfolio.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet compute equals: 50.	! !

!testRun: #TransferNetTest #test07CorrectTransferNetForPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:52:04'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:55:45'!
test08CorrectTransferNetForPortfolioWithMultipleAccount

	|composedPortfolio includedAccount includedPortfolio secondIncludedPortfolio secondIncludedAccount transferNet|
	
	composedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	includedAccount := ReceptiveAccount new.
	secondIncludedAccount := ReceptiveAccount new.
	
	composedPortfolio add: includedAccount .
	composedPortfolio add: secondIncludedPortfolio .
	secondIncludedPortfolio add: secondIncludedAccount .
	transferNet := TransferNet for: composedPortfolio.
	Transference with: 30 from: ReceptiveAccount new new to: secondIncludedAccount .
	Transference with: 10 from: includedAccount new to: ReceptiveAccount new.
	
	self assert: transferNet compute equals: 20.	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:56:14' prior: 50655335!
test08CorrectTransferNetForPortfolioWithMultipleAccount

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount transferNet|
	
	composedPortfolio := Portfolio new.
	includedPortfolio := Portfolio new.
	includedAccount := ReceptiveAccount new.
	secondIncludedAccount := ReceptiveAccount new.
	
	composedPortfolio add: includedAccount .
	composedPortfolio add: includedPortfolio .
	includedPortfolio add: secondIncludedAccount .
	
	transferNet := TransferNet for: composedPortfolio.
	Transference with: 30 from: ReceptiveAccount new new to: secondIncludedAccount .
	Transference with: 10 from: includedAccount new to: ReceptiveAccount new.
	
	self assert: transferNet compute equals: 20.	! !

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'hh 10/26/2023 01:56:15'!
ERROR!

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'hh 10/26/2023 01:56:15'!
ERROR!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:56:22' prior: 50655362!
test08CorrectTransferNetForPortfolioWithMultipleAccount

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount transferNet|
	
	composedPortfolio := Portfolio new.
	includedPortfolio := Portfolio new.
	includedAccount := ReceptiveAccount new.
	secondIncludedAccount := ReceptiveAccount new.
	
	composedPortfolio add: includedAccount .
	composedPortfolio add: includedPortfolio .
	includedPortfolio add: secondIncludedAccount .
	
	transferNet := TransferNet for: composedPortfolio.
	Transference with: 30 from: ReceptiveAccount new new to: secondIncludedAccount .
	Transference with: 10 from: includedAccount to: ReceptiveAccount new.
	
	self assert: transferNet compute equals: 20.	! !

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'hh 10/26/2023 01:56:22'!
ERROR!

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'hh 10/26/2023 01:56:22'!
ERROR!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:56:35' prior: 50655396!
test08CorrectTransferNetForPortfolioWithMultipleAccount

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount transferNet|
	
	composedPortfolio := Portfolio new.
	includedPortfolio := Portfolio new.
	includedAccount := ReceptiveAccount new.
	secondIncludedAccount := ReceptiveAccount new.
	
	composedPortfolio add: includedAccount .
	composedPortfolio add: includedPortfolio .
	includedPortfolio add: secondIncludedAccount .
	
	transferNet := TransferNet for: composedPortfolio.
	Transference with: 30 from: ReceptiveAccount new to: secondIncludedAccount .
	Transference with: 10 from: includedAccount to: ReceptiveAccount new.
	
	self assert: transferNet compute equals: 20.	! !

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'hh 10/26/2023 01:56:36'!
ERROR!

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'hh 10/26/2023 01:56:36'!
ERROR!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:56:54' prior: 50655430!
test08CorrectTransferNetForPortfolioWithMultipleAccount

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount transferNet|
	
	composedPortfolio := Portfolio new.
	includedPortfolio := Portfolio new.
	includedAccount := ReceptiveAccount new.
	secondIncludedAccount := ReceptiveAccount new.
	
	composedPortfolio add: includedAccount .
	composedPortfolio add: includedPortfolio .
	includedPortfolio add: secondIncludedAccount .
	
	transferNet := TransferNet for: composedPortfolio.
	Transference  from: ReceptiveAccount new to: secondIncludedAccount withValue: 30.
	Transference  from: includedAccount to: ReceptiveAccount new withValue: 10.
	
	self assert: transferNet compute equals: 20.	! !

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'hh 10/26/2023 01:56:55'!
PASSED!

----SNAPSHOT----(26 October 2023 01:57:35) CuisUniversity-5981.image priorSource: 10356419!

----QUIT----(26 October 2023 01:57:44) CuisUniversity-5981.image priorSource: 10362919!

----STARTUP---- (26 October 2023 01:58:12) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!

!Report methodsFor: 'compute' stamp: 'hh 10/26/2023 01:58:35'!
makeReport

	self subclassResponsibility! !
!AccountSummary methodsFor: 'compute' stamp: 'hh 10/26/2023 01:58:35' overrides: 50655501!
makeReport

	summary := OrderedCollection new.
	
	account makeReportFor: self.
	
	summary add: 'Balance = ',account balance asString.
	
	^summary! !
!TransferNet methodsFor: 'compute' stamp: 'hh 10/26/2023 01:58:35' overrides: 50655501!
makeReport
	
	transferNet := 0.
	
	account makeReportFor: self.
	
	^transferNet .! !

!methodRemoval: Report #compute stamp: 'hh 10/26/2023 01:58:35'!
compute

	self subclassResponsibility!

!methodRemoval: AccountSummary #compute stamp: 'hh 10/26/2023 01:58:35'!
compute

	summary := OrderedCollection new.
	
	account makeReportFor: self.
	
	summary add: 'Balance = ',account balance asString.
	
	^summary!

!methodRemoval: TransferNet #compute stamp: 'hh 10/26/2023 01:58:35'!
compute
	
	transferNet := 0.
	
	account makeReportFor: self.
	
	^transferNet .!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:08' prior: 50655463!
test08CorrectTransferNetForPortfolioWithMultipleAccount

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount transferNet|
	
	composedPortfolio := Portfolio new.
	includedPortfolio := Portfolio new.
	includedAccount := ReceptiveAccount new.
	secondIncludedAccount := ReceptiveAccount new.
	
	composedPortfolio add: includedAccount .
	composedPortfolio add: includedPortfolio .
	includedPortfolio add: secondIncludedAccount .
	
	transferNet := TransferNet for: composedPortfolio.
	Transference  from: ReceptiveAccount new to: secondIncludedAccount withValue: 30.
	Transference  from: includedAccount to: ReceptiveAccount new withValue: 10.
	
	self assert: transferNet makeReport equals: 20.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654288!
test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 50 on: anAccount .
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary makeReport first equals: 'Withdraw for 50'.
	self assert: accountSummary makeReport second equals: 'Balance = -50'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50655185!
test04TransferNetGivesCorrectTransferNetForMultipleTransferences

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	Transference from: anAccount to: ReceptiveAccount new withValue: 20.
	Transference from: ReceptiveAccount new to: anAccount withValue: 10.
	
	self assert: transferNet makeReport equals: 40.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654866!
test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance

	|portfolio accountSummary|
	
	portfolio := Portfolio new.
	accountSummary := AccountSummary for: portfolio .
	
	self assert: accountSummary makeReport first equals: 'Balance = 0'.
	self assert: accountSummary makeReport size equals: 1.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654515!
test01TransferNetWithNoTransactionsEqualsCero

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	self assert: transferNet makeReport equals: 0.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654958!
test09AccountSummaryProcessCorrectlyPortfolioWithMultipleAccounts

	|composedPortfolio includedPortfolio includedAccount secondIncludedAccount accountSummary|
	
	composedPortfolio := Portfolio new.
	includedPortfolio := Portfolio new.
	includedAccount := ReceptiveAccount new.
	secondIncludedAccount := ReceptiveAccount new.
	accountSummary := AccountSummary for: composedPortfolio .
	Deposit register: 50 on: includedAccount.
	Withdraw register: 50 on: secondIncludedAccount.
	composedPortfolio add: includedPortfolio .
	includedPortfolio add: includedAccount .
	composedPortfolio add: secondIncludedAccount .
	
	self assert: accountSummary makeReport first equals: 'Deposit for 50'.
	self assert: accountSummary makeReport second equals: 'Withdraw for 50'.
	self assert: accountSummary makeReport third equals: 'Balance = 0'.
	self assert: accountSummary makeReport size equals: 3! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654936!
test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount

	|portfolio anAccount accountSummary|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	accountSummary := AccountSummary for: portfolio .
	Deposit register: 50 on: anAccount.
	portfolio add: anAccount .
	
	
	self assert: accountSummary makeReport first equals: 'Deposit for 50'.
	self assert: accountSummary makeReport second equals: 'Balance = 50'.
	self assert: accountSummary makeReport size equals: 2! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654319!
test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary makeReport first equals: 'Entrance by transference of 50'.
	self assert: accountSummary makeReport second equals: 'Balance = 50'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50655223!
test05TransactionsOtherThanTransferencesDoNotAffectTransferNet

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount.
	Deposit register: 50 on: anAccount .
	Withdraw register: 20 on: anAccount.
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet makeReport equals: 50.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50655317!
test07CorrectTransferNetForPortfolioWithOneAccount

	|portfolio anAccount transferNet|
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio add: anAccount .
	transferNet := TransferNet for: portfolio.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet makeReport equals: 50.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654303!
test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary makeReport first equals: 'Exit by transference of 50'.
	self assert: accountSummary makeReport second equals: 'Balance = -50'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654537!
test03TransferNetProcessWithdrawLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	
	self assert: transferNet makeReport equals: 50.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654335!
test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
	Withdraw register: 50 on: anAccount .
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	Transference from: ReceptiveAccount new to: anAccount withValue: 50.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary makeReport first equals: 'Deposit for 100'.
	self assert: accountSummary makeReport second equals: 'Withdraw for 50'.
	self assert: accountSummary makeReport third equals: 'Exit by transference of 50'.
	self assert: accountSummary makeReport fourth equals: 'Entrance by transference of 50'.
	self assert: accountSummary makeReport fifth equals: 'Balance = 50'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50655265!
test06TransferNetOfEmptyPortfoloEqualsCero

	|portfolio transferNet|
	
	portfolio := ReceptiveAccount new.
	transferNet := TransferNet for: portfolio.
	
	self assert: transferNet makeReport equals: 0.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654273!
test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary makeReport first equals: 'Deposit for 100'.
	self assert: accountSummary makeReport second equals: 'Balance = 100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654525!
test02TransferNetProcessDepositLegCorrectly

	|anAccount transferNet|
	
	anAccount := ReceptiveAccount new.
	transferNet := TransferNet for: anAccount .
	
	Transference from: anAccount to: ReceptiveAccount new withValue: 50.
	
	self assert: transferNet makeReport equals: -50.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 01:59:09' prior: 50654261!
test01AccountSummaryWithNoTransactionsHasCeroAsBalance

	|anAccount accountSummary|
	
	anAccount := ReceptiveAccount new.
	accountSummary := AccountSummary for: anAccount.
	
	self assert: accountSummary makeReport equals: (OrderedCollection new add: 'Balance = 0';yourself).! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/26/2023 01:59:32'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:59:32'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:59:32'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:59:32'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 01:59:32'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/26/2023 01:59:32'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/26/2023 01:59:32'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:59:32'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryProcessCorrectlyPortfolioWithMultipleAccounts stamp: 'hh 10/26/2023 01:59:32'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/26/2023 01:59:35'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetProcessDepositLegCorrectly stamp: 'hh 10/26/2023 01:59:35'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/26/2023 01:59:35'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetGivesCorrectTransferNetForMultipleTransferences stamp: 'hh 10/26/2023 01:59:35'!
PASSED!

!testRun: #TransferNetTest #test05TransactionsOtherThanTransferencesDoNotAffectTransferNet stamp: 'hh 10/26/2023 01:59:35'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfEmptyPortfoloEqualsCero stamp: 'hh 10/26/2023 01:59:35'!
PASSED!

!testRun: #TransferNetTest #test07CorrectTransferNetForPortfolioWithOneAccount stamp: 'hh 10/26/2023 01:59:35'!
PASSED!

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'hh 10/26/2023 01:59:35'!
PASSED!

TestCase subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureTest category: 'Portfolio-Solucion' stamp: 'hh 10/26/2023 02:18:56'!
TestCase subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructureTest methodsFor: 'no messages' stamp: 'hh 10/26/2023 02:20:45'!
test01

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: portfolio treeStructureReport equals: OrderedCollection new.! !

!testRun: #TreeStructureTest #test01 stamp: 'hh 10/26/2023 02:20:47'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'hh 10/26/2023 02:20:47'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 02:20:53'!
treeStructureReport
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 02:21:02' prior: 50655913!
treeStructureReport
	
	^OrderedCollection new.! !

!testRun: #TreeStructureTest #test01 stamp: 'hh 10/26/2023 02:21:04'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:24:56'!
test01EmptyPortfolioReturnsOnlyItsName

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: portfolio treeStructureReport equals: OrderedCollection new.! !

!methodRemoval: TreeStructureTest #test01 stamp: 'hh 10/26/2023 02:24:56'!
test01

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: portfolio treeStructureReport equals: OrderedCollection new.!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:25:43' prior: 50655925!
test01EmptyPortfolioReturnsOnlyItsName

	|portfolio|
	
	portfolio := Portfolio named: 'mio'.
	
	self assert: portfolio treeStructureReport first equals: 'mio'.
	self assert: portfolio treeStructureReport size equals: 1.! !

!testRun: #TreeStructureTest #test01EmptyPortfolioReturnsOnlyItsName stamp: 'hh 10/26/2023 02:25:44'!
ERROR!

!testRun: #TreeStructureTest #test01EmptyPortfolioReturnsOnlyItsName stamp: 'hh 10/26/2023 02:25:44'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'hh 10/26/2023 02:25:53'!
named: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aRenameMe1 ! !

!methodRemoval: Portfolio class #named: stamp: 'hh 10/26/2023 02:27:02'!
named: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aRenameMe1 !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:27:26'!
named: accountName
	
	^self new initializeNamed: accountName! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'hh 10/26/2023 02:27:53'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'hh 10/26/2023 02:27:51'!
initializeNamed: portfolioName

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := portfolioName .! !

!testRun: #TreeStructureTest #test01EmptyPortfolioReturnsOnlyItsName stamp: 'hh 10/26/2023 02:28:21'!
ERROR!

!testRun: #TreeStructureTest #test01EmptyPortfolioReturnsOnlyItsName stamp: 'hh 10/26/2023 02:28:21'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 02:28:47' prior: 50655918!
treeStructureReport
	
	^OrderedCollection new add: name;yourself.! !

!testRun: #TreeStructureTest #test01EmptyPortfolioReturnsOnlyItsName stamp: 'hh 10/26/2023 02:28:48'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:36:24'!
test01TreeStructureOfEmptyPortfolioOnlyHasItsName

	|portfolio|
	
	portfolio := Portfolio named: 'mio'.
	
	self assert: portfolio treeStructureReport first equals: 'mio'.
	self assert: portfolio treeStructureReport size equals: 1.! !

!methodRemoval: TreeStructureTest #test01EmptyPortfolioReturnsOnlyItsName stamp: 'hh 10/26/2023 02:36:24'!
test01EmptyPortfolioReturnsOnlyItsName

	|portfolio|
	
	portfolio := Portfolio named: 'mio'.
	
	self assert: portfolio treeStructureReport first equals: 'mio'.
	self assert: portfolio treeStructureReport size equals: 1.!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:39:48'!
test02TreeStructureOfPortfolioWithOneAccountIsCorrect

	|composedPortfolio1 composedPortfolio2 includedAccount includedPortfolio |
	
	composedPortfolio1 := Portfolio named: 'cp1'.
	composedPortfolio2 := Portfolio named: 'cp2'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio1 add: includedAccount .
	composedPortfolio2 add: includedPortfolio .
	
	self assert: composedPortfolio1 treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio1 treeStructureReport first equals: '    a1'.
	self assert: composedPortfolio1 treeStructureReport size equals: 2.
	
	self assert: composedPortfolio2 treeStructureReport first equals: 'cp2'.
	self assert: composedPortfolio2 treeStructureReport first equals: '    p1'.
	self assert: composedPortfolio2 treeStructureReport size equals: 2.! !
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'hh 10/26/2023 02:40:04'!
named: accountName
	
	^self new initializeNamed: accountName! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'hh 10/26/2023 02:40:35'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'hh 10/26/2023 02:40:34'!
initializeNamed: accountName

	transactions := OrderedCollection new.
	name := accountName .! !
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 02:44:12' prior: 50655999!
treeStructureReport

	|treeStructure|
	treeStructure := OrderedCollection new add: name;yourself.
	
	accounts ifEmpty: [^treeStructure].
	
	treeStructure add: '    ',accounts first name.
	
	^treeStructure .! !

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 02:44:13'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:44:13'!
FAILURE!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:44:14'!
FAILURE!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:44:30'!
FAILURE!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:44:30'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:44:42' prior: 50656029!
test02TreeStructureOfPortfolioWithOneAccountIsCorrect

	|composedPortfolio1 composedPortfolio2 includedAccount includedPortfolio |
	
	composedPortfolio1 := Portfolio named: 'cp1'.
	composedPortfolio2 := Portfolio named: 'cp2'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio1 add: includedAccount .
	composedPortfolio2 add: includedPortfolio .
	
	self assert: composedPortfolio1 treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio1 treeStructureReport second equals: '    a1'.
	self assert: composedPortfolio1 treeStructureReport size equals: 2.
	
	self assert: composedPortfolio2 treeStructureReport first equals: 'cp2'.
	self assert: composedPortfolio2 treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio2 treeStructureReport size equals: 2.! !

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:44:43'!
FAILURE!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:44:43'!
FAILURE!
!ReceptiveAccount methodsFor: 'name' stamp: 'hh 10/26/2023 02:45:44' overrides: 16903442!
name

	^name.! !

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 02:45:47'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:45:47'!
FAILURE!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:45:47'!
FAILURE!
!Portfolio methodsFor: 'name' stamp: 'hh 10/26/2023 02:46:17' overrides: 16903442!
name

	^name! !

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 02:46:19'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:46:19'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:46:56'!
test03TreeStructureOfPortfolioWithOneAccountIsCorrect

	|composedPortfolio1 composedPortfolio2 includedAccount includedPortfolio |
	
	composedPortfolio1 := Portfolio named: 'cp1'.
	composedPortfolio2 := Portfolio named: 'cp2'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio1 add: includedAccount .
	composedPortfolio2 add: includedPortfolio .
	
	self assert: composedPortfolio1 treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio1 treeStructureReport second equals: '    a1'.
	self assert: composedPortfolio1 treeStructureReport size equals: 2.
	
	self assert: composedPortfolio2 treeStructureReport first equals: 'cp2'.
	self assert: composedPortfolio2 treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio2 treeStructureReport size equals: 2.! !

!methodRemoval: TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:46:56'!
test02TreeStructureOfPortfolioWithOneAccountIsCorrect

	|composedPortfolio1 composedPortfolio2 includedAccount includedPortfolio |
	
	composedPortfolio1 := Portfolio named: 'cp1'.
	composedPortfolio2 := Portfolio named: 'cp2'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio1 add: includedAccount .
	composedPortfolio2 add: includedPortfolio .
	
	self assert: composedPortfolio1 treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio1 treeStructureReport second equals: '    a1'.
	self assert: composedPortfolio1 treeStructureReport size equals: 2.
	
	self assert: composedPortfolio2 treeStructureReport first equals: 'cp2'.
	self assert: composedPortfolio2 treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio2 treeStructureReport size equals: 2.!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:47:49'!
test02TreeStructurePortfolioWithNoNameHasEmptyStringAsName

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: portfolio treeStructureReport first equals: ''.
	self assert: portfolio treeStructureReport size equals: 1.! !

!testRun: #TreeStructureTest #test02TreeStructurePortfolioWithNoNameHasEmptyStringAsName stamp: 'hh 10/26/2023 02:47:50'!
FAILURE!

!testRun: #TreeStructureTest #test02TreeStructurePortfolioWithNoNameHasEmptyStringAsName stamp: 'hh 10/26/2023 02:47:50'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'hh 10/26/2023 02:48:01' prior: 50650765 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := ''.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'hh 10/26/2023 02:48:14' prior: 50650880 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.
	name := ''.! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:49:29'!
test02AccountsWithNoNameHaveEmptyStringAsName

	|portfolio|
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self assert: portfolio treeStructureReport first equals: ''.
	self assert: portfolio treeStructureReport second equals: ''.
	self assert: portfolio treeStructureReport size equals: 2.! !

!methodRemoval: TreeStructureTest #test02TreeStructurePortfolioWithNoNameHasEmptyStringAsName stamp: 'hh 10/26/2023 02:49:31'!
test02TreeStructurePortfolioWithNoNameHasEmptyStringAsName

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: portfolio treeStructureReport first equals: ''.
	self assert: portfolio treeStructureReport size equals: 1.!

!testRun: #TreeStructureTest #test02AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 02:49:32'!
FAILURE!

!testRun: #TreeStructureTest #test02AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 02:49:32'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:49:41' prior: 50656265!
test02AccountsWithNoNameHaveEmptyStringAsName

	|portfolio|
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self assert: portfolio treeStructureReport first equals: ''.
	self assert: portfolio treeStructureReport second equals: '    '.
	self assert: portfolio treeStructureReport size equals: 2.! !

!testRun: #TreeStructureTest #test02AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 02:49:42'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:50:43'!
test02TreeStructureOfPortfolioWithOneAccountIsCorrect

	|composedPortfolio1 composedPortfolio2 includedAccount includedPortfolio |
	
	composedPortfolio1 := Portfolio named: 'cp1'.
	composedPortfolio2 := Portfolio named: 'cp2'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio1 add: includedAccount .
	composedPortfolio2 add: includedPortfolio .
	
	self assert: composedPortfolio1 treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio1 treeStructureReport second equals: '    a1'.
	self assert: composedPortfolio1 treeStructureReport size equals: 2.
	
	self assert: composedPortfolio2 treeStructureReport first equals: 'cp2'.
	self assert: composedPortfolio2 treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio2 treeStructureReport size equals: 2.! !

!methodRemoval: TreeStructureTest #test03TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:50:43'!
test03TreeStructureOfPortfolioWithOneAccountIsCorrect

	|composedPortfolio1 composedPortfolio2 includedAccount includedPortfolio |
	
	composedPortfolio1 := Portfolio named: 'cp1'.
	composedPortfolio2 := Portfolio named: 'cp2'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio1 add: includedAccount .
	composedPortfolio2 add: includedPortfolio .
	
	self assert: composedPortfolio1 treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio1 treeStructureReport second equals: '    a1'.
	self assert: composedPortfolio1 treeStructureReport size equals: 2.
	
	self assert: composedPortfolio2 treeStructureReport first equals: 'cp2'.
	self assert: composedPortfolio2 treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio2 treeStructureReport size equals: 2.!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:50:48'!
test03AccountsWithNoNameHaveEmptyStringAsName

	|portfolio|
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self assert: portfolio treeStructureReport first equals: ''.
	self assert: portfolio treeStructureReport second equals: '    '.
	self assert: portfolio treeStructureReport size equals: 2.! !

!methodRemoval: TreeStructureTest #test02AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 02:50:48'!
test02AccountsWithNoNameHaveEmptyStringAsName

	|portfolio|
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self assert: portfolio treeStructureReport first equals: ''.
	self assert: portfolio treeStructureReport second equals: '    '.
	self assert: portfolio treeStructureReport size equals: 2.!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:54:19'!
test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect

	|composedPortfolio includedAccount includedPortfolio |
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio add: includedAccount .
	composedPortfolio add: includedPortfolio .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    a1'.
	self assert: composedPortfolio treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio treeStructureReport size equals: 3.! !

!testRun: #TreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 02:54:21'!
FAILURE!

!testRun: #TreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 02:54:21'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 02:55:30' prior: 50656078!
treeStructureReport

	|treeStructure|
	treeStructure := OrderedCollection new add: name;yourself.
	
	accounts do: [:anAccount |
		treeStructure add: '    ',anAccount name.
		].
	
	^treeStructure .! !

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 02:55:32'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 02:55:32'!
PASSED!

!testRun: #TreeStructureTest #test03AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 02:55:33'!
PASSED!

!testRun: #TreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 02:55:33'!
FAILURE!

!testRun: #TreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 02:55:33'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:55:43' prior: 50656402!
test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect

	|composedPortfolio includedAccount includedPortfolio |
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio add: includedAccount .
	composedPortfolio add: includedPortfolio .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    a1'.
	self assert: composedPortfolio treeStructureReport third equals: '    p1'.
	self assert: composedPortfolio treeStructureReport size equals: 3.! !

!testRun: #TreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 02:55:44'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 02:57:13'!
test05TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly

	|composedPortfolio includedAccount includedPortfolio |
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio add: includedPortfolio .
	includedPortfolio add: includedAccount .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio treeStructureReport third equals: '        a1'.
	self assert: composedPortfolio treeStructureReport size equals: 3.! !

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 02:57:14'!
ERROR!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 02:57:14'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 03:06:06' prior: 50656434!
treeStructureReport

	|treeStructure|
	treeStructure := OrderedCollection new add: name;yourself.
	
	accounts do: [:anAccount |
		treeStructure addAll: (anAccount treeStructureReport collect: [:accountName| '    ',accountName]).
		].
	
	^treeStructure .! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'hh 10/26/2023 03:06:22'!
treeStructureReport
	
	^name! !

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:06:25'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 03:06:25'!
ERROR!

!testRun: #TreeStructureTest #test03AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 03:06:25'!
ERROR!

!testRun: #TreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 03:06:25'!
ERROR!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:06:25'!
ERROR!

name!

anAccount!

anAccount treeStructureReport!

'    ',accountName!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 03:08:10' prior: 50656525!
treeStructureReport

	|treeStructure|
	treeStructure := OrderedCollection new add: name;yourself.
	
	accounts do: [:anAccount |
		treeStructure addAll: (anAccount treeStructureReport collect: [:account| '    ',account name]).
		].
	
	^treeStructure .! !

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:08:11'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 03:08:11'!
FAILURE!

!testRun: #TreeStructureTest #test03AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 03:08:12'!
ERROR!

!testRun: #TreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 03:08:12'!
FAILURE!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:08:12'!
FAILURE!

anAccount treeStructureReport!

account name!
!ReceptiveAccount methodsFor: 'reports' stamp: 'hh 10/26/2023 03:09:14' prior: 50656536!
treeStructureReport
	
	^OrderedCollection new add:name;yourself! !

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:09:16'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 03:09:16'!
FAILURE!

!testRun: #TreeStructureTest #test03AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 03:09:16'!
FAILURE!

!testRun: #TreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 03:09:16'!
FAILURE!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:09:16'!
FAILURE!

anAccount treeStructureReport!

account name!

name!

'    ',account name!

name!

OrderedCollection new add:name;yourself!

anAccount treeStructureReport!

account name!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 03:12:30' prior: 50656562!
treeStructureReport

	|treeStructure|
	treeStructure := OrderedCollection new add: name;yourself.
	
	accounts do: [:anAccount |
		treeStructure addAll: (anAccount treeStructureReport collect: [:accountName| '    ',accountName]).
		].
	
	^treeStructure .! !

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:12:32'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 03:12:32'!
PASSED!

!testRun: #TreeStructureTest #test03AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 03:12:32'!
PASSED!

!testRun: #TreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 03:12:33'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:12:33'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:14:14'!
test06TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount|
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	secondIncludedAccount := ReceptiveAccount named: 'a2'.
	
	composedPortfolio add: includedPortfolio .
	composedPortfolio add: secondIncludedAccount .
	includedPortfolio add: includedAccount .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio treeStructureReport third equals: '        a1'.
	self assert: composedPortfolio treeStructureReport fourth equals: '        a2'.
	self assert: composedPortfolio treeStructureReport size equals: 4.! !

!testRun: #TreeStructureTest #test06TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:14:15'!
FAILURE!

!testRun: #TreeStructureTest #test06TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:14:15'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:14:22' prior: 50656657!
test06TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount|
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	secondIncludedAccount := ReceptiveAccount named: 'a2'.
	
	composedPortfolio add: includedPortfolio .
	composedPortfolio add: secondIncludedAccount .
	includedPortfolio add: includedAccount .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio treeStructureReport third equals: '        a1'.
	self assert: composedPortfolio treeStructureReport fourth equals: '    a2'.
	self assert: composedPortfolio treeStructureReport size equals: 4.! !

!testRun: #TreeStructureTest #test06TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:14:23'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:15:25'!
test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly

	|composedPortfolio includedAccount includedPortfolio |
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio add: includedPortfolio .
	includedPortfolio add: includedAccount .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio treeStructureReport third equals: '        a1'.
	self assert: composedPortfolio treeStructureReport size equals: 3.! !

!methodRemoval: TreeStructureTest #test05TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:15:25'!
test05TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly

	|composedPortfolio includedAccount includedPortfolio |
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio add: includedPortfolio .
	includedPortfolio add: includedAccount .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio treeStructureReport third equals: '        a1'.
	self assert: composedPortfolio treeStructureReport size equals: 3.!

!methodRemoval: TreeStructureTest #test06TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:15:29'!
test06TreeStructureOfPortfolioWithPortfolioWithAccountsIsIndentedCorrectly

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount|
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	secondIncludedAccount := ReceptiveAccount named: 'a2'.
	
	composedPortfolio add: includedPortfolio .
	composedPortfolio add: secondIncludedAccount .
	includedPortfolio add: includedAccount .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio treeStructureReport third equals: '        a1'.
	self assert: composedPortfolio treeStructureReport fourth equals: '    a2'.
	self assert: composedPortfolio treeStructureReport size equals: 4.!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:15:30'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:16:27' prior: 50656732!
test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount|
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	secondIncludedAccount := ReceptiveAccount named: 'a2'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio add: includedPortfolio .
	composedPortfolio add: secondIncludedAccount .
	includedPortfolio add: includedAccount .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio treeStructureReport third equals: '        a1'.
	self assert: composedPortfolio treeStructureReport fourth equals: '        a2'.
	self assert: composedPortfolio treeStructureReport size equals: 3.! !

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:16:28'!
FAILURE!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:16:28'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:16:33' prior: 50656819!
test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount|
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	secondIncludedAccount := ReceptiveAccount named: 'a2'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio add: includedPortfolio .
	composedPortfolio add: secondIncludedAccount .
	includedPortfolio add: includedAccount .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio treeStructureReport third equals: '        a1'.
	self assert: composedPortfolio treeStructureReport fourth equals: '    a2'.
	self assert: composedPortfolio treeStructureReport size equals: 3.! !

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:16:34'!
FAILURE!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:16:34'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:16:38' prior: 50656860!
test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount|
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	secondIncludedAccount := ReceptiveAccount named: 'a2'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio add: includedPortfolio .
	composedPortfolio add: secondIncludedAccount .
	includedPortfolio add: includedAccount .
	
	self assert: composedPortfolio treeStructureReport first equals: 'cp1'.
	self assert: composedPortfolio treeStructureReport second equals: '    p1'.
	self assert: composedPortfolio treeStructureReport third equals: '        a1'.
	self assert: composedPortfolio treeStructureReport fourth equals: '    a2'.
	self assert: composedPortfolio treeStructureReport size equals: 4.! !

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:16:39'!
PASSED!

----QUIT----(26 October 2023 03:17:12) CuisUniversity-5981.image priorSource: 10363012!

----STARTUP---- (26 October 2023 03:17:34) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


Object subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'hh 10/26/2023 03:18:26'!
Object subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructure class methodsFor: 'no messages' stamp: 'hh 10/26/2023 03:21:16'!
for: aPortfolio

	^self new initializeWith: aPortfolio .! !

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'hh 10/26/2023 03:21:37'!
Object subclass: #TreeStructure
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructure methodsFor: 'initialize' stamp: 'hh 10/26/2023 03:21:35'!
initializeWith: aPortfolio 

	portfolio := aPortfolio .! !

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'hh 10/26/2023 03:22:26'!
Object subclass: #TreeStructure
	instanceVariableNames: 'portfolio treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructure methodsFor: 'makeReport' stamp: 'hh 10/26/2023 03:22:25'!
makeReport

	portfolio makeReportFor: self
	
	^treeStructure! !
!TreeStructure methodsFor: 'initialize' stamp: 'hh 10/26/2023 03:22:39' prior: 50656966!
initializeWith: aPortfolio 

	portfolio := aPortfolio .
	treeStructure := OrderedCollection new.! !
!TreeStructure methodsFor: 'makeReport' stamp: 'hh 10/26/2023 03:23:09' prior: 50656979!
makeReport

	treeStructure := OrderedCollection new.

	portfolio makeReportFor: self
	
	^treeStructure! !

!classRenamed: #TreeStructure as: #PortfolioTreeStructure stamp: 'hh 10/26/2023 03:28:04'!
Smalltalk renameClassNamed: #TreeStructure as: #PortfolioTreeStructure!
!PortfolioTreeStructure methodsFor: 'makeReport' stamp: 'hh 10/26/2023 03:29:09' prior: 50656990!
makeReport

	treeStructure := OrderedCollection new.

	portfolio makePortfolioReportFor: self
	
	^treeStructure! !
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 03:31:38'!
makePortfolioReportFor: aPortfolioOnlyReport
	
	accounts do: [:anAccount |
		anAccount makePortfolioReportFor: aPortfolioOnlyReport .
		].! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'hh 10/26/2023 03:33:41'!
handleReportFor: aPortfolioOnlyReport
	
	
	aPortfolioOnlyReport receptiveAccountOperation: self.
		! !
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 03:34:47' prior: 50657008!
makePortfolioReportFor: aPortfolioOnlyReport
	
	accounts do: [:anAccount |
		anAccount handleReportFor: aPortfolioOnlyReport .
		].! !
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 03:35:04' prior: 50657021!
makePortfolioReportFor: aPortfolioOnlyReport
	
	accounts do: [:anAccount |
		anAccount makePortfolioReportFor: aPortfolioOnlyReport .
		].! !

!methodRemoval: ReceptiveAccount #handleReportFor: stamp: 'hh 10/26/2023 03:35:28'!
handleReportFor: aPortfolioOnlyReport
	
	
	aPortfolioOnlyReport receptiveAccountOperation: self.
		!
!ReceptiveAccount methodsFor: 'reports' stamp: 'hh 10/26/2023 03:36:12'!
makePortfolioReportFor: aPortfolioOnlyReport
	
	aPortfolioOnlyReport receptiveAccountOperation: self.! !
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 03:38:33' prior: 50657028!
makePortfolioReportFor: aPortfolioOnlyReport
	
	aPortfolioOnlyReport portfolioReportOperation: self.
	
	accounts do: [:anAccount |
		anAccount makePortfolioReportFor: aPortfolioOnlyReport .
		].! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'hh 10/26/2023 03:38:55' prior: 50657041!
makePortfolioReportFor: aPortfolioOnlyReport
	
	aPortfolioOnlyReport receptiveAccountReportOperation: self.! !
!PortfolioTreeStructure methodsFor: 'reportOperations' stamp: 'hh 10/26/2023 03:39:51'!
receptiveAccountOperation: aReceptiveAccount! !
!PortfolioTreeStructure methodsFor: 'reportOperations' stamp: 'hh 10/26/2023 03:40:04'!
portfolioReportOperation: aPortfolio
! !
!PortfolioTreeStructure methodsFor: 'reportOperations' stamp: 'hh 10/26/2023 03:40:09'!
receptiveAccountReportOperation: aReceptiveAccount! !

!methodRemoval: PortfolioTreeStructure #receptiveAccountOperation: stamp: 'hh 10/26/2023 03:40:09'!
receptiveAccountOperation: aReceptiveAccount!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 03:41:24' prior: 50657047!
makePortfolioReportFor: aPortfolioOnlyReport
	
	accounts do: [:anAccount |
		anAccount handleReportFor: aPortfolioOnlyReport .
		].! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'hh 10/26/2023 03:41:46'!
handleReportFor: aPortfolioOnlyReport
	
	aPortfolioOnlyReport receptiveAccountReportOperation: self.! !

!methodRemoval: ReceptiveAccount #makePortfolioReportFor: stamp: 'hh 10/26/2023 03:41:48'!
makePortfolioReportFor: aPortfolioOnlyReport
	
	aPortfolioOnlyReport receptiveAccountReportOperation: self.!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 03:42:13'!
handleReportFor: aPortfolioOnlyReport
	
	aPortfolioOnlyReport portfolioReportOperation: self! !
!PortfolioTreeStructure methodsFor: 'reportOperations' stamp: 'hh 10/26/2023 03:43:19' prior: 50657073!
receptiveAccountReportOperation: aReceptiveAccount

	treeStructure add: '    ',aReceptiveAccount name! !
!PortfolioTreeStructure methodsFor: 'reportOperations' stamp: 'hh 10/26/2023 03:46:00' prior: 50657068!
portfolioReportOperation: aPortfolio
	
	|portfolioTree|
	
	portfolioTree := PortfolioTreeStructure for: aPortfolio.
	
	treeStructure addAll: (portfolioTree makeReport collect: [:accountName | '    ',accountName])! !

!classRenamed: #TreeStructureTest as: #PortfolioTreeStructureTest stamp: 'hh 10/26/2023 03:46:59'!
Smalltalk renameClassNamed: #TreeStructureTest as: #PortfolioTreeStructureTest!
!PortfolioTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:48:43' prior: 50656008!
test01TreeStructureOfEmptyPortfolioOnlyHasItsName

	|portfolio treeStructure|
	
	portfolio := Portfolio named: 'mio'.
	treeStructure := PortfolioTreeStructure for: portfolio .
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport size equals: 1.! !

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:48:44'!
ERROR!

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:48:44'!
ERROR!
!PortfolioTreeStructure methodsFor: 'makeReport' stamp: 'hh 10/26/2023 03:49:00' prior: 50657002!
makeReport

	treeStructure := OrderedCollection new.

	portfolio makePortfolioReportFor: self.
	
	^treeStructure! !

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:49:03'!
ERROR!

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:49:03'!
ERROR!
!PortfolioTreeStructure methodsFor: 'makeReport' stamp: 'hh 10/26/2023 03:49:38' prior: 50657152!
makeReport

	treeStructure := OrderedCollection new.

	treeStructure add: portfolio name.
	portfolio makePortfolioReportFor: self.
	
	^treeStructure! !

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:49:41'!
PASSED!
!PortfolioTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:51:08' prior: 50656314!
test02TreeStructureOfPortfolioWithOneAccountIsCorrect

	|composedPortfolio1 composedPortfolio2 includedAccount includedPortfolio treeStructure|
	
	composedPortfolio1 := Portfolio named: 'cp1'.
	composedPortfolio2 := Portfolio named: 'cp2'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	
	composedPortfolio1 add: includedAccount .
	composedPortfolio2 add: includedPortfolio .
	
	treeStructure := PortfolioTreeStructure for: composedPortfolio1 .
	self assert: treeStructure makeReport  first equals: 'cp1'.
	self assert: treeStructure makeReport second equals: '    a1'.
	self assert: treeStructure makeReport size equals: 2.
	
	treeStructure := PortfolioTreeStructure for: composedPortfolio2 .
	
	self assert: treeStructure makeReport first equals: 'cp2'.
	self assert: treeStructure makeReport second equals: '    p1'.
	self assert: treeStructure makeReport size equals: 2.! !

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 03:51:10'!
PASSED!
!PortfolioTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:51:38' prior: 50656375!
test03AccountsWithNoNameHaveEmptyStringAsName

	|portfolio treeStructure|
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	treeStructure := PortfolioTreeStructure for: portfolio .
	
	self assert: treeStructure makeReport first equals: ''.
	self assert: treeStructure makeReport second equals: '    '.
	self assert: treeStructure makeReport size equals: 2.! !

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 03:51:39'!
PASSED!

----SNAPSHOT----(26 October 2023 03:51:51) CuisUniversity-5981.image priorSource: 10409138!
!PortfolioTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:52:23' prior: 50656464!
test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect

	|composedPortfolio includedAccount includedPortfolio treeStructure|
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	includedAccount := ReceptiveAccount named: 'a1'.
	treeStructure := PortfolioTreeStructure for: composedPortfolio .
	
	composedPortfolio add: includedAccount .
	composedPortfolio add: includedPortfolio .
	
	self assert: treeStructure makeReport first equals: 'cp1'.
	self assert: treeStructure makeReport second equals: '    a1'.
	self assert: treeStructure makeReport third equals: '    p1'.
	self assert: treeStructure makeReport size equals: 3.! !

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 03:52:24'!
PASSED!
!PortfolioTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:52:51' prior: 50656901!
test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly

	|composedPortfolio includedAccount includedPortfolio secondIncludedAccount treeStructure|
	
	composedPortfolio := Portfolio named: 'cp1'.
	includedPortfolio := Portfolio named: 'p1'.
	secondIncludedAccount := ReceptiveAccount named: 'a2'.
	includedAccount := ReceptiveAccount named: 'a1'.
	treeStructure := PortfolioTreeStructure for: composedPortfolio .
	
	composedPortfolio add: includedPortfolio .
	composedPortfolio add: secondIncludedAccount .
	includedPortfolio add: includedAccount .
	
	self assert: treeStructure makeReport first equals: 'cp1'.
	self assert: treeStructure makeReport second equals: '    p1'.
	self assert: treeStructure makeReport third equals: '        a1'.
	self assert: treeStructure makeReport fourth equals: '    a2'.
	self assert: treeStructure makeReport size equals: 4.! !

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:52:52'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:52:53'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 03:52:53'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 03:52:53'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 03:52:53'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:52:53'!
PASSED!

!methodRemoval: Portfolio #treeStructureReport stamp: 'hh 10/26/2023 03:53:09'!
treeStructureReport

	|treeStructure|
	treeStructure := OrderedCollection new add: name;yourself.
	
	accounts do: [:anAccount |
		treeStructure addAll: (anAccount treeStructureReport collect: [:accountName| '    ',accountName]).
		].
	
	^treeStructure .!

!methodRemoval: ReceptiveAccount #treeStructureReport stamp: 'hh 10/26/2023 03:53:20'!
treeStructureReport
	
	^OrderedCollection new add:name;yourself!

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:53:24'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 03:53:25'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 03:53:25'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 03:53:25'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:53:25'!
PASSED!
!PortfolioTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:55:15'!
test03AccountsWithNoNameHaveUnnamedAsName

	|portfolio treeStructure|
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	treeStructure := PortfolioTreeStructure for: portfolio .
	
	self assert: treeStructure makeReport first equals: ''.
	self assert: treeStructure makeReport second equals: '    '.
	self assert: treeStructure makeReport size equals: 2.! !
!Portfolio methodsFor: 'initialization' stamp: 'hh 10/26/2023 03:55:23' prior: 50656252 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := 'Unnamed'.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'hh 10/26/2023 03:55:30' prior: 50656259 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.
	name := 'Unnamed'.! !

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:55:34'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 03:55:34'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 03:55:34'!
FAILURE!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'hh 10/26/2023 03:55:34'!
FAILURE!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 03:55:34'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:55:34'!
PASSED!

!methodRemoval: PortfolioTreeStructureTest #test03AccountsWithNoNameHaveEmptyStringAsName stamp: 'hh 10/26/2023 03:55:48'!
test03AccountsWithNoNameHaveEmptyStringAsName

	|portfolio treeStructure|
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	treeStructure := PortfolioTreeStructure for: portfolio .
	
	self assert: treeStructure makeReport first equals: ''.
	self assert: treeStructure makeReport second equals: '    '.
	self assert: treeStructure makeReport size equals: 2.!
!PortfolioTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'hh 10/26/2023 03:55:57' prior: 50657365!
test03AccountsWithNoNameHaveUnnamedAsName

	|portfolio treeStructure|
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	treeStructure := PortfolioTreeStructure for: portfolio .
	
	self assert: treeStructure makeReport first equals: 'Unnamed'.
	self assert: treeStructure makeReport second equals: '    Unnamed'.
	self assert: treeStructure makeReport size equals: 2.! !

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'hh 10/26/2023 03:55:58'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 03:56:00'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 03:56:00'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'hh 10/26/2023 03:56:00'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 03:56:00'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 03:56:00'!
PASSED!

----QUIT----(26 October 2023 04:04:47) CuisUniversity-5981.image priorSource: 10418714!

----STARTUP---- (26 October 2023 04:09:56) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 04:10:01'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 04:10:01'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'hh 10/26/2023 04:10:01'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 04:10:01'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 04:10:01'!
PASSED!

----STARTUP---- (26 October 2023 14:16:40) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 14:16:53'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 14:16:54'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'hh 10/26/2023 14:16:54'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 14:16:54'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 14:16:54'!
PASSED!
!Portfolio methodsFor: 'report' stamp: 'hh 10/26/2023 14:18:24' prior: 50654988!
makeReportFor: aReport

	self handleReportFor: aReport .
	
	accounts do: [:anAccount |
		anAccount makeReportFor: aReport
		].! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'hh 10/26/2023 14:19:33' prior: 50654815!
makeReportFor: aReport

	self handleReportFor: aReport .
	
	transactions do: [:aTransaction |
			aTransaction handleReportFor: aReport 
		].! !
!PortfolioTreeStructure methodsFor: 'reportOperations' stamp: 'hh 10/26/2023 14:21:15'!
depositOperation: aDeposit! !
!PortfolioTreeStructure methodsFor: 'reportOperations' stamp: 'hh 10/26/2023 14:21:22'!
depositLegOperation: aDepositLeg! !
!PortfolioTreeStructure methodsFor: 'reportOperations' stamp: 'hh 10/26/2023 14:21:30'!
withdrawLegOperation: aWithdrawLeg! !
!PortfolioTreeStructure methodsFor: 'reportOperations' stamp: 'hh 10/26/2023 14:21:36'!
withdrawOperation: aWithdraw! !
!PortfolioTreeStructure methodsFor: 'makeReport' stamp: 'hh 10/26/2023 14:22:04' prior: 50657167!
makeReport

	treeStructure := OrderedCollection new.

	treeStructure add: portfolio name.
	portfolio makeReportFor: self.
	
	^treeStructure! !

----STARTUP---- (26 October 2023 14:28:16) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 14:28:21'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 14:28:21'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'hh 10/26/2023 14:28:21'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 14:28:22'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 14:28:22'!
PASSED!
!Portfolio methodsFor: 'reports' stamp: 'hh 10/26/2023 14:48:31' prior: 50654988!
makeReportFor: aReport
	
	accounts do: [:anAccount |
		anAccount handleReportFor: aReport
		].! !
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/26/2023 14:51:35'!
receptiveAccountOperation: aReceptiveAccount

	aReceptiveAccount makeReportFor: self.! !
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/26/2023 14:54:21'!
portfolioReportOperation: aPortfolio! !
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/26/2023 14:54:46'!
receptiveAccountReportOperation: aReceptiveAccount

	aReceptiveAccount makeReportFor: self.! !

!methodRemoval: AccountSummary #receptiveAccountOperation: stamp: 'hh 10/26/2023 14:54:46'!
receptiveAccountOperation: aReceptiveAccount

	aReceptiveAccount makeReportFor: self.!

!testRun: #AccountSummaryTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/26/2023 14:55:08'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:55:08'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:55:08'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:55:08'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:55:08'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/26/2023 14:55:08'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/26/2023 14:55:08'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount stamp: 'hh 10/26/2023 14:55:08'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryProcessCorrectlyPortfolioWithMultipleAccounts stamp: 'hh 10/26/2023 14:55:08'!
FAILURE!

!testRun: #AccountSummaryTest #test09AccountSummaryProcessCorrectlyPortfolioWithMultipleAccounts stamp: 'hh 10/26/2023 14:55:08'!
FAILURE!

!testRun: #AccountSummaryTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/26/2023 14:55:18'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:55:18'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:55:18'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:55:18'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:55:19'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/26/2023 14:55:19'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/26/2023 14:55:19'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount stamp: 'hh 10/26/2023 14:55:19'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryProcessCorrectlyPortfolioWithMultipleAccounts stamp: 'hh 10/26/2023 14:55:19'!
FAILURE!

!testRun: #AccountSummaryTest #test09AccountSummaryProcessCorrectlyPortfolioWithMultipleAccounts stamp: 'hh 10/26/2023 14:55:19'!
FAILURE!
!AccountSummary methodsFor: 'operations' stamp: 'hh 10/26/2023 14:56:41' prior: 50657607!
portfolioReportOperation: aPortfolio

	aPortfolio makeReportFor: self! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithNoTransactionsHasCeroAsBalance stamp: 'hh 10/26/2023 14:56:44'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryProcessDepositsCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:56:44'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryProcessWithdrawCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:56:44'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryProcessWithdrawLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:56:44'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryProcessDepositLegCorrectlyAndModifiesBalance stamp: 'hh 10/26/2023 14:56:45'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryProcessCorrectlyMultipleInstructionsAndReturnsCorrectBalance stamp: 'hh 10/26/2023 14:56:45'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryOfEmptyPortfolioReturnesCeroAsBalance stamp: 'hh 10/26/2023 14:56:45'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryProcessCorrectlyPortfolioWithOneAccount stamp: 'hh 10/26/2023 14:56:45'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryProcessCorrectlyPortfolioWithMultipleAccounts stamp: 'hh 10/26/2023 14:56:45'!
PASSED!
!TransferNet methodsFor: 'operations' stamp: 'hh 10/26/2023 14:57:16'!
receptiveAccountReportOperation: aReceptiveAccount

	aReceptiveAccount makeReportFor: self
	
! !
!TransferNet methodsFor: 'operations' stamp: 'hh 10/26/2023 14:57:30'!
portfolioReportOperation: aPortfolio

	aPortfolio makeReportFor: self
	
! !

!testRun: #TransferNetTest #test01TransferNetWithNoTransactionsEqualsCero stamp: 'hh 10/26/2023 14:57:32'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetProcessDepositLegCorrectly stamp: 'hh 10/26/2023 14:57:32'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetProcessWithdrawLegCorrectly stamp: 'hh 10/26/2023 14:57:32'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetGivesCorrectTransferNetForMultipleTransferences stamp: 'hh 10/26/2023 14:57:32'!
PASSED!

!testRun: #TransferNetTest #test05TransactionsOtherThanTransferencesDoNotAffectTransferNet stamp: 'hh 10/26/2023 14:57:32'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfEmptyPortfoloEqualsCero stamp: 'hh 10/26/2023 14:57:32'!
PASSED!

!testRun: #TransferNetTest #test07CorrectTransferNetForPortfolioWithOneAccount stamp: 'hh 10/26/2023 14:57:32'!
PASSED!

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'hh 10/26/2023 14:57:32'!
PASSED!
!PortfolioTreeStructure methodsFor: 'makeReport' stamp: 'hh 10/26/2023 14:59:30' prior: 50657167!
makeReport

	treeStructure := OrderedCollection new.

	treeStructure add: portfolio name.
	portfolio makeReportFor: self.
	
	^treeStructure! !

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 14:59:32'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 14:59:32'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'hh 10/26/2023 14:59:32'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 14:59:32'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 14:59:32'!
PASSED!

!methodRemoval: Portfolio #makePortfolioReportFor: stamp: 'hh 10/26/2023 14:59:40'!
makePortfolioReportFor: aPortfolioOnlyReport
	
	accounts do: [:anAccount |
		anAccount handleReportFor: aPortfolioOnlyReport .
		].!

----QUIT----(26 October 2023 15:03:05) CuisUniversity-5981.image priorSource: 10426428!

----STARTUP---- (26 October 2023 15:03:07) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'hh 10/26/2023 15:03:12'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'hh 10/26/2023 15:03:12'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'hh 10/26/2023 15:03:12'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'hh 10/26/2023 15:03:12'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'hh 10/26/2023 15:03:12'!
PASSED!

----QUIT----(26 October 2023 15:03:40) CuisUniversity-5981.image priorSource: 10437764!

----STARTUP---- (26 October 2023 15:07:10) as C:\Users\Manuel Urkovich\Facu\Inge1\cuis\windows64\CuisUniversity-5981.image!


!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:09:57'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'mm uu 10/26/2023 15:09:58'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'mm uu 10/26/2023 15:09:58'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'mm uu 10/26/2023 15:09:58'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'mm uu 10/26/2023 15:09:58'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'mm uu 10/26/2023 15:10:00'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'mm uu 10/26/2023 15:10:00'!
PASSED!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'mm uu 10/26/2023 15:10:00'!
PASSED!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'mm uu 10/26/2023 15:10:00'!
ERROR!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'mm uu 10/26/2023 15:10:00'!
PASSED!

!testRun: #TransferenceTest #test06WithdrawLegCanNagivateToDepositLeg stamp: 'mm uu 10/26/2023 15:10:00'!
PASSED!

!testRun: #TransferenceTest #test07WithdrawLegKnowsTransferenceValue stamp: 'mm uu 10/26/2023 15:10:00'!
PASSED!

!testRun: #TransferenceTest #test08DepositLegKnowsTransferenceValue stamp: 'mm uu 10/26/2023 15:10:00'!
PASSED!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'mm uu 10/26/2023 15:10:00'!
ERROR!

Object subclass: #PortfolioSpecialTreeStructure
	instanceVariableNames: 'portfolio treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSpecialTreeStructure category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 15:17:55'!
Object subclass: #PortfolioSpecialTreeStructure
	instanceVariableNames: 'portfolio treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #PortfolioSpecialTreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSpecialTreeStructureTest category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 15:18:19'!
TestCase subclass: #PortfolioSpecialTreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSpecialTreeStructureTest methodsFor: 'no messages' stamp: 'mm uu 10/26/2023 15:18:57'!
test01TreeStructureOfEmptyPortfolioOnlyHasItsName

	|portfolio treeStructure|
	
	portfolio := Portfolio named: 'mio'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport size equals: 1.! !

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:18:58'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:18:58'!
ERROR!
!PortfolioSpecialTreeStructure class methodsFor: 'instance creation' stamp: 'mm uu 10/26/2023 15:19:08'!
for: portfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: portfolio ! !
!PortfolioSpecialTreeStructure class methodsFor: 'instance creation' stamp: 'mm uu 10/26/2023 15:19:14' prior: 50657972!
for: portfolio
	^self new initializeFor: portfolio ! !

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:19:16'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:19:16'!
ERROR!

!classDefinition: #PortfolioSpecialTreeStructure category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 15:19:23'!
Object subclass: #PortfolioSpecialTreeStructure
	instanceVariableNames: 'portfolio treeStructure portfolio_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:19:32'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:19:32'!
ERROR!
!PortfolioSpecialTreeStructure class methodsFor: 'instance creation' stamp: 'mm uu 10/26/2023 15:19:52' prior: 50657981!
for: aPortfolio
	^self new initializeFor: aPortfolio ! !

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:19:55'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:19:55'!
ERROR!

Object subclass: #PortfolioSpecialTreeStructure
	instanceVariableNames: 'portfolio treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSpecialTreeStructure category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 15:20:10'!
Object subclass: #PortfolioSpecialTreeStructure
	instanceVariableNames: 'portfolio treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:29:10'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:29:10'!
ERROR!
!PortfolioSpecialTreeStructure methodsFor: 'no messages' stamp: 'mm uu 10/26/2023 15:33:25'!
initializeFor: aPortfolio
	portfolio := aPortfolio .! !

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:33:28'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:33:28'!
ERROR!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:33:35'!
makeReport
	self shouldBeImplemented.! !
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:33:56' prior: 50658065!
makeReport
	^OrderedCollection with: 'mio'! !

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:33:58'!
PASSED!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:35:20'!
test02

	|portfolio account treeStructure|
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac1'.
	self assert: treeStructure makeReport size equals: 2.! !
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:35:33' prior: 50658080!
test02

	|portfolio account treeStructure|
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac1'.
	self assert: treeStructure makeReport size equals: 2.! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:35:35'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:35:35'!
ERROR!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:35:58' prior: 50658070!
makeReport
	portfolio makeReportFor: self.! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:37:14'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:37:14'!
ERROR!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:37:35'!
receptiveAccountReportOperation: aReceptiveAccount 
	self shouldBeImplemented.! !
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:37:49' prior: 50658130!
receptiveAccountReportOperation: aReceptiveAccount 
	aReceptiveAccount! !
!Portfolio methodsFor: 'reports' stamp: 'mm uu 10/26/2023 15:39:48' prior: 50657595!
makeReportFor: aReport
	
	accounts do: [:anAccount |
		anAccount makeReportFor: aReport
		].! !

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:40:02'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'mm uu 10/26/2023 15:40:02'!
ERROR!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'mm uu 10/26/2023 15:40:02'!
ERROR!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'mm uu 10/26/2023 15:40:02'!
ERROR!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'mm uu 10/26/2023 15:40:02'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'hh 10/26/2023 14:48:31' prior: 50658142!
makeReportFor: aReport
	
	accounts do: [:anAccount |
		anAccount handleReportFor: aReport
		].! !

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:41:07'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'mm uu 10/26/2023 15:41:07'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'mm uu 10/26/2023 15:41:08'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'mm uu 10/26/2023 15:41:08'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'mm uu 10/26/2023 15:41:08'!
PASSED!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:42:16' prior: 50658137!
receptiveAccountReportOperation: aReceptiveAccount 
	aReceptiveAccount handleReportFor: self.! !

!classDefinition: #PortfolioSpecialTreeStructure category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 15:43:39'!
Object subclass: #PortfolioSpecialTreeStructure
	instanceVariableNames: 'portfolio treeStructure report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:43:37' prior: 50658200!
receptiveAccountReportOperation: aReceptiveAccount 
	|accountSummary|
	accountSummary := AccountSummary for: aReceptiveAccount .
	report add: accountSummary makeReport.! !
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:43:48' prior: 50658051!
initializeFor: aPortfolio
	portfolio := aPortfolio .
	report := OrderedCollection new.! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:43:54'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:43:54'!
ERROR!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:44:12' prior: 50658096!
test02

	|portfolio account treeStructure test|
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	
	test := treeStructure makeReport .
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac1'.
	self assert: treeStructure makeReport size equals: 2.! !

PortfolioSpecialTreeStructure!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:44:48' prior: 50658119!
makeReport
	portfolio makeReportFor: self.
	^report ! !
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:46:38' prior: 50658259!
makeReport
	report add: portfolio name.
	portfolio makeReportFor: self.
	^report ! !
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:49:01' prior: 50658217!
receptiveAccountReportOperation: aReceptiveAccount 
	|accountSummary|
	accountSummary := AccountSummary for: aReceptiveAccount .
	accountSummary makeReport do: [:transactionSummary |
		report add: '    ', transactionSummary
	].! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:49:08'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:49:08'!
FAILURE!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:50:04' prior: 50658272!
receptiveAccountReportOperation: aReceptiveAccount 
	|accountSummary|
	report add: ('    ', aReceptiveAccount name).
	accountSummary := AccountSummary for: aReceptiveAccount .
	accountSummary makeReport do: [:transactionSummary |
		report add: '    ', transactionSummary
	].! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:50:17'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:50:17'!
FAILURE!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:50:48' prior: 50658240!
test02

	|portfolio account treeStructure test|
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	
	test := treeStructure makeReport .
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        balance = 0'.
	self assert: treeStructure makeReport size equals: 2.! !
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:50:52' prior: 50658309!
test02

	|portfolio account treeStructure test|
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	
	test := treeStructure makeReport .
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        balance = 0'.
	self assert: treeStructure makeReport size equals: 3.! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:50:55'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:50:55'!
FAILURE!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:51:01' prior: 50658330!
test02

	|portfolio account treeStructure test|
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	
	test := treeStructure makeReport .
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Balance = 0'.
	self assert: treeStructure makeReport size equals: 3.! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:51:04'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:51:04'!
FAILURE!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:52:31' prior: 50658290!
receptiveAccountReportOperation: aReceptiveAccount 
	|accountSummary|
	report add: ('    ', aReceptiveAccount name).
	accountSummary := AccountSummary for: aReceptiveAccount .
	accountSummary makeReport do: [:transactionSummary |
		report add: '        ', transactionSummary
	].! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:52:35'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:52:35'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:52:39'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:52:39'!
FAILURE!

self size!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:53:55' prior: 50658265!
makeReport
	portfolio := OrderedCollection new.
	report add: portfolio name.
	portfolio makeReportFor: self.
	^report ! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:54:04'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:54:04'!
ERROR!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:54:26' prior: 50658412!
makeReport
	report := OrderedCollection new.
	report add: portfolio name.
	portfolio makeReportFor: self.
	^report ! !

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 15:54:29'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:54:29'!
PASSED!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:55:44'!
test03

	|portfolio account treeStructure test|
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	Deposit register: 200 on: account.
	
	test := treeStructure makeReport .
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Deposit for 200'.
	self assert: (treeStructure makeReport at: 4) equals: '        Balance = 200'.
	self assert: treeStructure makeReport size equals: 3.! !
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:55:48' prior: 50658441!
test03

	|portfolio account treeStructure test|
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	Deposit register: 200 on: account.
	
	test := treeStructure makeReport .
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Deposit for 200'.
	self assert: (treeStructure makeReport at: 4) equals: '        Balance = 200'.
	self assert: treeStructure makeReport size equals: 4.! !

!testRun: #PortfolioSpecialTreeStructureTest #test03 stamp: 'mm uu 10/26/2023 15:55:51'!
PASSED!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:55:56' prior: 50658357!
test02

	|portfolio account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Balance = 0'.
	self assert: treeStructure makeReport size equals: 3.! !
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:56:01' prior: 50658465!
test03

	|portfolio account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	Deposit register: 200 on: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Deposit for 200'.
	self assert: (treeStructure makeReport at: 4) equals: '        Balance = 200'.
	self assert: treeStructure makeReport size equals: 4.! !
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:57:36'!
test04

	|portfolio portfolio2 treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport size equals: 2.! !
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:58:34' prior: 50658492!
test02

	|portfolio account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Balance = 0'.
	self assert: treeStructure makeReport fourth equals: '    Balance = 0'.
	self assert: treeStructure makeReport size equals: 4.! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:58:36'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:58:36'!
ERROR!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:59:19' prior: 50658426!
makeReport
	report := OrderedCollection new.
	report add: portfolio name.
	portfolio makeReportFor: self.
	report add: '    ', portfolio balance.
	^report ! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:59:22'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:59:22'!
ERROR!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:59:32' prior: 50658577!
makeReport
	report := OrderedCollection new.
	report add: portfolio name.
	portfolio makeReportFor: self.
	report add: '    ', portfolio balance asString.
	^report ! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:59:35'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:59:35'!
FAILURE!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 15:59:54' prior: 50658592!
makeReport
	report := OrderedCollection new.
	report add: portfolio name.
	portfolio makeReportFor: self.
	report add: '    Balance = ', portfolio balance asString.
	^report ! !

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 15:59:57'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test03 stamp: 'mm uu 10/26/2023 16:00:01'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test03 stamp: 'mm uu 10/26/2023 16:00:01'!
FAILURE!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:00:23' prior: 50658511!
test03

	|portfolio account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	Deposit register: 200 on: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Deposit for 200'.
	self assert: treeStructure makeReport fourth equals: '        Balance = 200'.
	self assert: (treeStructure makeReport at: 5) equals: '        Balance = 200'.
	self assert: treeStructure makeReport size equals: 4.! !
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:00:28' prior: 50658627!
test03

	|portfolio account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	Deposit register: 200 on: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Deposit for 200'.
	self assert: treeStructure makeReport fourth equals: '        Balance = 200'.
	self assert: (treeStructure makeReport at: 5) equals: '    Balance = 200'.
	self assert: treeStructure makeReport size equals: 4.! !

!testRun: #PortfolioSpecialTreeStructureTest #test03 stamp: 'mm uu 10/26/2023 16:00:30'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test03 stamp: 'mm uu 10/26/2023 16:00:30'!
FAILURE!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:00:34' prior: 50658652!
test03

	|portfolio account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	Deposit register: 200 on: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Deposit for 200'.
	self assert: treeStructure makeReport fourth equals: '        Balance = 200'.
	self assert: (treeStructure makeReport at: 5) equals: '    Balance = 200'.
	self assert: treeStructure makeReport size equals: 5.! !

!testRun: #PortfolioSpecialTreeStructureTest #test03 stamp: 'mm uu 10/26/2023 16:00:35'!
PASSED!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:02:40' prior: 50658533!
test04

	|portfolio portfolio2 treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport third equals: '        Balance = 0'.
	self assert: treeStructure makeReport fourth equals: '    Balance = 0'.
	self assert: treeStructure makeReport size equals: 2.! !

!testRun: #PortfolioSpecialTreeStructureTest #test04 stamp: 'mm uu 10/26/2023 16:02:42'!
ERROR!

!testRun: #PortfolioSpecialTreeStructureTest #test04 stamp: 'mm uu 10/26/2023 16:02:42'!
ERROR!
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:02:47'!
portfolioReportOperation: aPortfolio 
	self shouldBeImplemented.! !
!PortfolioSpecialTreeStructure methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:03:54' prior: 50658738!
portfolioReportOperation: aPortfolio 
	|portfolioTree|
	
	portfolioTree := PortfolioSpecialTreeStructure for: aPortfolio.
	
	report addAll: (portfolioTree makeReport collect: [:portfolioSpecialSummary | '    ',portfolioSpecialSummary])! !

!testRun: #PortfolioSpecialTreeStructureTest #test04 stamp: 'mm uu 10/26/2023 16:03:57'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test04 stamp: 'mm uu 10/26/2023 16:03:57'!
FAILURE!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:04:04' prior: 50658711!
test04

	|portfolio portfolio2 treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport third equals: '        Balance = 0'.
	self assert: treeStructure makeReport fourth equals: '    Balance = 0'.
	self assert: treeStructure makeReport size equals: 4.! !

!testRun: #PortfolioSpecialTreeStructureTest #test04 stamp: 'mm uu 10/26/2023 16:04:07'!
PASSED!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:05:06'!
test05

	|portfolio portfolio2 account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	account := ReceptiveAccount new.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	Deposit register: 200 on: account.
	
	portfolio2 add: account.
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport third equals: '        Deposit for 200'.
	self assert: treeStructure makeReport third equals: '        Balance = 200'.
	self assert: treeStructure makeReport fourth equals: '    Balance = 200'.
	self assert: treeStructure makeReport size equals: 4.! !

!testRun: #PortfolioSpecialTreeStructureTest #test05 stamp: 'mm uu 10/26/2023 16:05:07'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test05 stamp: 'mm uu 10/26/2023 16:05:07'!
FAILURE!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:06:21' prior: 50658786!
test05

	|portfolio portfolio2 account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	account := ReceptiveAccount named: 'cuentaHijo'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	Deposit register: 200 on: account.
	
	portfolio2 add: account.
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport third equals: '        cuentaHijo'.
	self assert: treeStructure makeReport third equals: '            Deposit for 200'.
	self assert: treeStructure makeReport third equals: '            Balance = 200'.
	self assert: treeStructure makeReport fourth equals: '    Balance = 200'.
	self assert: treeStructure makeReport size equals: 4.! !
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:06:44' prior: 50658820!
test05

	|portfolio portfolio2 account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	account := ReceptiveAccount named: 'cuentaHijo'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	Deposit register: 200 on: account.
	
	portfolio2 add: account.
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport third equals: '        cuentaHijo'.
	self assert: treeStructure makeReport fourth equals: '            Deposit for 200'.
	self assert:(treeStructure makeReport at: 5) equals: '            Balance = 200'.
	self assert:(treeStructure makeReport at: 6) equals: '    Balance = 200'.
	self assert: treeStructure makeReport size equals: 6.! !

!testRun: #PortfolioSpecialTreeStructureTest #test05 stamp: 'mm uu 10/26/2023 16:06:45'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test05 stamp: 'mm uu 10/26/2023 16:06:45'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test05 stamp: 'mm uu 10/26/2023 16:07:37'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test05 stamp: 'mm uu 10/26/2023 16:07:37'!
FAILURE!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:08:17' prior: 50658851!
test05

	|portfolio portfolio2 account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	account := ReceptiveAccount named: 'cuentaHijo'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	Deposit register: 200 on: account.
	
	portfolio2 add: account.
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport third equals: '        cuentaHijo'.
	self assert: treeStructure makeReport fourth equals: '            Deposit for 200'.
	self assert:(treeStructure makeReport at: 5) equals: '            Balance = 200'.
	self assert:(treeStructure makeReport at: 6) equals: '        Balance = 200'.
	self assert:(treeStructure makeReport at: 7) equals: '    Balance = 200'.
	self assert: treeStructure makeReport size equals: 7.! !

!testRun: #PortfolioSpecialTreeStructureTest #test05 stamp: 'mm uu 10/26/2023 16:08:19'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test04 stamp: 'mm uu 10/26/2023 16:08:21'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test03 stamp: 'mm uu 10/26/2023 16:08:23'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 16:08:24'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 16:08:26'!
FAILURE!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 16:08:26'!
FAILURE!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:08:53' prior: 50657950!
test01TreeStructureOfEmptyPortfolioOnlyHasItsName

	|portfolio treeStructure|
	
	portfolio := Portfolio named: 'mio'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    Balance = 0'.
	self assert: treeStructure makeReport size equals: 2.! !

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 16:08:54'!
PASSED!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:09:30'!
test02SpecialReportOfPortfolioWithAccount

	|portfolio account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Balance = 0'.
	self assert: treeStructure makeReport fourth equals: '    Balance = 0'.
	self assert: treeStructure makeReport size equals: 4.! !

!methodRemoval: PortfolioSpecialTreeStructureTest #test02 stamp: 'mm uu 10/26/2023 16:09:32'!
test02

	|portfolio account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Balance = 0'.
	self assert: treeStructure makeReport fourth equals: '    Balance = 0'.
	self assert: treeStructure makeReport size equals: 4.!

!testRun: #PortfolioSpecialTreeStructureTest #test02SpecialReportOfPortfolioWithAccount stamp: 'mm uu 10/26/2023 16:09:33'!
PASSED!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:09:57'!
test03SpecialReportForPortfolioWithAccount

	|portfolio account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	Deposit register: 200 on: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Deposit for 200'.
	self assert: treeStructure makeReport fourth equals: '        Balance = 200'.
	self assert: (treeStructure makeReport at: 5) equals: '    Balance = 200'.
	self assert: treeStructure makeReport size equals: 5.! !

!methodRemoval: PortfolioSpecialTreeStructureTest #test03 stamp: 'mm uu 10/26/2023 16:09:57'!
test03

	|portfolio account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	account := ReceptiveAccount named: 'ac'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: account.
	Deposit register: 200 on: account.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    ac'.
	self assert: treeStructure makeReport third equals: '        Deposit for 200'.
	self assert: treeStructure makeReport fourth equals: '        Balance = 200'.
	self assert: (treeStructure makeReport at: 5) equals: '    Balance = 200'.
	self assert: treeStructure makeReport size equals: 5.!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:10:16'!
test04SpecialReportForPortfolioWithPortfolio

	|portfolio portfolio2 treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport third equals: '        Balance = 0'.
	self assert: treeStructure makeReport fourth equals: '    Balance = 0'.
	self assert: treeStructure makeReport size equals: 4.! !

!methodRemoval: PortfolioSpecialTreeStructureTest #test04 stamp: 'mm uu 10/26/2023 16:10:16'!
test04

	|portfolio portfolio2 treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport third equals: '        Balance = 0'.
	self assert: treeStructure makeReport fourth equals: '    Balance = 0'.
	self assert: treeStructure makeReport size equals: 4.!
!PortfolioSpecialTreeStructureTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:10:31'!
test05SpecialReportForPortfolioWithReportWithAccount

	|portfolio portfolio2 account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	account := ReceptiveAccount named: 'cuentaHijo'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	Deposit register: 200 on: account.
	
	portfolio2 add: account.
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport third equals: '        cuentaHijo'.
	self assert: treeStructure makeReport fourth equals: '            Deposit for 200'.
	self assert:(treeStructure makeReport at: 5) equals: '            Balance = 200'.
	self assert:(treeStructure makeReport at: 6) equals: '        Balance = 200'.
	self assert:(treeStructure makeReport at: 7) equals: '    Balance = 200'.
	self assert: treeStructure makeReport size equals: 7.! !

!methodRemoval: PortfolioSpecialTreeStructureTest #test05 stamp: 'mm uu 10/26/2023 16:10:31'!
test05

	|portfolio portfolio2 account treeStructure |
	
	portfolio := Portfolio named: 'mio'.
	portfolio2 := Portfolio named: 'hijo'.
	account := ReceptiveAccount named: 'cuentaHijo'.
	treeStructure := PortfolioSpecialTreeStructure for: portfolio .
	
	Deposit register: 200 on: account.
	
	portfolio2 add: account.
	portfolio add: portfolio2.
	
	self assert: treeStructure makeReport first equals: 'mio'.
	self assert: treeStructure makeReport second equals: '    hijo'.
	self assert: treeStructure makeReport third equals: '        cuentaHijo'.
	self assert: treeStructure makeReport fourth equals: '            Deposit for 200'.
	self assert:(treeStructure makeReport at: 5) equals: '            Balance = 200'.
	self assert:(treeStructure makeReport at: 6) equals: '        Balance = 200'.
	self assert:(treeStructure makeReport at: 7) equals: '    Balance = 200'.
	self assert: treeStructure makeReport size equals: 7.!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 16:10:33'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test02SpecialReportOfPortfolioWithAccount stamp: 'mm uu 10/26/2023 16:10:33'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test03SpecialReportForPortfolioWithAccount stamp: 'mm uu 10/26/2023 16:10:33'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test04SpecialReportForPortfolioWithPortfolio stamp: 'mm uu 10/26/2023 16:10:33'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test05SpecialReportForPortfolioWithReportWithAccount stamp: 'mm uu 10/26/2023 16:10:33'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'mm uu 10/26/2023 16:10:35'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'mm uu 10/26/2023 16:10:35'!
PASSED!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'mm uu 10/26/2023 16:10:35'!
PASSED!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'mm uu 10/26/2023 16:10:35'!
ERROR!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'mm uu 10/26/2023 16:10:35'!
PASSED!

!testRun: #TransferenceTest #test06WithdrawLegCanNagivateToDepositLeg stamp: 'mm uu 10/26/2023 16:10:35'!
PASSED!

!testRun: #TransferenceTest #test07WithdrawLegKnowsTransferenceValue stamp: 'mm uu 10/26/2023 16:10:35'!
PASSED!

!testRun: #TransferenceTest #test08DepositLegKnowsTransferenceValue stamp: 'mm uu 10/26/2023 16:10:35'!
PASSED!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'mm uu 10/26/2023 16:10:35'!
ERROR!
!TransferenceLegs methodsFor: 'transference' stamp: 'mm uu 10/26/2023 16:10:51' prior: 50654206!
transference
	^transference ! !

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'mm uu 10/26/2023 16:10:55'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'mm uu 10/26/2023 16:10:55'!
PASSED!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'mm uu 10/26/2023 16:10:55'!
PASSED!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'mm uu 10/26/2023 16:10:55'!
PASSED!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'mm uu 10/26/2023 16:10:55'!
PASSED!

!testRun: #TransferenceTest #test06WithdrawLegCanNagivateToDepositLeg stamp: 'mm uu 10/26/2023 16:10:55'!
PASSED!

!testRun: #TransferenceTest #test07WithdrawLegKnowsTransferenceValue stamp: 'mm uu 10/26/2023 16:10:55'!
PASSED!

!testRun: #TransferenceTest #test08DepositLegKnowsTransferenceValue stamp: 'mm uu 10/26/2023 16:10:55'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithNoTransactionsEqualsCero stamp: 'mm uu 10/26/2023 16:10:56'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetProcessDepositLegCorrectly stamp: 'mm uu 10/26/2023 16:10:56'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetProcessWithdrawLegCorrectly stamp: 'mm uu 10/26/2023 16:10:56'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetGivesCorrectTransferNetForMultipleTransferences stamp: 'mm uu 10/26/2023 16:10:56'!
PASSED!

!testRun: #TransferNetTest #test05TransactionsOtherThanTransferencesDoNotAffectTransferNet stamp: 'mm uu 10/26/2023 16:10:56'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfEmptyPortfoloEqualsCero stamp: 'mm uu 10/26/2023 16:10:56'!
PASSED!

!testRun: #TransferNetTest #test07CorrectTransferNetForPortfolioWithOneAccount stamp: 'mm uu 10/26/2023 16:10:56'!
PASSED!

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'mm uu 10/26/2023 16:10:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mm uu 10/26/2023 16:10:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mm uu 10/26/2023 16:10:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mm uu 10/26/2023 16:10:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mm uu 10/26/2023 16:10:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mm uu 10/26/2023 16:10:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mm uu 10/26/2023 16:10:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mm uu 10/26/2023 16:10:58'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 16:10:59'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'mm uu 10/26/2023 16:10:59'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'mm uu 10/26/2023 16:10:59'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'mm uu 10/26/2023 16:10:59'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'mm uu 10/26/2023 16:11:00'!
PASSED!

Object subclass: #AccountRelatedReports
	instanceVariableNames: 'portfolio treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountRelatedReports category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 16:11:25'!
Object subclass: #AccountRelatedReports
	instanceVariableNames: 'portfolio treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountRelatedReports subclass: #PortfolioSpecialTreeStructure
	instanceVariableNames: 'portfolio treeStructure report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountRelatedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountRelatedReport category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 16:12:01'!
Object subclass: #AccountRelatedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountRelatedReports stamp: 'mm uu 10/26/2023 16:12:08'!
Object subclass: #AccountRelatedReports
	instanceVariableNames: 'portfolio treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountRelatedReport subclass: #PortfolioSpecialTreeStructure
	instanceVariableNames: 'portfolio treeStructure report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSpecialTreeStructure category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 16:12:12'!
AccountRelatedReport subclass: #PortfolioSpecialTreeStructure
	instanceVariableNames: 'portfolio treeStructure report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountRelatedReport subclass: #PortfolioTreeStructure
	instanceVariableNames: 'portfolio treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeStructure category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 16:12:23'!
AccountRelatedReport subclass: #PortfolioTreeStructure
	instanceVariableNames: 'portfolio treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransactionsRelatedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionsRelatedReport category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 16:12:45'!
Report subclass: #TransactionsRelatedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransactionsRelatedReport subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 16:12:51'!
TransactionsRelatedReport subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransactionsRelatedReport subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 16:12:53'!
TransactionsRelatedReport subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountRelatedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountRelatedReport category: 'Portfolio-Solucion' stamp: 'mm uu 10/26/2023 16:13:01'!
Report subclass: #AccountRelatedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountRelatedReport methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:13:14' overrides: 50655501!
makeReport

	self subclassResponsibility! !
!AccountRelatedReport methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:13:18' prior: 50659467 overrides: 50655501!
makeReport

	self subclassResponsibility! !
!AccountRelatedReport methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:13:22'!
portfolioReportOperation: aPortfolio

	self subclassResponsibility! !
!AccountRelatedReport methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:13:25'!
receptiveAccountReportOperation: aReceptiveAccount

	self subclassResponsibility! !
!TransactionsRelatedReport methodsFor: 'operations' stamp: 'mm uu 10/26/2023 16:13:38' overrides: 50654471!
depositLegOperation: aDepositLeg

	self subclassResponsibility! !
!TransactionsRelatedReport methodsFor: 'operations' stamp: 'mm uu 10/26/2023 16:13:42' overrides: 50654476!
depositOperation: aDeposit

	self subclassResponsibility! !
!TransactionsRelatedReport methodsFor: 'initialize' stamp: 'mm uu 10/26/2023 16:13:45'!
initializeFor: anAccount

	self subclassResponsibility! !
!TransactionsRelatedReport methodsFor: 'compute' stamp: 'mm uu 10/26/2023 16:13:49' overrides: 50655501!
makeReport

	self subclassResponsibility! !
!TransactionsRelatedReport methodsFor: 'operations' stamp: 'mm uu 10/26/2023 16:13:52'!
receptiveAccountReportOperation: aReceptiveAccount

	self subclassResponsibility! !
!TransactionsRelatedReport methodsFor: 'operations' stamp: 'mm uu 10/26/2023 16:13:59' overrides: 50654480!
withdrawLegOperation: aWithdrawLeg

	self subclassResponsibility! !
!TransactionsRelatedReport methodsFor: 'operations' stamp: 'mm uu 10/26/2023 16:14:01' overrides: 50654485!
withdrawOperation: aWithdraw

	self subclassResponsibility! !
!TransactionsRelatedReport methodsFor: 'operations' stamp: 'mm uu 10/26/2023 16:14:08'!
portfolioReportOperation: aPortfolio

	self subclassResponsibility! !
!AccountRelatedReport methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 16:14:16'!
initializeFor: aPortfolio

	self subclassResponsibility! !

!testRun: #TransferenceTest #test01TransferenceChangesAccountsBalance stamp: 'mm uu 10/26/2023 16:14:20'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceAccountsHaveTransferenceLegRegistered stamp: 'mm uu 10/26/2023 16:14:20'!
PASSED!

!testRun: #TransferenceTest #test03WithdrawLegCanNagivateToTransference stamp: 'mm uu 10/26/2023 16:14:20'!
PASSED!

!testRun: #TransferenceTest #test04DepositLegCanNagivateToTransference stamp: 'mm uu 10/26/2023 16:14:20'!
PASSED!

!testRun: #TransferenceTest #test05DepositLegCanNagivateToWithdrawLeg stamp: 'mm uu 10/26/2023 16:14:20'!
PASSED!

!testRun: #TransferenceTest #test06WithdrawLegCanNagivateToDepositLeg stamp: 'mm uu 10/26/2023 16:14:20'!
PASSED!

!testRun: #TransferenceTest #test07WithdrawLegKnowsTransferenceValue stamp: 'mm uu 10/26/2023 16:14:20'!
PASSED!

!testRun: #TransferenceTest #test08DepositLegKnowsTransferenceValue stamp: 'mm uu 10/26/2023 16:14:20'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithNoTransactionsEqualsCero stamp: 'mm uu 10/26/2023 16:14:22'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetProcessDepositLegCorrectly stamp: 'mm uu 10/26/2023 16:14:22'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetProcessWithdrawLegCorrectly stamp: 'mm uu 10/26/2023 16:14:22'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetGivesCorrectTransferNetForMultipleTransferences stamp: 'mm uu 10/26/2023 16:14:22'!
PASSED!

!testRun: #TransferNetTest #test05TransactionsOtherThanTransferencesDoNotAffectTransferNet stamp: 'mm uu 10/26/2023 16:14:22'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfEmptyPortfoloEqualsCero stamp: 'mm uu 10/26/2023 16:14:22'!
PASSED!

!testRun: #TransferNetTest #test07CorrectTransferNetForPortfolioWithOneAccount stamp: 'mm uu 10/26/2023 16:14:22'!
PASSED!

!testRun: #TransferNetTest #test08CorrectTransferNetForPortfolioWithMultipleAccount stamp: 'mm uu 10/26/2023 16:14:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mm uu 10/26/2023 16:14:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mm uu 10/26/2023 16:14:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mm uu 10/26/2023 16:14:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mm uu 10/26/2023 16:14:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mm uu 10/26/2023 16:14:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mm uu 10/26/2023 16:14:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mm uu 10/26/2023 16:14:25'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 16:14:26'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test02TreeStructureOfPortfolioWithOneAccountIsCorrect stamp: 'mm uu 10/26/2023 16:14:26'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test03AccountsWithNoNameHaveUnnamedAsName stamp: 'mm uu 10/26/2023 16:14:26'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test04TreeStructureOfPortfolioWithMultipleAccountsIsCorrect stamp: 'mm uu 10/26/2023 16:14:26'!
PASSED!

!testRun: #PortfolioTreeStructureTest #test05TreeStructureOfPortfolioWithAccountAndWithPortfolioWithAccountsIsIndentedCorrectly stamp: 'mm uu 10/26/2023 16:14:26'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyHasItsName stamp: 'mm uu 10/26/2023 16:14:28'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test02SpecialReportOfPortfolioWithAccount stamp: 'mm uu 10/26/2023 16:14:28'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test03SpecialReportForPortfolioWithAccount stamp: 'mm uu 10/26/2023 16:14:28'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test04SpecialReportForPortfolioWithPortfolio stamp: 'mm uu 10/26/2023 16:14:28'!
PASSED!

!testRun: #PortfolioSpecialTreeStructureTest #test05SpecialReportForPortfolioWithReportWithAccount stamp: 'mm uu 10/26/2023 16:14:28'!
PASSED!

----SNAPSHOT----(26 October 2023 16:14:33) CuisUniversity-5981.image priorSource: 10438658!

----SNAPSHOT----(26 October 2023 16:14:35) CuisUniversity-5981.image priorSource: 10496646!