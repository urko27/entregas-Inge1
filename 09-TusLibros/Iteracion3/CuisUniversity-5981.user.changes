

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (30 October 2023 17:56:43) as /home/clinux01/Descargas/linux64(1)/linux64/CuisUniversity-5981.image!


Object subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: 'TusLibros' stamp: 'h 10/30/2023 17:57:23'!
Object subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'no messages' stamp: 'h 10/30/2023 18:00:50'!
test01CanCreateCartWithValidCustomerId! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:01:03'!
test02CannotCreateCartWithInValidCustomerId! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:02:54'!
test01CanCreateCartWithValidCustomerIdAndPassword! !

!methodRemoval: TusLibrosTest #test01CanCreateCartWithValidCustomerId stamp: 'h 10/30/2023 18:02:54'!
test01CanCreateCartWithValidCustomerId!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:03:13'!
test02CannotCreateCartWithInvalidCustomerId! !

!methodRemoval: TusLibrosTest #test02CannotCreateCartWithInValidCustomerId stamp: 'h 10/30/2023 18:03:13'!
test02CannotCreateCartWithInValidCustomerId!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:03:44'!
test03CannotCreateCartWithInvalidPasswordButValidCustomerId! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:21:45'!
test01CartWithValidCustomerIdAndPasswordIsEmpty! !

!methodRemoval: TusLibrosTest #test01CanCreateCartWithValidCustomerIdAndPassword stamp: 'h 10/30/2023 18:21:45'!
test01CanCreateCartWithValidCustomerIdAndPassword!

!methodRemoval: TusLibrosTest #test03CannotCreateCartWithInvalidPasswordButValidCustomerId stamp: 'h 10/30/2023 18:24:43'!
test03CannotCreateCartWithInvalidPasswordButValidCustomerId!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:25:24'!
test02CannotCreateCartWhenUnauthenticatedUser! !

!methodRemoval: TusLibrosTest #test02CannotCreateCartWithInvalidCustomerId stamp: 'h 10/30/2023 18:25:24'!
test02CannotCreateCartWithInvalidCustomerId!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:25:32'!
test02CannotCreateCartWhitUnauthenticatedUser! !

!methodRemoval: TusLibrosTest #test02CannotCreateCartWhenUnauthenticatedUser stamp: 'h 10/30/2023 18:25:32'!
test02CannotCreateCartWhenUnauthenticatedUser!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:26:03'!
test02CannotCreateCartWhitInvalidIdOrPassword! !

!methodRemoval: TusLibrosTest #test02CannotCreateCartWhitUnauthenticatedUser stamp: 'h 10/30/2023 18:26:03'!
test02CannotCreateCartWhitUnauthenticatedUser!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:27:35'!
test03AssertCardExpirationIsValidAndActive! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:30:20' prior: 50650407!
test03AssertCardExpirationIsValidAndActive
	'isnt usable deberia ser. De todas formas esto lo checkeo el merchant processor'! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:35:20'!
test99AssertCardExpirationIsValidAndActive
	'isnt usable deberia ser. De todas formas esto lo checkeo el merchant processor'! !

!methodRemoval: TusLibrosTest #test03AssertCardExpirationIsValidAndActive stamp: 'h 10/30/2023 18:35:20'!
test03AssertCardExpirationIsValidAndActive
	'isnt usable deberia ser. De todas formas esto lo checkeo el merchant processor'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:50:08'!
testxxCannotCreateCartWhitInvalidIdOrPassword! !

!methodRemoval: TusLibrosTest #test02CannotCreateCartWhitInvalidIdOrPassword stamp: 'h 10/30/2023 18:50:08'!
test02CannotCreateCartWhitInvalidIdOrPassword!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 18:51:01'!
test02CartWithAddedBookIsNotEmpty! !

TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: 'TusLibros' stamp: 'h 10/30/2023 19:01:25'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:01:35'!
test01CartWithIsEmpty! !

!methodRemoval: TusLibrosTest #test01CartWithValidCustomerIdAndPasswordIsEmpty stamp: 'h 10/30/2023 19:01:35'!
test01CartWithValidCustomerIdAndPasswordIsEmpty!

!classDefinition: #Cart category: 'TusLibros' stamp: 'h 10/30/2023 19:02:20'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:02:15' prior: 50650457!
test01CartWithIsEmpty

	|cart|
	
	cart := Cart new.
	
	self assert: cart isEmpty.! !

!testRun: #TusLibrosTest #test01CartWithIsEmpty stamp: 'h 10/30/2023 19:02:23'!
ERROR!

!testRun: #TusLibrosTest #test01CartWithIsEmpty stamp: 'h 10/30/2023 19:02:23'!
ERROR!
!Cart methodsFor: 'test' stamp: 'h 10/30/2023 19:02:31'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'test' stamp: 'h 10/30/2023 19:02:37' prior: 50650483!
isEmpty
	
	^true! !

!testRun: #TusLibrosTest #test01CartWithIsEmpty stamp: 'h 10/30/2023 19:02:39'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:06:33' prior: 50650442!
test02CartWithAddedBookIsNotEmpty

	|cart|
	
	cart := Cart new.
	cart add: #libro.
	
	self deny: cart isEmpty.! !

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:06:35'!
ERROR!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:06:35'!
ERROR!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:06:45'!
ERROR!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:06:45'!
ERROR!
!Cart methodsFor: 'add' stamp: 'h 10/30/2023 19:06:52'!
add: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'h 10/30/2023 19:08:33'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'add' stamp: 'h 10/30/2023 19:08:32' prior: 50650512!
add: aBook

	books add: aBook .
	
	! !
!Cart methodsFor: 'initialize' stamp: 'h 10/30/2023 19:08:52' overrides: 16920235!
initialize

	books := OrderedCollection new.! !
!Cart methodsFor: 'test' stamp: 'h 10/30/2023 19:09:18' prior: 50650487!
isEmpty
	
	^books size = 0! !

!testRun: #TusLibrosTest #test01CartWithIsEmpty stamp: 'h 10/30/2023 19:09:19'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:09:19'!
PASSED!

!testRun: #TusLibrosTest #test99AssertCardExpirationIsValidAndActive stamp: 'h 10/30/2023 19:09:19'!
PASSED!

!testRun: #TusLibrosTest #testxxCannotCreateCartWhitInvalidIdOrPassword stamp: 'h 10/30/2023 19:09:19'!
PASSED!

!testRun: #TusLibrosTest #test01CartWithIsEmpty stamp: 'h 10/30/2023 19:09:22'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:09:23'!
PASSED!

!classDefinition: #Editorial category: 'TusLibros' stamp: 'h 10/30/2023 19:23:55'!
Object subclass: #Editorial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:23:40'!
test03CartCannotAddBookWhichDoesNotBelongToTheEditorial

	|cart editorial|
	
	cart := Cart new.
	editorial := Editorial new.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].
	
	self deny: cart isEmpty.! !

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:24:03'!
FAILURE!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:24:03'!
FAILURE!
!Cart class methodsFor: 'errors' stamp: 'h 10/30/2023 19:24:46'!
cannotAddNonExistentBook

	^'cannot add non existent book'! !

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:26:59'!
FAILURE!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:26:59'!
FAILURE!
!Cart methodsFor: 'add' stamp: 'h 10/30/2023 19:27:36' prior: 50650523!
add: aBook

	self assertCanAddBook: aBook .
	books add: aBook .
	
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:38:10' prior: 50650560!
test03CartCannotAddBookWhichDoesNotBelongToTheEditorial

	|cart availableBooks|
	
	cart := Cart new.
	availableBooks := OrderedCollection new.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].! !

!classRemoval: #Editorial stamp: 'h 10/30/2023 19:38:31'!
Object subclass: #Editorial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'assert' stamp: 'h 10/30/2023 19:41:00'!
assertCanAddBook: aBook 

	(books isIncluded: aBook )ifTrue: [self class cannotAddNonExistentBook ].! !

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:41:08'!
ERROR!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:41:08'!
ERROR!

!testRun: #TusLibrosTest #test01CartWithIsEmpty stamp: 'h 10/30/2023 19:41:14'!
PASSED!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:41:15'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:42:11' prior: 50650494!
test02CartWithAddedBookIsNotEmpty

	|cart|
	
	cart := Cart withBooks: (OrderedCollection new add: #libro;yourself).
	cart add: #libro.
	
	self deny: cart isEmpty.! !

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:42:13'!
ERROR!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:42:13'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'h 10/30/2023 19:42:17'!
withBooks: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithBooks: aRenameMe1 ! !
!Cart class methodsFor: 'instance creation' stamp: 'h 10/30/2023 19:42:33' prior: 50650648!
withBooks: availableBooks

	^self new initializeWithBooks: availableBooks ! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'h 10/30/2023 19:42:50'!
Object subclass: #Cart
	instanceVariableNames: 'books availableBooks_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialize' stamp: 'h 10/30/2023 19:42:50'!
initializeWithBooks: availableBooks 
	self shouldBeImplemented.
	availableBooks_CHANGE_ME := availableBooks.! !
!Cart methodsFor: 'initialize' stamp: 'h 10/30/2023 19:42:57' prior: 50650669!
initializeWithBooks: availableBooks 
	
	books := availableBooks.! !

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:43:03'!
ERROR!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:43:03'!
ERROR!
!Cart methodsFor: 'assert' stamp: 'h 10/30/2023 19:43:39' prior: 50650614!
assertCanAddBook: aBook 

	(books includes: aBook )ifTrue: [self class cannotAddNonExistentBook ].! !

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:43:41'!
FAILURE!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:43:41'!
FAILURE!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:43:44'!
PASSED!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:43:51'!
FAILURE!
!Cart methodsFor: 'assert' stamp: 'h 10/30/2023 19:44:17' prior: 50650686!
assertCanAddBook: aBook 

	(books includes: aBook )ifFalse: [self class cannotAddNonExistentBook ].! !

!testRun: #TusLibrosTest #test01CartWithIsEmpty stamp: 'h 10/30/2023 19:44:18'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:44:18'!
PASSED!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:44:18'!
FAILURE!

!testRun: #TusLibrosTest #test99AssertCardExpirationIsValidAndActive stamp: 'h 10/30/2023 19:44:18'!
PASSED!

!testRun: #TusLibrosTest #testxxCannotCreateCartWhitInvalidIdOrPassword stamp: 'h 10/30/2023 19:44:18'!
PASSED!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:44:18'!
FAILURE!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:44:21'!
FAILURE!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:44:21'!
FAILURE!
!Cart methodsFor: 'assert' stamp: 'h 10/30/2023 19:44:42' prior: 50650707!
assertCanAddBook: aBook 

	(books includes: aBook )ifFalse: [self error: self class cannotAddNonExistentBook ].! !

!testRun: #TusLibrosTest #test01CartWithIsEmpty stamp: 'h 10/30/2023 19:44:44'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:44:44'!
PASSED!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:44:44'!
PASSED!

!testRun: #TusLibrosTest #test99AssertCardExpirationIsValidAndActive stamp: 'h 10/30/2023 19:44:44'!
PASSED!

!testRun: #TusLibrosTest #testxxCannotCreateCartWhitInvalidIdOrPassword stamp: 'h 10/30/2023 19:44:44'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:46:22'!
test03CartCannotAddBookWhichDoesNotAvailable

	|cart availableBooks|
	
	cart := Cart new.
	availableBooks := OrderedCollection new.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].! !

!methodRemoval: TusLibrosTest #test03CartCannotAddBookWhichDoesNotBelongToTheEditorial stamp: 'h 10/30/2023 19:46:22'!
test03CartCannotAddBookWhichDoesNotBelongToTheEditorial

	|cart availableBooks|
	
	cart := Cart new.
	availableBooks := OrderedCollection new.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:54:28'!
test04CartCanAddMultipleBooks

	|cart availableBooks|
	
	cart := Cart new.
	availableBooks := OrderedCollection new.
	availableBooks add: #libro. availableBooks add: #libro2.
	cart add: #libro. cart add: #libro2.
	
	self assert: (cart hasBook: #libro) .
	self assert: (cart hasbook: #libro2).
	! !

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:54:29'!
ERROR!

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:54:29'!
ERROR!
!Cart methodsFor: 'error handling' stamp: 'h 10/30/2023 19:54:32' overrides: 16902107!
error: aRenameMe1 
	self shouldBeImplemented.! !

!methodRemoval: Cart #error: stamp: 'h 10/30/2023 19:54:40'!
error: aRenameMe1 
	self shouldBeImplemented.!
!Cart methodsFor: 'test' stamp: 'h 10/30/2023 19:54:57'!
hasBook: aBook
	
	^books includes: aBook .! !

!testRun: #TusLibrosTest #test01CartWithIsEmpty stamp: 'h 10/30/2023 19:54:58'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 10/30/2023 19:54:58'!
PASSED!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotAvailable stamp: 'h 10/30/2023 19:54:58'!
PASSED!

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:54:58'!
ERROR!

!testRun: #TusLibrosTest #test99AssertCardExpirationIsValidAndActive stamp: 'h 10/30/2023 19:54:58'!
PASSED!

!testRun: #TusLibrosTest #testxxCannotCreateCartWhitInvalidIdOrPassword stamp: 'h 10/30/2023 19:54:58'!
PASSED!

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:54:58'!
ERROR!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:55:36' prior: 50650788!
test04CartCanAddMultipleBooks

	|cart availableBooks|
	
	availableBooks := OrderedCollection new.
	cart := Cart with: availableBooks .
	availableBooks := OrderedCollection new.
	availableBooks add: #libro. availableBooks add: #libro2.
	cart add: #libro. cart add: #libro2.
	
	self assert: (cart hasBook: #libro) .
	self assert: (cart hasbook: #libro2).
	! !

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:55:37'!
ERROR!

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:55:37'!
ERROR!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:55:46' prior: 50650841!
test04CartCanAddMultipleBooks

	|cart availableBooks|
	
	availableBooks := OrderedCollection new.
	cart := Cart withBooks: availableBooks .
	availableBooks := OrderedCollection new.
	availableBooks add: #libro. availableBooks add: #libro2.
	cart add: #libro. cart add: #libro2.
	
	self assert: (cart hasBook: #libro) .
	self assert: (cart hasbook: #libro2).
	! !

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:55:46'!
ERROR!

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:55:46'!
ERROR!

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:55:51'!
ERROR!

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:55:51'!
ERROR!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:56:11' prior: 50650862!
test04CartCanAddMultipleBooks

	|cart availableBooks|
	
	availableBooks := OrderedCollection new.
	availableBooks add: #libro. availableBooks add: #libro2.
	cart := Cart withBooks: availableBooks .
	availableBooks := OrderedCollection new.
	cart add: #libro. cart add: #libro2.
	
	self assert: (cart hasBook: #libro) .
	self assert: (cart hasbook: #libro2).
	! !

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:56:12'!
ERROR!

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:56:12'!
ERROR!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:56:18' prior: 50650889!
test04CartCanAddMultipleBooks

	|cart availableBooks|
	
	availableBooks := OrderedCollection new.
	availableBooks add: #libro. availableBooks add: #libro2.
	cart := Cart withBooks: availableBooks .
	availableBooks := OrderedCollection new.
	cart add: #libro. cart add: #libro2.
	
	self assert: (cart hasBook: #libro) .
	self assert: (cart hasBook: #libro2).
	! !

!testRun: #TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 10/30/2023 19:56:18'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 19:57:16' prior: 50650764!
test03CartCannotAddBookWhichDoesNotAvailable

	|cart |
	
	cart := Cart new.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].! !

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichDoesNotAvailable stamp: 'h 10/30/2023 19:57:19'!
PASSED!

----QUIT----(30 October 2023 20:32:52) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (30 October 2023 20:33:00) as /home/clinux01/Descargas/linux64(1)/linux64/CuisUniversity-5981.image!


----QUIT----(30 October 2023 20:33:03) CuisUniversity-5981.image priorSource: 10217284!

----STARTUP---- (30 October 2023 20:33:39) as /home/clinux01/Descargas/linux64(1)/linux64/CuisUniversity-5981.image!

!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 20:34:02' prior: 50650910!
test04CartCanAddMultipleBooks

	"dudoso test"

	|cart availableBooks|
	
	availableBooks := OrderedCollection new.
	availableBooks add: #libro. availableBooks add: #libro2.
	cart := Cart withBooks: availableBooks .
	availableBooks := OrderedCollection new.
	cart add: #libro. cart add: #libro2.
	
	self assert: (cart hasBook: #libro) .
	self assert: (cart hasBook: #libro2).
	! !

----QUIT----(30 October 2023 20:34:06) CuisUniversity-5981.image priorSource: 10217492!

----STARTUP---- (2 November 2023 14:33:57) as C:\Users\Intekio\Desktop\windows64\CuisUniversity-5981.image!

!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 14:34:26'!
test03CartCannotAddBookWhichIsNotAvailable

	|cart |
	
	cart := Cart new.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].! !

!methodRemoval: TusLibrosTest #test03CartCannotAddBookWhichDoesNotAvailable stamp: 'h 11/2/2023 14:34:26'!
test03CartCannotAddBookWhichDoesNotAvailable

	|cart |
	
	cart := Cart new.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 14:34:45'!
test01CartIsEmpty

	|cart|
	
	cart := Cart new.
	
	self assert: cart isEmpty.! !

!methodRemoval: TusLibrosTest #test01CartWithIsEmpty stamp: 'h 11/2/2023 14:34:45'!
test01CartWithIsEmpty

	|cart|
	
	cart := Cart new.
	
	self assert: cart isEmpty.!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 14:35:23'!
test01AtStartCartIsEmpty

	|cart|
	
	cart := Cart new.
	
	self assert: cart isEmpty.! !

!methodRemoval: TusLibrosTest #test01CartIsEmpty stamp: 'h 11/2/2023 14:35:23'!
test01CartIsEmpty

	|cart|
	
	cart := Cart new.
	
	self assert: cart isEmpty.!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 14:37:47'!
test04CartCanListItsBooks

	|cart availableBooks|
	
	availableBooks := OrderedCollection new.
	availableBooks add: #libro. availableBooks add: #libro2.
	cart := Cart withBooks: availableBooks .
	availableBooks := OrderedCollection new.
	cart add: #libro. cart add: #libro2.
	
	self assert: (cart listBooks includes: #libro) .
	self assert: (cart listBooks includes: #libro2).
	self assert: cart listBooks size equals: 2.
	! !

!methodRemoval: TusLibrosTest #test04CartCanAddMultipleBooks stamp: 'h 11/2/2023 14:37:52'!
test04CartCanAddMultipleBooks

	"dudoso test"

	|cart availableBooks|
	
	availableBooks := OrderedCollection new.
	availableBooks add: #libro. availableBooks add: #libro2.
	cart := Cart withBooks: availableBooks .
	availableBooks := OrderedCollection new.
	cart add: #libro. cart add: #libro2.
	
	self assert: (cart hasBook: #libro) .
	self assert: (cart hasBook: #libro2).
	!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 14:37:55'!
ERROR!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 14:37:55'!
ERROR!
!Cart methodsFor: 'list' stamp: 'h 11/2/2023 14:38:07'!
listBooks
	self shouldBeImplemented.! !
!Cart methodsFor: 'list' stamp: 'h 11/2/2023 14:38:50' prior: 50651054!
listBooks
	
	^books! !

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 14:38:54'!
FAILURE!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 14:38:54'!
FAILURE!

Object subclass: #Cart
	instanceVariableNames: 'books availableBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Cart
	instanceVariableNames: 'books availableBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialize' stamp: 'h 11/2/2023 14:40:48' prior: 50650675!
initializeWithBooks: listOfvailableBooks 
	
	books := listOfvailableBooks .! !

Object subclass: #Cart
	instanceVariableNames: 'books availableBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'h 11/2/2023 14:40:54'!
Object subclass: #Cart
	instanceVariableNames: 'books availableBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialize' stamp: 'h 11/2/2023 14:41:09' prior: 50651076!
initializeWithBooks: listOfvailableBooks 
	
	books := OrderedCollection new.
	availableBooks := listOfvailableBooks .! !
!Cart methodsFor: 'initialize' stamp: 'h 11/2/2023 14:41:17' prior: 50650527 overrides: 16920235!
initialize

	books := OrderedCollection new.
	availableBooks := OrderedCollection new.! !
!Cart methodsFor: 'assert' stamp: 'h 11/2/2023 14:41:49' prior: 50650741!
assertCanAddBook: aBook 

	(availableBooks includes: aBook )ifFalse: [self error: self class cannotAddNonExistentBook ].! !

!testRun: #TusLibrosTest #test01AtStartCartIsEmpty stamp: 'h 11/2/2023 14:42:11'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 11/2/2023 14:42:11'!
PASSED!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichIsNotAvailable stamp: 'h 11/2/2023 14:42:11'!
PASSED!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 14:42:11'!
PASSED!

!testRun: #TusLibrosTest #test99AssertCardExpirationIsValidAndActive stamp: 'h 11/2/2023 14:42:11'!
PASSED!

!testRun: #TusLibrosTest #testxxCannotCreateCartWhitInvalidIdOrPassword stamp: 'h 11/2/2023 14:42:11'!
PASSED!

!methodRemoval: TusLibrosTest #test99AssertCardExpirationIsValidAndActive stamp: 'h 11/2/2023 14:42:31'!
test99AssertCardExpirationIsValidAndActive
	'isnt usable deberia ser. De todas formas esto lo checkeo el merchant processor'!

!methodRemoval: TusLibrosTest #testxxCannotCreateCartWhitInvalidIdOrPassword stamp: 'h 11/2/2023 14:42:46'!
testxxCannotCreateCartWhitInvalidIdOrPassword!

----QUIT----(2 November 2023 14:43:44) CuisUniversity-5981.image priorSource: 10218202!

----STARTUP---- (2 November 2023 14:45:49) as C:\Users\Intekio\Desktop\windows64\CuisUniversity-5981.image!


#(1,2,3) detect: [:anElement | anElement = 2]!

#(1,2,3) detect: [:anElement | anElement = 3]!

#(1,2,3) detect: [:anElement | anElement = 1]!

#(1,2,3) detect: [:anElement | anElement = 0]!

(Dictionary new at: 'ss' put: 1;yourself) includes: 'ss'!

(Dictionary new at: 'ss' put: 1;yourself)!

(Dictionary new at: 'ss' put: 1;yourself) includes: 1!

(Dictionary new at: 'ss' put: 1;yourself) includesKey: 'ss'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 14:57:55'!
test05CartCanListItsBooksWithQuantities

	|cart availableBooks listElement|
	
	availableBooks := Dictionary new .
	availableBooks at: #libro put: 2.
	cart := Cart withBooks: availableBooks .
	cart add: #libro. cart add: #libro.
	
	listElement := OrderedCollection new. listElement add: #libro. listElement add: 2.
	
	self assert: (cart listBooks includes: listElement) .
	self assert: cart listBooks size equals: 1.
	! !

!testRun: #TusLibrosTest #test05CartCanListItsBooksWithQuantities stamp: 'h 11/2/2023 14:57:57'!
ERROR!

!testRun: #TusLibrosTest #test05CartCanListItsBooksWithQuantities stamp: 'h 11/2/2023 14:57:57'!
ERROR!
!Cart methodsFor: 'initialize' stamp: 'h 11/2/2023 14:58:16' prior: 50651100 overrides: 16920235!
initialize

	books := OrderedCollection new.
	availableBooks := Dictionary new.! !
!Cart methodsFor: 'initialize' stamp: 'h 11/2/2023 14:59:07' prior: 50651186 overrides: 16920235!
initialize

	books := Dictionary new.
	availableBooks := Dictionary new.! !
!Cart methodsFor: 'initialize' stamp: 'h 11/2/2023 14:59:15' prior: 50651093!
initializeWithBooks: listOfvailableBooks 
	
	books := Dictionary new.
	availableBooks := listOfvailableBooks .! !
!Cart methodsFor: 'add' stamp: 'h 11/2/2023 15:00:38' prior: 50650591!
add: aBook

	self assertCanAddBook: aBook .
	
	books at: aBook put: (books at: aBook ifAbsent: [0])+1.
	
	! !
!Cart methodsFor: 'assert' stamp: 'h 11/2/2023 15:00:50' prior: 50651106!
assertCanAddBook: aBook 

	(availableBooks includesKey: aBook )ifFalse: [self error: self class cannotAddNonExistentBook ].! !
!Cart methodsFor: 'test' stamp: 'h 11/2/2023 15:01:06' prior: 50650814!
hasBook: aBook
	
	^books includesKey: aBook .! !

!testRun: #TusLibrosTest #test05CartCanListItsBooksWithQuantities stamp: 'h 11/2/2023 15:01:08'!
FAILURE!

!testRun: #TusLibrosTest #test05CartCanListItsBooksWithQuantities stamp: 'h 11/2/2023 15:01:08'!
FAILURE!

(Dictionary new at: 'ss' put: 1;yourself) collect: [:algo | algo +1]!

(Dictionary new at: 'ss' put: 1;yourself) collect: [:algo | '']!
!Cart methodsFor: 'list' stamp: 'h 11/2/2023 15:07:28' prior: 50651058!
listBooks
	
	|list|
	list := OrderedCollection new.
	
	books keys do: [:aBook| |listElement| 
		listElement := OrderedCollection new. 
		listElement add: aBook .
		listElement add:( books at: aBook ).
		list add: listElement .
		].
	
	^list! !

!testRun: #TusLibrosTest #test05CartCanListItsBooksWithQuantities stamp: 'h 11/2/2023 15:07:30'!
PASSED!

!testRun: #TusLibrosTest #test01AtStartCartIsEmpty stamp: 'h 11/2/2023 15:07:33'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 11/2/2023 15:07:33'!
ERROR!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichIsNotAvailable stamp: 'h 11/2/2023 15:07:33'!
PASSED!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 15:07:33'!
ERROR!

!testRun: #TusLibrosTest #test05CartCanListItsBooksWithQuantities stamp: 'h 11/2/2023 15:07:33'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 11/2/2023 15:07:50'!
ERROR!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 11/2/2023 15:07:50'!
ERROR!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 15:08:19' prior: 50650634!
test02CartWithAddedBookIsNotEmpty

	|cart|
	
	cart := Cart withBooks: (Dictionary new at: #libro put: 1;yourself).
	cart add: #libro.
	
	self deny: cart isEmpty.! !

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 11/2/2023 15:08:22'!
PASSED!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichIsNotAvailable stamp: 'h 11/2/2023 15:08:23'!
PASSED!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 15:08:31'!
ERROR!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 15:08:31'!
ERROR!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 15:08:57' prior: 50651018!
test04CartCanListItsBooks

	|cart availableBooks|
	
	availableBooks := Dictionary new.
	availableBooks at: #libro put: 1. availableBooks at: #libro2 put: 1.
	cart := Cart withBooks: availableBooks .
	availableBooks := OrderedCollection new.
	cart add: #libro. cart add: #libro2.
	
	self assert: (cart listBooks includes: #libro) .
	self assert: (cart listBooks includes: #libro2).
	self assert: cart listBooks size equals: 2.
	! !

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 15:08:57'!
FAILURE!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 15:08:57'!
FAILURE!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 15:09:24' prior: 50651288!
test04CartCanListItsBooks

	|cart availableBooks|
	
	availableBooks := Dictionary new.
	availableBooks at: #libro put: 1. availableBooks at: #libro2 put: 1.
	cart := Cart withBooks: availableBooks .
	availableBooks := OrderedCollection new.
	cart add: #libro. cart add: #libro2.
	
	self assert: (cart listBooks first includes: #libro) .
	self assert: (cart listBooks second includes: #libro2).
	self assert: cart listBooks size equals: 2.
	! !

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 15:09:25'!
PASSED!
!Cart methodsFor: 'assert' stamp: 'h 11/2/2023 15:11:29' prior: 50651209!
assertCanAddBook: aBook 

	(availableBooks includesKey: aBook )ifFalse: [self error: self class cannotAddNonExistentBook ].
	(books at: aBook) < availableBooks at: aBook .! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 15:13:24'!
test03CartCannotAddBookIfItSurpassesTheBookQuantitie

	|cart availableBooks|
	
	availableBooks := Dictionary new at: #libro put: 1;yourself.
	cart := Cart new. cart add: #libro.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].! !

!testRun: #TusLibrosTest #test03CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'h 11/2/2023 15:13:30'!
ERROR!

!testRun: #TusLibrosTest #test03CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'h 11/2/2023 15:13:30'!
ERROR!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 15:13:51' prior: 50651339!
test03CartCannotAddBookIfItSurpassesTheBookQuantitie

	|cart availableBooks|
	
	availableBooks := Dictionary new at: #libro put: 1;yourself.
	cart := Cart withBooks: availableBooks . cart add: #libro.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].! !

!testRun: #TusLibrosTest #test03CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'h 11/2/2023 15:13:52'!
ERROR!

!testRun: #TusLibrosTest #test03CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'h 11/2/2023 15:13:52'!
ERROR!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 15:14:05'!
test06CartCannotAddBookIfItSurpassesTheBookQuantitie

	|cart availableBooks|
	
	availableBooks := Dictionary new at: #libro put: 1;yourself.
	cart := Cart withBooks: availableBooks . cart add: #libro.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].! !

!methodRemoval: TusLibrosTest #test03CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'h 11/2/2023 15:14:06'!
test03CartCannotAddBookIfItSurpassesTheBookQuantitie

	|cart availableBooks|
	
	availableBooks := Dictionary new at: #libro put: 1;yourself.
	cart := Cart withBooks: availableBooks . cart add: #libro.
	
	self should: [cart add: #libro] 
	raise: Error
	withExceptionDo: [:anError | anError messageText = Cart cannotAddNonExistentBook].!

!testRun: #TusLibrosTest #test06CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'h 11/2/2023 15:14:50'!
ERROR!

!testRun: #TusLibrosTest #test06CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'h 11/2/2023 15:14:50'!
ERROR!
!Cart methodsFor: 'assert' stamp: 'h 11/2/2023 15:15:51' prior: 50651331!
assertCanAddBook: aBook 

	(availableBooks includesKey: aBook )ifFalse: [self error: self class cannotAddNonExistentBook ].
	(books at: aBook ifAbsent: [0]) < availableBooks at: aBook .! !

!testRun: #TusLibrosTest #test01AtStartCartIsEmpty stamp: 'h 11/2/2023 15:15:52'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 11/2/2023 15:15:52'!
PASSED!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichIsNotAvailable stamp: 'h 11/2/2023 15:15:52'!
PASSED!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 15:15:52'!
PASSED!

!testRun: #TusLibrosTest #test05CartCanListItsBooksWithQuantities stamp: 'h 11/2/2023 15:15:53'!
PASSED!

!testRun: #TusLibrosTest #test06CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'h 11/2/2023 15:15:53'!
FAILURE!

!testRun: #TusLibrosTest #test06CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'h 11/2/2023 15:15:53'!
FAILURE!

cart!

cart!
!Cart methodsFor: 'assert' stamp: 'h 11/2/2023 15:17:41' prior: 50651416!
assertCanAddBook: aBook 

	(availableBooks includesKey: aBook )ifFalse: [self error: self class cannotAddNonExistentBook ].
	((books at: aBook ifAbsent: [0]) < availableBooks at: aBook )ifFalse: [
		self error: self class cannotAddNonExistentBook
		].! !

!testRun: #TusLibrosTest #test01AtStartCartIsEmpty stamp: 'h 11/2/2023 15:17:42'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'h 11/2/2023 15:17:42'!
PASSED!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichIsNotAvailable stamp: 'h 11/2/2023 15:17:42'!
PASSED!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'h 11/2/2023 15:17:42'!
PASSED!

!testRun: #TusLibrosTest #test05CartCanListItsBooksWithQuantities stamp: 'h 11/2/2023 15:17:42'!
PASSED!

!testRun: #TusLibrosTest #test06CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'h 11/2/2023 15:17:42'!
PASSED!

!classDefinition: #Book category: 'TusLibros' stamp: 'h 11/2/2023 15:23:29'!
Object subclass: #Book
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'h 11/2/2023 15:23:19'!
test07CartKnowsTotalCostOfItsBooks

	|cart availableBooks |
	
	availableBooks := Dictionary new .
	availableBooks at: (Book named: #libro withCost: 10) put: 1.
	cart := Cart withBooks: availableBooks .
	cart add: #libro. 
	
	self assert: cart totalCost equals: 10.
	! !

!testRun: #TusLibrosTest #test07CartKnowsTotalCostOfItsBooks stamp: 'h 11/2/2023 15:23:35'!
ERROR!

!testRun: #TusLibrosTest #test07CartKnowsTotalCostOfItsBooks stamp: 'h 11/2/2023 15:23:35'!
ERROR!
!Book class methodsFor: 'instance creation' stamp: 'h 11/2/2023 15:23:40'!
named: aRenameMe1 withCost: aRenameMe2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aRenameMe1 withCost: aRenameMe2 ! !
!Book class methodsFor: 'instance creation' stamp: 'h 11/2/2023 15:25:05' prior: 50651502!
named: bookName withCost: bookCost

	^self new initializeNamed: bookName withCost: bookCost ! !

!classDefinition: #Book category: 'TusLibros' stamp: 'h 11/2/2023 15:25:32'!
Object subclass: #Book
	instanceVariableNames: 'bookName_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Book category: 'TusLibros' stamp: 'h 11/2/2023 15:25:32'!
Object subclass: #Book
	instanceVariableNames: 'bookName_CHANGE_ME bookCost_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Book methodsFor: 'initialize' stamp: 'h 11/2/2023 15:25:32'!
initializeNamed: bookName withCost: bookCost 
	self shouldBeImplemented.
	bookName_CHANGE_ME := bookName.
	bookCost_CHANGE_ME := bookCost.! !

!classDefinition: #Book category: 'TusLibros' stamp: 'h 11/2/2023 15:25:48'!
Object subclass: #Book
	instanceVariableNames: 'bookName_CHANGE_ME bookCost_CHANGE_ME name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Book category: 'TusLibros' stamp: 'h 11/2/2023 15:25:50'!
Object subclass: #Book
	instanceVariableNames: 'bookName_CHANGE_ME bookCost_CHANGE_ME name cost'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Book methodsFor: 'initialize' stamp: 'h 11/2/2023 15:25:47' prior: 50651532!
initializeNamed: bookName withCost: bookCost 
	
	name := bookName.
	cost := bookCost.! !

!testRun: #TusLibrosTest #test07CartKnowsTotalCostOfItsBooks stamp: 'h 11/2/2023 15:25:56'!
ERROR!

!testRun: #TusLibrosTest #test07CartKnowsTotalCostOfItsBooks stamp: 'h 11/2/2023 15:25:56'!
ERROR!
!Cart methodsFor: 'costs' stamp: 'h 11/2/2023 15:26:43'!
totalCost

	^books first cost! !
!Book methodsFor: 'cost' stamp: 'h 11/2/2023 15:26:58'!
cost

	^cost! !

!testRun: #TusLibrosTest #test07CartKnowsTotalCostOfItsBooks stamp: 'h 11/2/2023 15:27:06'!
ERROR!

!testRun: #TusLibrosTest #test07CartKnowsTotalCostOfItsBooks stamp: 'h 11/2/2023 15:27:06'!
ERROR!
!Book methodsFor: 'name' stamp: 'h 11/2/2023 15:30:09' overrides: 16903442!
name
	
	^name! !
!Cart methodsFor: 'assert' stamp: 'h 11/2/2023 15:32:07' prior: 50651448!
assertCanAddBook: aBookName

	(availableBooks keys anySatisfy: [:aBook | aBook name = aBookName ]) ifFalse: [self error: self class cannotAddNonExistentBook ].
	
	((books at: aBookName ifAbsent: [0]) < availableBooks at: aBookName )ifFalse: [
		self error: self class cannotAddNonExistentBook
		].! !

!testRun: #TusLibrosTest #test07CartKnowsTotalCostOfItsBooks stamp: 'h 11/2/2023 15:32:10'!
ERROR!

!testRun: #TusLibrosTest #test07CartKnowsTotalCostOfItsBooks stamp: 'h 11/2/2023 15:32:10'!
ERROR!

----QUIT----(2 November 2023 15:33:14) CuisUniversity-5981.image priorSource: 10223780!

----STARTUP---- (2 November 2023 16:20:02) as C:\Users\Manuel Urkovich\Facu\Inge1\TusLibros\windows64\CuisUniversity-5981.image!


!testRun: #TusLibrosTest #test01AtStartCartIsEmpty stamp: 'mm uu 11/2/2023 16:20:37'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'mm uu 11/2/2023 16:20:37'!
ERROR!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichIsNotAvailable stamp: 'mm uu 11/2/2023 16:20:37'!
PASSED!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'mm uu 11/2/2023 16:20:37'!
ERROR!

!testRun: #TusLibrosTest #test05CartCanListItsBooksWithQuantities stamp: 'mm uu 11/2/2023 16:20:37'!
ERROR!

!testRun: #TusLibrosTest #test06CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'mm uu 11/2/2023 16:20:37'!
ERROR!

!testRun: #TusLibrosTest #test07CartKnowsTotalCostOfItsBooks stamp: 'mm uu 11/2/2023 16:20:37'!
ERROR!

!testRun: #TusLibrosTest #test01AtStartCartIsEmpty stamp: 'mm uu 11/2/2023 16:21:45'!
PASSED!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'mm uu 11/2/2023 16:21:45'!
ERROR!

!testRun: #TusLibrosTest #test03CartCannotAddBookWhichIsNotAvailable stamp: 'mm uu 11/2/2023 16:21:45'!
PASSED!

!testRun: #TusLibrosTest #test04CartCanListItsBooks stamp: 'mm uu 11/2/2023 16:21:45'!
ERROR!

!testRun: #TusLibrosTest #test05CartCanListItsBooksWithQuantities stamp: 'mm uu 11/2/2023 16:21:45'!
ERROR!

!testRun: #TusLibrosTest #test06CartCannotAddBookIfItSurpassesTheBookQuantitie stamp: 'mm uu 11/2/2023 16:21:45'!
ERROR!

!testRun: #TusLibrosTest #test07CartKnowsTotalCostOfItsBooks stamp: 'mm uu 11/2/2023 16:21:45'!
ERROR!

!testRun: #TusLibrosTest #test02CartWithAddedBookIsNotEmpty stamp: 'mm uu 11/2/2023 16:21:47'!
ERROR!

----STARTUP---- (2 November 2023 18:27:10) as C:\Users\Manuel Urkovich\Facu\Inge1\TusLibros\windows64\CuisUniversity-5981.image!


!classRemoval: #Cart stamp: 'mm uu 11/2/2023 18:27:28'!
Object subclass: #Cart
	instanceVariableNames: 'books availableBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Book stamp: 'mm uu 11/2/2023 18:27:28'!
Object subclass: #Book
	instanceVariableNames: 'bookName_CHANGE_ME bookCost_CHANGE_ME name cost'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TusLibrosTest stamp: 'mm uu 11/2/2023 18:27:28'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Manuel Urkovich\Facu\Inge1\TusLibros\windows64\TusLibros.st----!

----SNAPSHOT----(2 November 2023 18:27:41) CuisUniversity-5981.image priorSource: 10238388!

----SNAPSHOT----(2 November 2023 18:27:49) CuisUniversity-5981.image priorSource: 10246764!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/2/2023 18:28:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/2/2023 18:28:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/2/2023 18:28:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/2/2023 18:28:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/2/2023 18:28:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/2/2023 18:28:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/2/2023 18:28:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/2/2023 18:28:00'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'mm uu 11/2/2023 18:31:10'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mm uu 11/2/2023 18:41:40'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'mm uu 11/2/2023 18:41:34'!
test01
	|cashier cart|
	cashier := Cashier new.
	cart := Cart.
	
	self 
		should: [cashier checkout: cart]
		raise: Error
		withExceptionDo: [:anError |
			anError messageText = 'cart is empty'
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:41:49' prior: 50651911!
test01
	|cashier cart|
	cashier := Cashier new.
	cart := CartTest new createCart .
	
	self 
		should: [cashier checkout: cart]
		raise: Error
		withExceptionDo: [:anError |
			anError messageText = 'cart is empty'
		].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:41:51'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:42:54' prior: 50651921!
test01
	|cashier cart|
	cashier := Cashier new.
	cart := CartTest new createCart .
	
	self 
		should: [cashier checkout: cart]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: 'cart is empty'
		].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:42:55'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:42:55'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:43:06' prior: 50651934!
test01
	|cashier cart|
	cashier := Cashier new.
	cart := CartTest new createCart .
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: 'cart is empty'
		].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:43:08'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:43:08'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:43:15'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:43:15'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 18:43:22'!
checkout: cart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 18:43:48' prior: 50651970!
checkout: cart 
	cart isEmpty ifTrue: [^self error: 'cart is empty'].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:43:51'!
PASSED!
!Cashier class methodsFor: 'no messages' stamp: 'mm uu 11/2/2023 18:44:08'!
cartIsEmptyErrorMessage
	^'cart is empty'! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 18:44:21' prior: 50651975!
checkout: cart 
	cart isEmpty ifTrue: [^self error: self class cartIsEmptyErrorMessage ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:44:37' prior: 50651950!
test01
	|cashier cart|
	cashier := Cashier new.
	cart := CartTest new createCart .
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: cashier class cartIsEmptyErrorMessage 
		].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:44:38'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:45:27'!
test02
	|cashier cart|
	cashier := Cashier new.
	cart := CartTest new createCart .
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: cashier class cartIsEmptyErrorMessage 
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:46:24' prior: 50651992!
test01
	|cashier cart|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: cashier class cartIsEmptyErrorMessage 
		].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:46:26'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:47:54' prior: 50652006!
test02
	|cashier cart|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	cart add.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: cashier class cartIsEmptyErrorMessage 
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:48:24' prior: 50652035!
test02
	|cashier cart|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	cart add: 'validBook'.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: cashier class cartIsEmptyErrorMessage 
		].! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 18:48:26'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 18:48:26'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:54:47' prior: 50652019!
test01
	|cashier cart |
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 
			creditCardExpiration: 082023 
			creditCardHolder: 'manu']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: cashier class cartIsEmptyErrorMessage 
		].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:54:51'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:54:51'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 18:55:05'!
checkout: cart withCreditCardNumber: aRenameMe1 creditCardExpiration: aRenameMe2 creditCardHolder: aRenameMe3 
	self shouldBeImplemented.! !

!classDefinition: #Card category: 'TusLibros' stamp: 'mm uu 11/2/2023 18:57:20'!
Object subclass: #Card
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:57:18' prior: 50652068!
test01
	|cashier cart card|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	card := Card withNumber: 1 expiration: 082024 cardHolder: 'manu'.
	
	self 
		should: [cashier checkout: cart with: card]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: cashier class cartIsEmptyErrorMessage 
		].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:57:25'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:57:25'!
ERROR!
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 18:58:10'!
withNumber: aRenameMe1 expiration: aRenameMe2 cardHolder: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aRenameMe1 expiration: aRenameMe2 cardHolder: aRenameMe3 ! !
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 18:58:19' prior: 50652122!
withNumber: aRenameMe1 expiration: aRenameMe2 cardHolder: aRenameMe3 
	^self new initializeWithNumber: aRenameMe1 expiration: aRenameMe2 cardHolder: aRenameMe3 ! !
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 18:58:26' prior: 50652134!
withNumber: creditCardNumber expiration: aRenameMe2 cardHolder: aRenameMe3 
	^self new initializeWithNumber: creditCardNumber expiration: aRenameMe2 cardHolder: aRenameMe3 ! !
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 18:58:32' prior: 50652143!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: aRenameMe3 
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: aRenameMe3 ! !
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 18:58:44' prior: 50652152!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:58:50'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:58:50'!
ERROR!

!classDefinition: #Card category: 'TusLibros' stamp: 'mm uu 11/2/2023 18:58:59'!
Object subclass: #Card
	instanceVariableNames: 'creditCardNumber_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'mm uu 11/2/2023 18:58:59'!
Object subclass: #Card
	instanceVariableNames: 'creditCardNumber_CHANGE_ME creditCardExpiration_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'mm uu 11/2/2023 18:58:59'!
Object subclass: #Card
	instanceVariableNames: 'creditCardNumber_CHANGE_ME creditCardExpiration_CHANGE_ME cardHolder_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'initialization' stamp: 'mm uu 11/2/2023 18:58:59'!
initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	self shouldBeImplemented.
	creditCardNumber_CHANGE_ME := creditCardNumber.
	creditCardExpiration_CHANGE_ME := creditCardExpiration.
	cardHolder_CHANGE_ME := cardHolder.! !
!Card methodsFor: 'initialization' stamp: 'mm uu 11/2/2023 18:59:12' prior: 50652199!
initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	creditCardNumber_CHANGE_ME := creditCardNumber.
	creditCardExpiration_CHANGE_ME := creditCardExpiration.
	cardHolder_CHANGE_ME := cardHolder.! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:59:16'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:59:16'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 18:59:22'!
checkout: cart with: card 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 18:59:45' prior: 50652226!
checkout: cart with: card 
	cart isEmpty ifTrue: [^self error: self class cartIsEmptyErrorMessage ]! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 18:59:49'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:04:17' prior: 50652049!
test02
	|cashier cart card|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	card := Card withNumber: 1 expiration: 082024 cardHolder: 'manu'.
	cart add: 'validBook'.
	
	cashier checkout: cart with: card! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 19:04:19'!
PASSED!
!Card methodsFor: 'initialization' stamp: 'mm uu 11/2/2023 19:04:56' prior: 50652211!
initializeWithNumber: aCreditCardNumber expiration: aCreditCardExpiration cardHolder: aCardHolder 
	creditCardNumber_CHANGE_ME := aCreditCardNumber.
	creditCardExpiration_CHANGE_ME := aCreditCardExpiration.
	cardHolder_CHANGE_ME := aCardHolder.! !

!classDefinition: #Card category: 'TusLibros' stamp: 'mm uu 11/2/2023 19:05:13'!
Object subclass: #Card
	instanceVariableNames: 'creditCardNumber creditCardExpiration_CHANGE_ME cardHolder_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:05:13' prior: 50652253!
initializeWithNumber: aCreditCardNumber expiration: aCreditCardExpiration cardHolder: aCardHolder 
	creditCardNumber := aCreditCardNumber.
	creditCardExpiration_CHANGE_ME := aCreditCardExpiration.
	cardHolder_CHANGE_ME := aCardHolder.! !

!classDefinition: #Card category: 'TusLibros' stamp: 'mm uu 11/2/2023 19:05:18'!
Object subclass: #Card
	instanceVariableNames: 'creditCardNumber creditCardExpiration cardHolder_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:05:18' prior: 50652273!
initializeWithNumber: aCreditCardNumber expiration: aCreditCardExpiration cardHolder: aCardHolder 
	creditCardNumber := aCreditCardNumber.
	creditCardExpiration := aCreditCardExpiration.
	cardHolder_CHANGE_ME := aCardHolder.! !

!classDefinition: #Card category: 'TusLibros' stamp: 'mm uu 11/2/2023 19:05:21'!
Object subclass: #Card
	instanceVariableNames: 'creditCardNumber creditCardExpiration cardHolder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:05:21' prior: 50652292!
initializeWithNumber: aCreditCardNumber expiration: aCreditCardExpiration cardHolder: aCardHolder 
	creditCardNumber := aCreditCardNumber.
	creditCardExpiration := aCreditCardExpiration.
	cardHolder := aCardHolder.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:07:08' prior: 50652240!
test02
	|cashier cart card|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	card := Card withNumber: 1 expiration: Date today cardHolder: 'manu'.
	cart add: 'validBook'.
	
	cashier checkout: cart with: card! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 18:54:47' prior: 50652102!
test01
	|cashier cart |
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 
			creditCardExpiration: 082023 
			creditCardHolder: 'manu']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: cashier class cartIsEmptyErrorMessage 
		].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 19:09:00'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 19:09:00'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 19:09:08'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 19:09:08'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:10:08' prior: 50652088!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ]! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 19:10:10'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 19:10:13'!
PASSED!

#('a', 'b')!

Date month: 8 year: 2023!

Date monthOfYear !

Date today!

01-01-2024!

01/01/2024!

Date new: 01/01/2024!

GregorianMonthOfYear year: 2023 monthNumber: 07!

Date today!

GregorianMonthOfYear current !

self previous !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:19:49' prior: 50652320!
test02
	|cashier cart card|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	card := Card withNumber: 1 expiration: (GregorianMonthOfYear current previous) cardHolder: 'manu'.
	
	cart add: 'validBook'.
	
	self 
		should: [cart 
			checkout: cart 
			withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current previous
			creditCardHolder: 'manucho']
		raise:  Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'card is expired'
		]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:19:55' prior: 50652378!
test02
	|cashier cart card|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	card := Card withNumber: 1 expiration: (GregorianMonthOfYear current previous) cardHolder: 'manu'.
	
	cart add: 'validBook'.
	
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current previous
			creditCardHolder: 'manucho']
		raise:  Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'card is expired'
		]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:20:02' prior: 50652398!
test02
	|cashier cart|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current previous
			creditCardHolder: 'manucho']
		raise:  Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'card is expired'
		]
	! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 19:20:05'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 19:20:05'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:20:58' prior: 50652356!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: 'card is expired'].! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 19:21:01'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 19:21:03'!
PASSED!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:21:27'!
cardIsExpiredErrorMessage
	^'card is expired'! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:21:38' prior: 50652439!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:22:00' prior: 50652418!
test02
	|cashier cart|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current previous
			creditCardHolder: 'manucho']
		raise:  Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage 
		]
	! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 19:22:01'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 19:32:20'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:34:32'!
test03
	|cashier cart|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
		
	self assert: cart isEmpty 
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:34:49'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:34:49'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:34:58'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:34:58'!
FAILURE!

!methodRemoval: Cashier #checkout: stamp: 'mm uu 11/2/2023 19:35:20'!
checkout: cart 
	cart isEmpty ifTrue: [^self error: self class cartIsEmptyErrorMessage ].!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:36:09' prior: 50652461!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].! !

GregorianMonthOfYear current previous!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:46:06' prior: 50652474!
test02
	|cashier cart|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current previous
			creditCardHolder: 'manucho']
		raise:  Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage .
			cart occurrencesOf: 'asd'.
		]
	! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 19:46:08'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:46:12' prior: 50652536!
test02
	|cashier cart|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current previous
			creditCardHolder: 'manucho']
		raise:  Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage .
	
		]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:46:13' prior: 50652556!
test02
	|cashier cart|
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current previous
			creditCardHolder: 'manucho']
		raise:  Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage .
		]
	! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 19:46:15'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:46:17'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:46:17'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:48:43' prior: 50652495!
test03
	|cashier cart|
	cashier := Cashier acceptingItemsOf: (Array with: 'validBook').
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
		
	self assert: cart isEmpty 
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:48:46'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:48:46'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 19:48:51'!
acceptingItemsOf: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAcceptingItemsOf: aRenameMe1 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 19:49:07' prior: 50652616!
acceptingItemsOf: acceptedItems
	^self new initializeAcceptingItemsOf: acceptedItems ! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:49:10'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:49:10'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mm uu 11/2/2023 19:49:16'!
Object subclass: #Cashier
	instanceVariableNames: 'acceptedItems_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:49:16'!
initializeAcceptingItemsOf: acceptedItems 
	self shouldBeImplemented.
	acceptedItems_CHANGE_ME := acceptedItems.! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:49:19' prior: 50652642!
initializeAcceptingItemsOf: acceptedItems
	acceptedItems_CHANGE_ME := acceptedItems.! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:50:10'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:50:10'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:50:17' prior: 50652597!
test03
	|cashier cart|
	cashier := Cashier acceptingItemsOf: (Array with: 'validBook').
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:50:19'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:51:16' prior: 50652522!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].! !
!Cart methodsFor: 'queries' stamp: 'mm uu 11/2/2023 19:51:46'!
items
	^items copy! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:52:58' prior: 50652675!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	cart items do: [: anItem |
		anItem 
	]! !

Object subclass: #Cashier
	instanceVariableNames: 'acceptedItemsList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mm uu 11/2/2023 19:53:11'!
Object subclass: #Cashier
	instanceVariableNames: 'acceptedItemsList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:53:16' prior: 50652649!
initializeAcceptingItemsOf: acceptedItems
	acceptedItemsList := acceptedItems.! !

----End fileIn of C:\Users\Manuel Urkovich\Facu\Inge1\TusLibros\windows64\Packages\TerseGuide.pck.st----!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 19:58:12' prior: 50652660!
test03
	|cashier cart cashierItems|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier acceptingItemsOf: (Array with: 'validBook').
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:58:51' prior: 50652691!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	cart items do: [: anItem | |test|
		test := acceptedItemsList at: anItem
	]! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:59:00'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:59:00'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 19:59:31' prior: 50655658!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	cart items do: [: anItem | |test|
		test := acceptedItemsList at: anItem ifAbsent: []
	]! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:59:36'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 19:59:36'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:00:04' prior: 50655642!
test03
	|cashier cart cashierItems|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier acceptingItemsOf: (cashierItems ).
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 20:00:06'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 20:01:21' prior: 50655678!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	cart items do: [: anItem | |test|
		test := acceptedItemsList at: anItem ifAbsent: [self error: self class itemNonExistantErrorMessage]
	]! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 20:03:00' prior: 50655716!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	|totalAmount|
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := 0.
	cart items do: [: anItem | | itemPrice |
		itemPrice := acceptedItemsList at: anItem ifAbsent: [self error: self class itemNonExistantErrorMessage].
		totalAmount := totalAmount + itemPrice
	].
	^totalAmount! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 20:03:05'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:03:49' prior: 50655698!
test03
	|cashier cart cashierItems checkoutPrice|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier acceptingItemsOf: (cashierItems ).
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	checkoutPrice := cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	
	self assert: checkoutPrice equals: 7
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 20:03:51'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:08:01' prior: 50655756!
test03
	|cashier cart cashierItems checkoutPrice|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashierItems add: #anotherValidBook -> 9.
	cashier := Cashier acceptingItemsOf: (cashierItems ).
	cart := Cart acceptingItemsOf: (Array with: 'validBook' with: 'anotherValidBook').
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	checkoutPrice := cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	
	self assert: checkoutPrice equals: 16
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:03:49' prior: 50655776!
test03
	|cashier cart cashierItems checkoutPrice|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier acceptingItemsOf: (cashierItems ).
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	cart add: 'validBook'.
	
	checkoutPrice := cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	
	self assert: checkoutPrice equals: 7
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 20:08:15'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:08:21'!
test04
	|cashier cart cashierItems checkoutPrice|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashierItems add: #anotherValidBook -> 9.
	cashier := Cashier acceptingItemsOf: (cashierItems ).
	cart := Cart acceptingItemsOf: (Array with: 'validBook' with: 'anotherValidBook').
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	checkoutPrice := cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	
	self assert: checkoutPrice equals: 16
	! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/2/2023 20:08:22'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:11:44'!
test05
	|cashier cart cashierItems checkoutPrice|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier acceptingItemsOf: (cashierItems ).
	cart := Cart acceptingItemsOf: (Array with: 'anotherValidBook').
	
	cart add: 'anotherValidBook'.
	
	self 
		should:[
			checkoutPrice := cashier 
				checkout: cart 
				withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
				creditCardHolder: 'manucho'.
		]
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:12:11' prior: 50655840!
test05
	|cashier cart cashierItems checkoutPrice|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier acceptingItemsOf: (cashierItems ).
	cart := Cart acceptingItemsOf: (Array with: 'anotherValidBook').
	
	cart add: 'anotherValidBook'.
	
	self 
		should:[
			checkoutPrice := cashier 
				checkout: cart 
				withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
				creditCardHolder: 'manucho'.
		]
		raise: Error
		withExceptionDo: []
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:13:26' prior: 50655858!
test05
	|cashier cart cashierItems checkoutPrice|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier acceptingItemsOf: (cashierItems ).
	cart := Cart acceptingItemsOf: (Array with: 'anotherValidBook').
	
	cart add: 'anotherValidBook'.
	
	self 
		should:[
			checkoutPrice := cashier 
				checkout: cart 
				withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
				creditCardHolder: 'manucho'.
		]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier
		]
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:14:14' prior: 50655877!
test05
	|cashier cart cashierItems checkoutPrice|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier acceptingItemsOf: (cashierItems ).
	cart := Cart acceptingItemsOf: (Array with: 'anotherValidBook').
	
	cart add: 'anotherValidBook'.
	
	self 
		should:[
			checkoutPrice := cashier 
				checkout: cart 
				withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
				creditCardHolder: 'manucho'.
		]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier itemNonExistantErrorMessage
		]
		! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 20:14:26'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 20:14:26'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:14:31'!
itemNonExistantErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:14:40' prior: 50655924!
itemNonExistantErrorMessage
	'item does not exist'! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 20:14:48'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 20:30:02' prior: 50652331!
test01
	|cashier cart |
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	" Crear clase de tarjeta de credito "
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 
			creditCardExpiration: 082023 
			creditCardHolder: 'manu']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: cashier class cartIsEmptyErrorMessage 
			"Como no estamos acertando nada de lo que no tenia que pasar, 
			nos tenemos que dar cuenta de que falta algo"
		].! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 20:42:32' prior: 50655733!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	|totalAmount|
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	"Move expired check to Card"
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := 0.
	cart items do: [: anItem | | itemPrice |
		itemPrice := acceptedItemsList at: anItem ifAbsent: [self error: self class itemNonExistantErrorMessage].
		totalAmount := totalAmount + itemPrice
	].
	^totalAmount! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 20:53:41' prior: 50655958!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	|totalAmount|
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	"Move expired check to Card and on instance creation pass the current date"
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := 0.
	cart items do: [: anItem | | itemPrice |
		itemPrice := acceptedItemsList at: anItem ifAbsent: [self error: self class itemNonExistantErrorMessage].
		totalAmount := totalAmount + itemPrice
	].
	^totalAmount! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 21:06:48' prior: 50655979!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	|totalAmount|
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	"Move expired check to Card and on instance creation pass the current date"
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := 0.
	cart items do: [: anItem | | itemPrice |
		itemPrice := acceptedItemsList at: anItem ifAbsent: [self error: self class itemNonExistantErrorMessage].
		totalAmount := totalAmount + itemPrice
	]."Delegar responsabilidad del total al carrito"
	^totalAmount! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 21:07:52' prior: 50656002!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	"Move expired check to Card and on instance creation pass the current date"
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	
	^cart totalAmount. ! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 21:07:57'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 21:07:57'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 21:07:57'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/2/2023 21:07:57'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:07:57'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 21:08:00'!
ERROR!
!Cart methodsFor: 'total' stamp: 'mm uu 11/2/2023 21:08:09'!
totalAmount
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'mm uu 11/2/2023 21:08:43' prior: 50656055!
totalAmount
	items do: [: anItem | | itemPrice |
		"itemPrice :=  at: anItem ifAbsent: [self error: self class itemNonExistantErrorMessage].
		totalAmount := totalAmount + itemPrice"
	].! !
!Cart methodsFor: 'total' stamp: 'mm uu 11/2/2023 21:10:30' prior: 50656059!
totalAmount
	|totalAmount|
	totalAmount := 0.
	items do: [: anItem | | itemPrice |
		itemPrice := catalog at: anItem ifAbsent: [self error: self class itemNonExistantErrorMessage ].
		totalAmount := totalAmount + itemPrice.
		"itemPrice :=  at: anItem ifAbsent: [self error: self class itemNonExistantErrorMessage].
		totalAmount := totalAmount + itemPrice"
	].
	^totalAmount ! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/2/2023 21:10:38'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/2/2023 21:10:38'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:11:38' prior: 50655797!
test03
	|cashier cart catalog checkoutPrice|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (catalog).
	
	cart add: 'validBook'.
	
	checkoutPrice := cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	
	self assert: checkoutPrice equals: 7
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 21:11:40'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 21:11:40'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'mm uu 11/2/2023 21:12:42' prior: 50651805!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 21:12:44'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 21:12:49'!
ERROR!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 21:12:49'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:13:24' prior: 50652573!
test02
	|cashier cart catalog|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (catalog).
	
	cart add: 'validBook'.
	
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current previous
			creditCardHolder: 'manucho']
		raise:  Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage .
		]
	! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 21:13:26'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 21:13:34'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:13:55' prior: 50655937!
test01
	|cashier cart |
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (Dictionary new).
	" Crear clase de tarjeta de credito "
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 
			creditCardExpiration: 082023 
			creditCardHolder: 'manu']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText equals: cashier class cartIsEmptyErrorMessage 
			"Como no estamos acertando nada de lo que no tenia que pasar, 
			nos tenemos que dar cuenta de que falta algo"
		].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 21:13:57'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:14:13' prior: 50655817!
test04
	|cashier cart cashierItems checkoutPrice|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashierItems add: #anotherValidBook -> 9.
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (cashierItems).
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	checkoutPrice := cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	
	self assert: checkoutPrice equals: 16
	! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/2/2023 21:14:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:14:22' prior: 50656168!
test04
	|cashier cart catalog checkoutPrice|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (catalog).
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	checkoutPrice := cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	
	self assert: checkoutPrice equals: 16
	! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/2/2023 21:14:26'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:14:39' prior: 50655898!
test05
	|cashier cart cashierItems checkoutPrice|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (cashierItems).
	
	cart add: 'anotherValidBook'.
	
	self 
		should:[
			checkoutPrice := cashier 
				checkout: cart 
				withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
				creditCardHolder: 'manucho'.
		]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier itemNonExistantErrorMessage
		]
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:14:51' prior: 50656210!
test05
	|cashier cart cashierItems|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (cashierItems).
	
	cart add: 'anotherValidBook'.
	
	self 
		should:[
			cashier 
				checkout: cart 
				withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
				creditCardHolder: 'manucho'.
		]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier itemNonExistantErrorMessage
		]
		! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:14:53'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:14:53'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:15:03'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:15:03'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 21:15:49'!
itemNonExistantErrorMessage
	^'item does not exist'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:15:56' prior: 50656231!
test05
	|cashier cart cashierItems|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (cashierItems).
	
	cart add: 'anotherValidBook'.
	
	self 
		should:[
			cashier 
				checkout: cart 
				withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
				creditCardHolder: 'manucho'.
		]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cart itemNonExistantErrorMessage
		]
		! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:15:57'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:15:57'!
ERROR!

!methodRemoval: CashierTest #test05 stamp: 'mm uu 11/2/2023 21:16:19'!
test05
	|cashier cart cashierItems|
	cashierItems := Dictionary new.
	cashierItems add: #validBook -> 7.
	cashier := Cashier new.
	cart := Cart acceptingItemsOf: (cashierItems).
	
	cart add: 'anotherValidBook'.
	
	self 
		should:[
			cashier 
				checkout: cart 
				withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
				creditCardHolder: 'manucho'.
		]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cart itemNonExistantErrorMessage
		]
		!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 21:16:22'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 21:16:22'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 21:16:22'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/2/2023 21:16:22'!
PASSED!

!methodRemoval: Cashier #checkout:with: stamp: 'mm uu 11/2/2023 21:16:37'!
checkout: cart with: card 
	cart isEmpty ifTrue: [^self error: self class cartIsEmptyErrorMessage ]!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 21:16:44' prior: 50656026!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	
	"Move expired check to Card and on instance creation pass the current date"
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	
	^cart totalAmount. ! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 21:16:49'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 21:16:49'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 21:16:49'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/2/2023 21:16:50'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/2/2023 21:23:25'!
PASSED!

!classDefinition: #MockedMerchantProcessor category: 'TusLibros' stamp: 'mm uu 11/2/2023 21:34:07'!
Object subclass: #MockedMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:34:04'!
test05
	|cashier cart catalog checkoutPrice mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [self error: 'insufficient funds'].
	
	cashier := Cashier withMerchantProcessor: mockedMerchantProcessor .
	cart := Cart acceptingItemsOf: (catalog).
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	checkoutPrice := cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	
	self assert: checkoutPrice equals: 16
	! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:34:13'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:34:13'!
ERROR!
!MockedMerchantProcessor class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 21:34:18'!
returns: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeReturns: aRenameMe1 ! !
!MockedMerchantProcessor class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 21:34:28' prior: 50656384!
returns: aClosure
	^self new initializeReturns: aClosure ! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:34:30'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:34:30'!
ERROR!

!classDefinition: #MockedMerchantProcessor category: 'TusLibros' stamp: 'mm uu 11/2/2023 21:34:39'!
Object subclass: #MockedMerchantProcessor
	instanceVariableNames: 'closure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockedMerchantProcessor methodsFor: 'initialization' stamp: 'mm uu 11/2/2023 21:34:39'!
initializeReturns: aClosure 
	self shouldBeImplemented.
	closure := aClosure.! !
!MockedMerchantProcessor methodsFor: 'initialization' stamp: 'mm uu 11/2/2023 21:34:41' prior: 50656411!
initializeReturns: aClosure 
	closure := aClosure.! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:34:50'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:34:50'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 21:34:59'!
withMerchantProcessor: mockedMerchantProcessor 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithMerchantProcessor: mockedMerchantProcessor ! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/2/2023 21:35:08' prior: 50656426!
withMerchantProcessor: mockedMerchantProcessor 
	^self new initializeWithMerchantProcessor: mockedMerchantProcessor ! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:35:11'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:35:11'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mm uu 11/2/2023 21:35:23'!
Object subclass: #Cashier
	instanceVariableNames: 'acceptedItemsList mockedMerchantProcessor_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/2/2023 21:35:23'!
initializeWithMerchantProcessor: mockedMerchantProcessor 
	self shouldBeImplemented.
	mockedMerchantProcessor_CHANGE_ME := mockedMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/2/2023 21:35:56' prior: 50656455!
initializeWithMerchantProcessor: aMockedMerchantProcessor 
	mockedMerchantProcessor_CHANGE_ME := aMockedMerchantProcessor .! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mm uu 11/2/2023 21:36:12'!
Object subclass: #Cashier
	instanceVariableNames: 'acceptedItemsList mockedMerchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:36:12' prior: 50656463!
initializeWithMerchantProcessor: aMockedMerchantProcessor 
	mockedMerchantProcessor := aMockedMerchantProcessor .! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:36:23'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:37:47' prior: 50656356!
test05
	|cashier cart catalog mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [self error: 'insufficient funds'].
	
	cashier := Cashier withMerchantProcessor: mockedMerchantProcessor .
	cart := Cart acceptingItemsOf: (catalog).
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	self 
		should: [
			cashier 
				checkout: cart 
				withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
				creditCardHolder: 'manucho'.]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: 'insufficient funds'].
	! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:37:53'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:37:53'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 21:39:01' prior: 50656321!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	|totalAmount|
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	
	"Move expired check to Card and on instance creation pass the current date"
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := cart totalAmount. 
	mockedMerchantProcessor debit: totalAmount ! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:39:08'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:39:08'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 21:39:35' prior: 50656518!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	|totalAmount|
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	
	"Move expired check to Card and on instance creation pass the current date"
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := cart totalAmount. 
	mockedMerchantProcessor debit: totalAmount .
	
	^totalAmount! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/2/2023 21:39:39'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/2/2023 21:39:39'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/2/2023 21:39:39'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/2/2023 21:39:39'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:39:39'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:39:44'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:39:45'!
FAILURE!
!MockedMerchantProcessor methodsFor: 'initialization' stamp: 'mm uu 11/2/2023 21:40:28'!
debit: anAmount
	^closure value! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/2/2023 21:40:32'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:42:07'!
test06
	|cashier cart catalog mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [^'todo bien'].
	
	cashier := Cashier withMerchantProcessor: mockedMerchantProcessor .
	cart := Cart acceptingItemsOf: (catalog).
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	! !

!testRun: #CashierTest #test06 stamp: 'mm uu 11/2/2023 21:42:08'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/2/2023 21:42:32' prior: 50656582!
test06
	|cashier cart catalog mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [^'todo bien'].
	
	cashier := Cashier withMerchantProcessor: mockedMerchantProcessor .
	cart := Cart acceptingItemsOf: (catalog).
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	self assert: (cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho') equals: 16.
	! !

!testRun: #CashierTest #test06 stamp: 'mm uu 11/2/2023 21:42:34'!
PASSED!

----SNAPSHOT----(2 November 2023 21:45:53) CuisUniversity-5981.image priorSource: 10246857!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/2/2023 21:46:03' prior: 50656541!
checkout: cart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	|totalAmount|
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	
	"Move expired check to Card and on instance creation pass the current date"
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := cart totalAmount. 
	
	mockedMerchantProcessor debit: totalAmount .
	
	^totalAmount! !

----SNAPSHOT----(2 November 2023 21:46:44) CuisUniversity-5981.image priorSource: 10399269!

----SNAPSHOT----(2 November 2023 21:47:39) CuisUniversity-5981.image priorSource: 10399952!

----SNAPSHOT----(2 November 2023 21:47:58) CuisUniversity-5981.image priorSource: 10400045!

----SNAPSHOT----(2 November 2023 21:48:53) CuisUniversity-5981.image priorSource: 10400138!

----STARTUP---- (3 November 2023 16:00:45) as C:\Users\Manuel Urkovich\Facu\Inge1\TusLibros\windows64\CuisUniversity-5981.image!

!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:04:41' prior: 50656122!
test02
	|cashier cart catalog card|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	
	card := Card 
		withNumber: 1 
		expiration: GregorianMonthOfYear current previous
		andCardHolder: 'manucho'.
	
	cart := Cart acceptingItemsOf: (catalog).
	cashier := Cashier for: cart withCard: card.
	
	cart add: 'validBook'.
	
	self 
		should: [cashier 
			checkout: cart 
			withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current previous
			creditCardHolder: 'manucho']
		raise:  Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage .
		]
	! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:04:44'!
ERROR!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:04:44'!
ERROR!
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/3/2023 16:04:49'!
withNumber: aRenameMe1 expiration: aRenameMe2 andCardHolder: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aRenameMe1 expiration: aRenameMe2 andCardHolder: aRenameMe3 ! !

!methodRemoval: Card class #withNumber:expiration:andCardHolder: stamp: 'mm uu 11/3/2023 16:05:09'!
withNumber: aRenameMe1 expiration: aRenameMe2 andCardHolder: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aRenameMe1 expiration: aRenameMe2 andCardHolder: aRenameMe3 !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:06:09' prior: 50656666!
test02
	|cashier cart catalog card|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	
	card := Card 
		withNumber: 1 
		expiration: GregorianMonthOfYear current previous
		cardHolder: 'manucho'.
	
	cart := Cart acceptingItemsOf: (catalog).
	cashier := Cashier for: cart withCard: card.
	
	cart add: 'validBook'.
	
	self 
		should: [cashier checkout]
		raise:  Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage .
		]
	! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:06:13'!
ERROR!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:06:13'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/3/2023 16:06:19'!
for: cart withCard: card 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: cart withCard: card ! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/3/2023 16:06:40' prior: 50656739!
for: aCart withCard: aCard
	^self new initializeFor: aCart withCard: aCard ! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:06:43'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/3/2023 16:09:00'!
for: aCart withCard: aCard andMerchantProcessor: merchantProcessor
	^self new initializeFor: aCart withCard: aCard andMerchantProcessor! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/3/2023 16:09:15' prior: 50656756!
for: aCart withCard: aCard andMerchantProcessor: merchantProcessor
	^self new initializeFor: aCart withCard: aCard andMerchantProcessor: merchantProcessor ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mm uu 11/3/2023 16:10:52'!
Object subclass: #Cashier
	instanceVariableNames: 'acceptedItemsList mockedMerchantProcessor carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mm uu 11/3/2023 16:10:54'!
Object subclass: #Cashier
	instanceVariableNames: 'acceptedItemsList mockedMerchantProcessor carts cards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/3/2023 16:10:50'!
initializeFor: aCart withCard: aCard  
	carts := aCart .
	cards := aCard ! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/3/2023 16:11:11' prior: 50656631!
checkout: aCart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	|totalAmount|
	aCart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	
	"Move expired check to Card and on instance creation pass the current date"
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := aCart totalAmount. 
	
	mockedMerchantProcessor debit: totalAmount .
	
	^totalAmount! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mm uu 11/3/2023 16:11:22'!
Object subclass: #Cashier
	instanceVariableNames: 'acceptedItemsList mockedMerchantProcessor cart cards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:11:22' prior: 50656788!
initializeFor: aCart withCard: aCard  
	cart := aCart .
	cards := aCard ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mm uu 11/3/2023 16:11:28'!
Object subclass: #Cashier
	instanceVariableNames: 'acceptedItemsList mockedMerchantProcessor cart card'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:11:28' prior: 50656820!
initializeFor: aCart withCard: aCard  
	cart := aCart .
	card := aCard ! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/3/2023 16:21:03'!
checkout
	|totalAmount|
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	
	"Move expired check to Card and on instance creation pass the current date"
	card isExpired ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := cart totalAmount. 
	
	mockedMerchantProcessor debit: totalAmount .
	
	^totalAmount! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:21:11'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:21:12'!
FAILURE!
!Card methodsFor: 'initialization' stamp: 'mm uu 11/3/2023 16:22:28'!
isExpirationLessThan: aMonthDate
	^creditCardExpiration < aMonthDate! !
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/3/2023 16:24:24' prior: 50656839!
checkout
	|totalAmount|
	cart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	
	"Move expired check to Card and on instance creation pass the current date"
	(card isExpirationLessThan: GregorianMonthOfYear current) ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := cart totalAmount. 
	
	mockedMerchantProcessor debit: totalAmount .
	
	^totalAmount! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:24:29'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:25:31' prior: 50656088!
test03
	|cashier cart catalog checkoutPrice card|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	
	cart := Cart acceptingItemsOf: (catalog).
	card := Card 
		withNumber: 1 
		expiration: GregorianMonthOfYear current
		cardHolder: 'manucho'.
	cashier := Cashier for: cart withCard: card.
	
	cart add: 'validBook'.
	
	checkoutPrice := cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	
	self assert: checkoutPrice equals: 7
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/3/2023 16:25:33'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/3/2023 16:25:33'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:26:41' prior: 50656881!
test03
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	
	mockedMerchantProcessor := MockedMerchantProcessor new.
	cart := Cart acceptingItemsOf: (catalog).
	card := Card 
		withNumber: 1 
		expiration: GregorianMonthOfYear current
		cardHolder: 'manucho'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	
	cart add: 'validBook'.
	
	checkoutPrice := cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho'.
	
	self assert: checkoutPrice equals: 7
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:26:57' prior: 50656906!
test03
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	
	mockedMerchantProcessor := MockedMerchantProcessor new.
	cart := Cart acceptingItemsOf: (catalog).
	card := Card 
		withNumber: 1 
		expiration: GregorianMonthOfYear current
		cardHolder: 'manucho'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	cart add: 'validBook'.
	
	checkoutPrice := cashier checkout.
	
	self assert: checkoutPrice equals: 7
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/3/2023 16:26:59'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/3/2023 16:26:59'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/3/2023 16:28:10'!
initializeFor: aCart withCard: aCard andMerchantProcessor: aMerchantProcessor 
	cart := aCart .
	card := aCard .
	mockedMerchantProcessor := aMerchantProcessor ! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/3/2023 16:29:32'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:29:37'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:31:46' prior: 50656189!
test04
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor new.
	cart := Cart acceptingItemsOf: (catalog).
	card := Card withNumber: 1 expiration: GregorianMonthOfYear current cardHolder: 'manolo'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	checkoutPrice := cashier checkout.
	
	self assert: checkoutPrice equals: 16
	! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/3/2023 16:31:53'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:35:55' prior: 50656145!
test01
	|cart card mockedMerchantProcessor|
	mockedMerchantProcessor := MockedMerchantProcessor new.
	card := Card withNumber: 1 expiration: GregorianMonthOfYear current cardHolder: 'm'.
	cart := Cart acceptingItemsOf: (Dictionary new).
	self should: [Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier class cartIsEmptyErrorMessage ].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/3/2023 16:36:01'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/3/2023 16:36:02'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/3/2023 16:38:25' prior: 50656954!
initializeFor: aCart withCard: aCard andMerchantProcessor: aMerchantProcessor
	aCart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	cart := aCart .
	card := aCard .
	mockedMerchantProcessor := aMerchantProcessor ! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/3/2023 16:38:38'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/3/2023 16:38:38'!
ERROR!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:39:40'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/3/2023 16:39:45'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/3/2023 16:39:45'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:40:00' prior: 50656992!
test01
	|cart card mockedMerchantProcessor|
	mockedMerchantProcessor := MockedMerchantProcessor new.
	card := Card withNumber: 1 expiration: GregorianMonthOfYear current cardHolder: 'm'.
	cart := Cart acceptingItemsOf: (Dictionary new).
	self should: [Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartIsEmptyErrorMessage ].! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/3/2023 16:40:03'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:40:10'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:42:25' prior: 50656716!
test02
	|cart catalog card|
	catalog := Dictionary new.
	card := Card 
		withNumber: 1 
		expiration: GregorianMonthOfYear current previous
		cardHolder: 'manucho'.
	cart := Cart acceptingItemsOf: (catalog).
	self should: [Cashier for: cart withCard: card.]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage . ].
	! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:42:32'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:42:33'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/3/2023 16:42:51' prior: 50656863!
checkout
	|totalAmount|
	totalAmount := cart totalAmount. 
	
	mockedMerchantProcessor debit: totalAmount .
	
	^totalAmount! !
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/3/2023 16:43:06' prior: 50657015!
initializeFor: aCart withCard: aCard andMerchantProcessor: aMerchantProcessor
	aCart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	(card isExpirationLessThan: GregorianMonthOfYear current) ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	
	cart := aCart .
	card := aCard .
	mockedMerchantProcessor := aMerchantProcessor ! !
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/3/2023 16:43:15' prior: 50657088!
initializeFor: aCart withCard: aCard andMerchantProcessor: aMerchantProcessor
	aCart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	(aCard isExpirationLessThan: GregorianMonthOfYear current) ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	
	cart := aCart .
	card := aCard .
	mockedMerchantProcessor := aMerchantProcessor ! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/3/2023 16:43:19'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:43:21'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:43:21'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:44:44' prior: 50657061!
test02
	|cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	mockedMerchantProcessor := MockedMerchantProcessor new.
	card := Card 
		withNumber: 1 
		expiration: GregorianMonthOfYear current previous
		cardHolder: 'manucho'.
	cart := Cart acceptingItemsOf: (catalog).
	self should: [Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage . ].
	! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:44:46'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:44:46'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/3/2023 16:45:27' prior: 50657124!
test02
	|cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #book -> 3.
	mockedMerchantProcessor := MockedMerchantProcessor new.
	card := Card 
		withNumber: 1 
		expiration: GregorianMonthOfYear current previous
		cardHolder: 'manucho'.
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'book'.
	self should: [Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage . ].
	! !

!testRun: #CashierTest #test02 stamp: 'mm uu 11/3/2023 16:45:30'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/3/2023 16:45:32'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/3/2023 16:45:32'!
ERROR!

----SNAPSHOT----(3 November 2023 16:45:39) CuisUniversity-5981.image priorSource: 10400231!

----STARTUP---- (5 November 2023 13:06:16) as C:\Users\Manuel Urkovich\Facu\Inge1\TusLibros\windows64\CuisUniversity-5981.image!


!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 13:06:45'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 13:06:45'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:06:45'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:06:45'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 13:06:45'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 13:06:46'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:07:44' prior: 50657038!
test01
	|cart card mockedMerchantProcessor|
	mockedMerchantProcessor := MockedMerchantProcessor new.
	card := self createValidCard.
	
	cart := Cart acceptingItemsOf: (Dictionary new).
	self should: [Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartIsEmptyErrorMessage ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:07:53'!
createValidCard
	^ Card withNumber: 1 expiration: GregorianMonthOfYear current cardHolder: 'm'.! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 13:07:58'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:08:17' prior: 50656930!
test03
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	
	mockedMerchantProcessor := MockedMerchantProcessor new.
	cart := Cart acceptingItemsOf: (catalog).
	card := self createValidCard.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	cart add: 'validBook'.
	
	checkoutPrice := cashier checkout.
	
	self assert: checkoutPrice equals: 7
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:08:18'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:08:18'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:08:41' prior: 50657222!
test03
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'validBook'.
	
	mockedMerchantProcessor := MockedMerchantProcessor new.
	card := self createValidCard.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	checkoutPrice := cashier checkout.
	
	self assert: checkoutPrice equals: 7
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:08:42'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:08:51' prior: 50656967!
test04
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor new.
	cart := Cart acceptingItemsOf: (catalog).
	card := Card withNumber: 1 expiration: GregorianMonthOfYear current cardHolder: 'manolo'.
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	checkoutPrice := cashier checkout.
	
	self assert: checkoutPrice equals: 16
	! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:08:53'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:09:01' prior: 50657266!
test04
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor new.
	cart := Cart acceptingItemsOf: (catalog).
	card := self createValidCard.
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	checkoutPrice := cashier checkout.
	
	self assert: checkoutPrice equals: 16
	! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:09:02'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:11:04' prior: 50656488!
test05
	|cashier cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [self error: 'insufficient funds'].
	card := self createValidCard .
	
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	self 
		should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: 'insufficient funds'].
	! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 13:11:05'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:12:07' prior: 50656605!
test06
	|cashier cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [^'transactionID'].
	card := self createValidCard .
	
	cart := Cart acceptingItemsOf: (catalog).
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	self assert: (cashier 
		checkout: cart 
		withCreditCardNumber: 1 creditCardExpiration: GregorianMonthOfYear current
		creditCardHolder: 'manucho') equals: 16.
	! !

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 13:12:09'!
ERROR!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 13:12:09'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:12:35' prior: 50657340!
test06
	|cashier cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [^'transactionID'].
	card := self createValidCard .
	
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	self assert: cashier checkout equals: 16.
	! !

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 13:12:37'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:19:21'!
test07
	|cashier cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [self error: 'stolen card'].
	card := self createValidCard .
	
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	self 
		should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: 'stolen card'].
	! !

!testRun: #CashierTest #test07 stamp: 'mm uu 11/5/2023 13:19:22'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:21:03' prior: 50657390!
test07
	self onCheckoutWithValidCartWhenMerchantProcessorReturnsErrorShouldReturnSameErrorMessage: 'stolen card'.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:21:41'!
onCheckoutWithValidCartWhenMerchantProcessorReturnsErrorShouldReturnSameErrorMessage: anErrorMessage
	|cashier cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [self error: anErrorMessage].
	card := self createValidCard .
	
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	self 
		should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: anErrorMessage].
	! !

!testRun: #CashierTest #test07 stamp: 'mm uu 11/5/2023 13:21:44'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:22:13' prior: 50657314!
test05
	self onCheckoutWithValidCartWhenMerchantProcessorReturnsErrorShouldReturnSameErrorMessage: 'insufficient funds'.
	! !

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 13:22:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:22:22'!
test08
	|cashier cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [^'transactionID'].
	card := self createValidCard .
	
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	self assert: cashier checkout equals: 16.
	! !

!methodRemoval: CashierTest #test06 stamp: 'mm uu 11/5/2023 13:22:22'!
test06
	|cashier cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [^'transactionID'].
	card := self createValidCard .
	
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	self assert: cashier checkout equals: 16.
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:22:28'!
test06
	self onCheckoutWithValidCartWhenMerchantProcessorReturnsErrorShouldReturnSameErrorMessage: 'stolen card'.
	! !

!methodRemoval: CashierTest #test07 stamp: 'mm uu 11/5/2023 13:22:28'!
test07
	self onCheckoutWithValidCartWhenMerchantProcessorReturnsErrorShouldReturnSameErrorMessage: 'stolen card'.
	!

!methodRemoval: CashierTest #test08 stamp: 'mm uu 11/5/2023 13:22:39'!
test08
	|cashier cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: [^'transactionID'].
	card := self createValidCard .
	
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	self assert: cashier checkout equals: 16.
	!
!CashierTest methodsFor: 'tests' stamp: 'mm uu 11/5/2023 13:27:17' prior: 50657291!
test04
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: 'transactionID' whenItReceives: [:anAmount | anAmount = 16].
	cart := Cart acceptingItemsOf: (catalog).
	card := self createValidCard.
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	checkoutPrice := cashier checkout.
	
	self assert: checkoutPrice equals: 16
	! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:27:20'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:27:20'!
ERROR!
!MockedMerchantProcessor class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 13:27:23'!
returns: aRenameMe1 whenItReceives: aRenameMe2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeReturns: aRenameMe1 whenItReceives: aRenameMe2 ! !
!MockedMerchantProcessor class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 13:27:55' prior: 50657555!
returns: returnBlock whenItReceives: conditionBlock 
	^self new initializeReturns: returnBlock whenItReceives: conditionBlock ! !

!classDefinition: #MockedMerchantProcessor category: 'TusLibros' stamp: 'mm uu 11/5/2023 13:29:03'!
Object subclass: #MockedMerchantProcessor
	instanceVariableNames: 'closure conditionBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockedMerchantProcessor methodsFor: 'initialization' stamp: 'mm uu 11/5/2023 13:29:01'!
initializeReturns: aReturnBlock whenItReceives: aConditionBlock 
	closure := aReturnBlock.
	conditionBlock := aConditionBlock .! !
!MockedMerchantProcessor methodsFor: 'initialization' stamp: 'mm uu 11/5/2023 13:29:34' prior: 50656417!
initializeReturns: aReturnBlock 
	self initializeReturns: aReturnBlock whenItReceives: [:any | true]! !
!MockedMerchantProcessor methodsFor: 'initialization' stamp: 'mm uu 11/5/2023 13:30:22'!
debit: anAmount from: aCard
	(conditionBlock value: anAmount) ifTrue: [^closure value].! !

!methodRemoval: Cashier #checkout:withCreditCardNumber:creditCardExpiration:creditCardHolder: stamp: 'mm uu 11/5/2023 13:30:39'!
checkout: aCart withCreditCardNumber: aCreditCardNumber creditCardExpiration: aMonthYear creditCardHolder: aCreditCardHolder
	|totalAmount|
	aCart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ].
	
	"Move expired check to Card and on instance creation pass the current date"
	aMonthYear < GregorianMonthOfYear current ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	totalAmount := aCart totalAmount. 
	
	mockedMerchantProcessor debit: totalAmount .
	
	^totalAmount!
!Cashier methodsFor: 'checkout' stamp: 'mm uu 11/5/2023 13:31:11' prior: 50657081!
checkout
	|totalAmount transactionId|
	totalAmount := cart totalAmount. 
	
	transactionId := mockedMerchantProcessor debit: totalAmount from: card.
	
	^transactionId.! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:31:30'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:31:30'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'mm uu 11/5/2023 13:31:39' prior: 50657528!
test04
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: 'transactionID' whenItReceives: [:anAmount | anAmount = 16].
	cart := Cart acceptingItemsOf: (catalog).
	card := self createValidCard.
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	checkoutPrice := cashier checkout.
	
	self assert: checkoutPrice equals: 'transactionID'
	! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:31:41'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'mm uu 11/5/2023 13:31:47' prior: 50657636!
test04
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: 'transactionID' whenItReceives: [:anAmount | anAmount = 14].
	cart := Cart acceptingItemsOf: (catalog).
	card := self createValidCard.
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	checkoutPrice := cashier checkout.
	
	self assert: checkoutPrice equals: 'transactionID'
	! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:31:48'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:31:48'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'mm uu 11/5/2023 13:31:55' prior: 50657661!
test04
	|cashier cart catalog checkoutPrice card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: 'transactionID' whenItReceives: [:anAmount | anAmount = 16].
	cart := Cart acceptingItemsOf: (catalog).
	card := self createValidCard.
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	checkoutPrice := cashier checkout.
	
	self assert: checkoutPrice equals: 'transactionID'
	! !
!MockedMerchantProcessor methodsFor: 'initialization' stamp: 'mm uu 11/5/2023 13:32:27' prior: 50657597!
debit: anAmount from: aCard
	(conditionBlock value: anAmount) ifTrue: [^closure value].
	^self error: 'condition for simulation was not met'.! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:32:31'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 13:32:43'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 13:32:44'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'mm uu 11/5/2023 13:38:10' prior: 50657245!
test03
	|cashier cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'validBook'.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: ['transactionID'] whenItReceives: [:anAmount | anAmount = 7].
	card := self createValidCard.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	self assert: cashier checkout equals: 'transactionID'
	! !

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:38:14'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'mm uu 11/5/2023 13:38:25' prior: 50657688!
test04
	|cashier cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #validBook -> 7.
	catalog add: #anotherValidBook -> 9.
	
	mockedMerchantProcessor := MockedMerchantProcessor returns: 'transactionID' whenItReceives: [:anAmount | anAmount = 16].
	cart := Cart acceptingItemsOf: (catalog).
	card := self createValidCard.
	
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.
	cashier := Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor .
	
	self assert: cashier checkout equals: 'transactionID'
	! !

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:38:27'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:38:29'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 13:38:32'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 13:38:33'!
PASSED!

!methodRemoval: Cashier #initializeWithMerchantProcessor: stamp: 'mm uu 11/5/2023 13:38:54'!
initializeWithMerchantProcessor: aMockedMerchantProcessor 
	mockedMerchantProcessor := aMockedMerchantProcessor .!

!methodRemoval: Cashier #initializeFor:withCard: stamp: 'mm uu 11/5/2023 13:38:56'!
initializeFor: aCart withCard: aCard  
	cart := aCart .
	card := aCard !

!methodRemoval: Cashier #initializeAcceptingItemsOf: stamp: 'mm uu 11/5/2023 13:39:09'!
initializeAcceptingItemsOf: acceptedItems
	acceptedItemsList := acceptedItems.!

!methodRemoval: Cashier class #acceptingItemsOf: stamp: 'mm uu 11/5/2023 13:39:28'!
acceptingItemsOf: acceptedItems
	^self new initializeAcceptingItemsOf: acceptedItems !

!methodRemoval: Cashier class #for:withCard: stamp: 'mm uu 11/5/2023 13:39:31'!
for: aCart withCard: aCard
	^self new initializeFor: aCart withCard: aCard !

!methodRemoval: Cashier class #withMerchantProcessor: stamp: 'mm uu 11/5/2023 13:39:33'!
withMerchantProcessor: mockedMerchantProcessor 
	^self new initializeWithMerchantProcessor: mockedMerchantProcessor !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 13:39:36'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 13:39:36'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:39:36'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:39:36'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 13:39:36'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 13:39:37'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/5/2023 13:39:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/5/2023 13:39:39'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/5/2023 13:39:39'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/5/2023 13:39:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/5/2023 13:39:39'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/5/2023 13:39:39'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/5/2023 13:39:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/5/2023 13:39:39'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/5/2023 13:39:43'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'mm uu 11/5/2023 13:40:16' prior: 50651771!
defaultCatalog
	|catalog|
	catalog := Dictionary new.! !
!CartTest methodsFor: 'support' stamp: 'mm uu 11/5/2023 13:40:42' prior: 50657854!
defaultCatalog
	|catalog|
	catalog := Dictionary new.
	catalog add: self itemSellByTheStore -> 5! !
!CartTest methodsFor: 'support' stamp: 'mm uu 11/5/2023 13:40:46' prior: 50657859!
defaultCatalog
	|catalog|
	catalog := Dictionary new.
	catalog add: self itemSellByTheStore -> 5.
	^catalog! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/5/2023 13:40:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/5/2023 13:40:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/5/2023 13:40:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/5/2023 13:41:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/5/2023 13:41:04'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/5/2023 13:41:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/5/2023 13:41:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/5/2023 13:41:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/5/2023 13:41:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/5/2023 13:41:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/5/2023 13:41:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/5/2023 13:41:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/5/2023 13:41:05'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 13:41:08'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 13:41:08'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:41:08'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:41:08'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 13:41:08'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 13:41:08'!
PASSED!

----SNAPSHOT----(5 November 2023 13:41:11) CuisUniversity-5981.image priorSource: 10416783!

!methodRemoval: MockedMerchantProcessor #debit: stamp: 'mm uu 11/5/2023 13:45:28'!
debit: anAmount
	^closure value!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 13:46:36'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 13:46:36'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:46:36'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:46:36'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 13:46:36'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 13:46:36'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/5/2023 13:46:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/5/2023 13:46:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/5/2023 13:46:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/5/2023 13:46:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/5/2023 13:46:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/5/2023 13:46:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/5/2023 13:46:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/5/2023 13:46:40'!
PASSED!

Object subclass: #MerchantProcessor
	instanceVariableNames: 'closure conditionBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'mm uu 11/5/2023 13:47:47'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'closure conditionBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessor subclass: #MockedMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockedMerchantProcessor category: 'TusLibros' stamp: 'mm uu 11/5/2023 13:48:10'!
MerchantProcessor subclass: #MockedMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'mm uu 11/5/2023 13:48:18'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'returnBlock conditionBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockedMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:48:18' prior: 50657711!
debit: anAmount from: aCard
	(conditionBlock value: anAmount) ifTrue: [^returnBlock value].
	^self error: 'condition for simulation was not met'.! !
!MockedMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 13:48:18' prior: 50657582!
initializeReturns: aReturnBlock whenItReceives: aConditionBlock 
	returnBlock := aReturnBlock.
	conditionBlock := aConditionBlock .! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 13:48:56'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 13:48:56'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:48:56'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:48:56'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 13:48:56'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 13:48:56'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/5/2023 13:48:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/5/2023 13:48:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/5/2023 13:48:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/5/2023 13:48:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/5/2023 13:48:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/5/2023 13:48:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/5/2023 13:48:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/5/2023 13:48:58'!
PASSED!
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/5/2023 13:49:49'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ]! !
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/5/2023 13:49:49' prior: 50657102!
initializeFor: aCart withCard: aCard andMerchantProcessor: aMerchantProcessor
	self assertCartIsNotEmpty: aCart.
	(aCard isExpirationLessThan: GregorianMonthOfYear current) ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	
	cart := aCart .
	card := aCard .
	mockedMerchantProcessor := aMerchantProcessor ! !
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/5/2023 13:50:00'!
assertCardIsNotExpired: aCard

	^ (aCard isExpirationLessThan: GregorianMonthOfYear current) ifTrue: [self error: self class cardIsExpiredErrorMessage ]! !
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/5/2023 13:50:00' prior: 50658072!
initializeFor: aCart withCard: aCard andMerchantProcessor: aMerchantProcessor
	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard.
	
	cart := aCart .
	card := aCard .
	mockedMerchantProcessor := aMerchantProcessor ! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 13:50:05'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 13:50:05'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 13:50:05'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 13:50:05'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 13:50:05'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 13:50:05'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/5/2023 13:50:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/5/2023 13:50:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/5/2023 13:50:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/5/2023 13:50:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/5/2023 13:50:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/5/2023 13:50:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/5/2023 13:50:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/5/2023 13:50:07'!
PASSED!

TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CardTest category: 'TusLibros' stamp: 'mm uu 11/5/2023 13:52:42'!
TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CardTest methodsFor: 'no messages' stamp: 'mm uu 11/5/2023 13:54:53'!
test01
	self
		should: [Card withNumber: 0 expiration: GregorianMonthOfYear current cardHolder: 'manu']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Card invalidCardNumber ]! !

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 13:54:56'!
FAILURE!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 13:54:56'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 13:57:09' prior: 50652162!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	|a|
	a := creditCardNumber size .
	
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 13:57:18'!
ERROR!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 13:57:18'!
ERROR!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 13:57:45'!
ERROR!

1452!

self length !

self size !

self decimalDigitLength !
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 13:59:55' prior: 50658169!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	creditCardNumber decimalDigitLength < 16 or: [creditCardNumber > 16 ifTrue: [^self invalidCardNumber]].
	
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:00:03'!
FAILURE!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:00:03'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:00:30'!
invalidCardNumber
	^'invalid card number'! !

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:00:34'!
FAILURE!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:00:34'!
FAILURE!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:00:37'!
FAILURE!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:00:37'!
FAILURE!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:04:12'!
FAILURE!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:04:12'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:04:36' prior: 50658188!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	(creditCardNumber decimalDigitLength < 16 or: [creditCardNumber > 16]) ifTrue: [^self invalidCardNumber].
	
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:04:41'!
FAILURE!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:04:41'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:05:28' prior: 50658224!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	(creditCardNumber decimalDigitLength < 16 or: [creditCardNumber > 16]) ifTrue: [^self error: self invalidCardNumber].
	
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:05:31'!
PASSED!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:11:33'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 14:12:34'!
test02
	self
		should: [Card withNumber: 11111111111111111 expiration: GregorianMonthOfYear current cardHolder: 'manu']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Card invalidCardNumber ]! !

!testRun: #CardTest #test02 stamp: 'mm uu 11/5/2023 14:12:35'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 14:12:51'!
test03
	self
		should: [Card withNumber: 1111111111111111 expiration: GregorianMonthOfYear current cardHolder: '']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Card invalidCardHolder ]! !

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:12:53'!
ERROR!

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:12:53'!
ERROR!
!Card class methodsFor: 'errors' stamp: 'mm uu 11/5/2023 14:13:06'!
invalidCardHolder
	self shouldBeImplemented.! !
!Card class methodsFor: 'errors' stamp: 'mm uu 11/5/2023 14:13:11' prior: 50658286!
invalidCardHolder
	^'invalid card holder'! !

''!

self size !

''!

self isEmpty !

'a'!

self isEmpty!
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:16:55' prior: 50658242!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	(creditCardNumber decimalDigitLength < 16 or: [creditCardNumber > 16]) ifTrue: [^self error: self invalidCardNumber].
	cardHolder isEmpty ifTrue: [^self error: self invalidCardHolder ]. 
	
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:16:58'!
PASSED!

!testRun: #CardTest #test02 stamp: 'mm uu 11/5/2023 14:16:58'!
PASSED!

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:16:58'!
FAILURE!

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:16:58'!
FAILURE!

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:17:06'!
FAILURE!

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:17:06'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:18:27' prior: 50658298!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	(creditCardNumber decimalDigitLength < 16 or: [creditCardNumber decimalDigitLength > 16]) ifTrue: [^self error: self invalidCardNumber].
	cardHolder isEmpty ifTrue: [^self error: self invalidCardHolder ]. 
	
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:18:29'!
PASSED!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:18:32'!
PASSED!

!testRun: #CardTest #test02 stamp: 'mm uu 11/5/2023 14:18:32'!
PASSED!

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:18:32'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 14:19:03'!
validCardNumber

	^ 1111111111111111! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'mm uu 11/5/2023 14:19:03' prior: 50658272!
test03
	self
		should: [Card withNumber: self validCardNumber expiration: GregorianMonthOfYear current cardHolder: '']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Card invalidCardHolder ]! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 14:19:31'!
ERROR!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 14:19:31'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 14:19:31'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 14:19:31'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 14:19:31'!
ERROR!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 14:19:31'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'mm uu 11/5/2023 14:19:44' prior: 50657213!
createValidCard
	^ Card withNumber: 1111111111111111 expiration: GregorianMonthOfYear current cardHolder: 'm'.! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 14:19:46'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 14:19:46'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 14:19:46'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 14:19:46'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 14:19:46'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 14:19:46'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 14:19:46'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'mm uu 11/5/2023 14:20:03' prior: 50657148!
test02
	|cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #book -> 3.
	mockedMerchantProcessor := MockedMerchantProcessor new.
	card := Card 
		withNumber: 1111111111111111
		expiration: GregorianMonthOfYear current previous
		cardHolder: 'manucho'.
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'book'.
	self should: [Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage . ].
	! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 14:20:05'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 14:20:05'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 14:20:05'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 14:20:05'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 14:20:05'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 14:20:05'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'mm uu 11/5/2023 14:20:30'!
validCardNumber
	^ 1111111111111111! !
!CashierTest methodsFor: 'support' stamp: 'mm uu 11/5/2023 14:20:35' prior: 50658381!
createValidCard
	^ Card withNumber: self validCardNumber expiration: GregorianMonthOfYear current cardHolder: 'm'.! !
!CashierTest methodsFor: 'tests' stamp: 'mm uu 11/5/2023 14:20:42' prior: 50658404!
test02
	|cart catalog card mockedMerchantProcessor|
	catalog := Dictionary new.
	catalog add: #book -> 3.
	mockedMerchantProcessor := MockedMerchantProcessor new.
	card := Card 
		withNumber: self validCardNumber 
		expiration: GregorianMonthOfYear current previous
		cardHolder: 'manucho'.
	cart := Cart acceptingItemsOf: (catalog).
	cart add: 'book'.
	self should: [Cashier for: cart withCard: card andMerchantProcessor: mockedMerchantProcessor ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cardIsExpiredErrorMessage . ].
	! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 14:20:43'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 14:20:43'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 14:20:43'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 14:20:43'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 14:20:43'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 14:20:43'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/5/2023 14:20:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/5/2023 14:20:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/5/2023 14:20:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/5/2023 14:20:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/5/2023 14:20:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/5/2023 14:20:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/5/2023 14:20:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/5/2023 14:20:51'!
PASSED!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:20:54'!
PASSED!

!testRun: #CardTest #test02 stamp: 'mm uu 11/5/2023 14:20:54'!
PASSED!

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:20:54'!
PASSED!
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:21:45' prior: 50658327!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	(creditCardNumber decimalDigitLength < 16 or: [creditCardNumber decimalDigitLength > 16]) ifTrue: [^self error: self invalidCardNumber].
	cardHolder isEmpty ifTrue: [self error: self invalidCardHolder ]. 
	
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:22:05'!
assertCardHolderIsValid: cardHolder

	^ cardHolder isEmpty ifTrue: [self error: self invalidCardHolder ]! !
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:22:05' prior: 50658518!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	(creditCardNumber decimalDigitLength < 16 or: [creditCardNumber decimalDigitLength > 16]) ifTrue: [^self error: self invalidCardNumber].
	self assertCardHolderIsValid: cardHolder. 
	
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:22:08' prior: 50658541!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	(creditCardNumber decimalDigitLength < 16 or: [creditCardNumber decimalDigitLength > 16]) ifTrue: [self error: self invalidCardNumber].
	self assertCardHolderIsValid: cardHolder. 
	
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:22:18'!
assertCardNumberIsValid: creditCardNumber

	^ (creditCardNumber decimalDigitLength < 16 or: [creditCardNumber decimalDigitLength > 16]) ifTrue: [self error: self invalidCardNumber]! !
!Card class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:22:19' prior: 50658556!
withNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder 
	self assertCardNumberIsValid: creditCardNumber.
	self assertCardHolderIsValid: cardHolder. 
	
	^self new initializeWithNumber: creditCardNumber expiration: creditCardExpiration cardHolder: cardHolder ! !

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:22:21'!
PASSED!

!testRun: #CardTest #test02 stamp: 'mm uu 11/5/2023 14:22:21'!
PASSED!

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:22:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/5/2023 14:22:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/5/2023 14:22:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/5/2023 14:22:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/5/2023 14:22:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/5/2023 14:22:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/5/2023 14:22:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/5/2023 14:22:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/5/2023 14:22:23'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 14:22:25'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 14:22:25'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 14:22:25'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 14:22:25'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 14:22:25'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 14:22:25'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:23:35' prior: 50656764!
for: aCart withCard: aCard andMerchantProcessor: merchantProcessor
	aCart isEmpty ifTrue: [self error: self cartIsEmptyErrorMessage ].
	
	^self new initializeFor: aCart withCard: aCard andMerchantProcessor: merchantProcessor ! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:24:01' prior: 50658640!
for: aCart withCard: aCard andMerchantProcessor: merchantProcessor
	aCart isEmpty ifTrue: [self error: self cartIsEmptyErrorMessage ].
	(aCard isExpirationLessThan: GregorianMonthOfYear current) ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	
	^self new initializeFor: aCart withCard: aCard andMerchantProcessor: merchantProcessor ! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:24:28'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self cartIsEmptyErrorMessage ]! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:24:28' prior: 50658651!
for: aCart withCard: aCard andMerchantProcessor: merchantProcessor
	self assertCartIsNotEmpty: aCart.
	(aCard isExpirationLessThan: GregorianMonthOfYear current) ifTrue: [self error: self class cardIsExpiredErrorMessage ].
	
	^self new initializeFor: aCart withCard: aCard andMerchantProcessor: merchantProcessor ! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:24:42'!
assertCardIsNotExpired: aCard

	^ (aCard isExpirationLessThan: GregorianMonthOfYear current) ifTrue: [self error: self class cardIsExpiredErrorMessage ]! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:24:42' prior: 50658672!
for: aCart withCard: aCard andMerchantProcessor: merchantProcessor
	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard.
	
	^self new initializeFor: aCart withCard: aCard andMerchantProcessor: merchantProcessor ! !
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/5/2023 14:24:51' prior: 50658093!
initializeFor: aCart withCard: aCard andMerchantProcessor: aMerchantProcessor
	cart := aCart .
	card := aCard .
	mockedMerchantProcessor := aMerchantProcessor ! !

!methodRemoval: Cashier #assertCardIsNotExpired: stamp: 'mm uu 11/5/2023 14:24:54'!
assertCardIsNotExpired: aCard

	^ (aCard isExpirationLessThan: GregorianMonthOfYear current) ifTrue: [self error: self class cardIsExpiredErrorMessage ]!

!methodRemoval: Cashier #assertCartIsNotEmpty: stamp: 'mm uu 11/5/2023 14:24:56'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self class cartIsEmptyErrorMessage ]!

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 14:24:59'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 14:24:59'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 14:24:59'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 14:24:59'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 14:24:59'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 14:24:59'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 14:24:59'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/5/2023 14:25:21' prior: 50658685!
assertCardIsNotExpired: aCard

	^ (aCard isExpirationLessThan: GregorianMonthOfYear current) ifTrue: [self error: self cardIsExpiredErrorMessage ]! !

!testRun: #CashierTest #test01 stamp: 'mm uu 11/5/2023 14:25:23'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'mm uu 11/5/2023 14:25:23'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'mm uu 11/5/2023 14:25:23'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'mm uu 11/5/2023 14:25:23'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'mm uu 11/5/2023 14:25:23'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'mm uu 11/5/2023 14:25:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/5/2023 14:25:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/5/2023 14:25:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/5/2023 14:25:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/5/2023 14:25:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/5/2023 14:25:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/5/2023 14:25:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/5/2023 14:25:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/5/2023 14:25:25'!
PASSED!

!testRun: #CardTest #test01 stamp: 'mm uu 11/5/2023 14:25:28'!
PASSED!

!testRun: #CardTest #test02 stamp: 'mm uu 11/5/2023 14:25:28'!
PASSED!

!testRun: #CardTest #test03 stamp: 'mm uu 11/5/2023 14:25:28'!
PASSED!

----SNAPSHOT----(5 November 2023 14:25:30) CuisUniversity-5981.image priorSource: 10440873!

----SNAPSHOT----(5 November 2023 14:25:32) CuisUniversity-5981.image priorSource: 10468658!

----SNAPSHOT----(5 November 2023 14:27:44) CuisUniversity-5981.image priorSource: 10468751!

----STARTUP---- (6 November 2023 19:42:35) as C:\Users\Manuel Urkovich\Facu\Inge1\TusLibros\windows64\CuisUniversity-5981.image!


!classRemoval: #MockedMerchantProcessor stamp: 'mm uu 11/6/2023 19:42:42'!
MerchantProcessor subclass: #MockedMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessor stamp: 'mm uu 11/6/2023 19:42:43'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'returnBlock conditionBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'mm uu 11/6/2023 19:42:43'!
Object subclass: #Cashier
	instanceVariableNames: 'acceptedItemsList mockedMerchantProcessor cart card'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'mm uu 11/6/2023 19:42:43'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Card stamp: 'mm uu 11/6/2023 19:42:43'!
Object subclass: #Card
	instanceVariableNames: 'creditCardNumber creditCardExpiration cardHolder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'mm uu 11/6/2023 19:42:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'mm uu 11/6/2023 19:42:44'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CardTest stamp: 'mm uu 11/6/2023 19:42:44'!
TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Manuel Urkovich\Facu\Inge1\TusLibros\windows64\TusLibros-33.st----!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'mm uu 11/6/2023 19:43:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'mm uu 11/6/2023 19:43:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'mm uu 11/6/2023 19:43:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'mm uu 11/6/2023 19:43:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'mm uu 11/6/2023 19:43:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'mm uu 11/6/2023 19:43:15'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/6/2023 19:43:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/6/2023 19:43:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/6/2023 19:43:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/6/2023 19:43:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/6/2023 19:43:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/6/2023 19:43:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/6/2023 19:43:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/6/2023 19:43:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/6/2023 19:44:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/6/2023 19:44:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'mm uu 11/6/2023 19:44:17'!
PASSED!

TestCase subclass: #interfazEntrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InterfazEntrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/6/2023 19:45:15'!
TestCase subclass: #InterfazEntrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InterfazEntradaTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfazEntradaTests category: 'TusLibros' stamp: 'mm uu 11/6/2023 19:45:21'!
TestCase subclass: #InterfazEntradaTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #InterfazEntrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/6/2023 19:45:28'!
Object subclass: #InterfazEntrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntradaTests methodsFor: 'no messages' stamp: 'mm uu 11/6/2023 19:50:35'!
test01
	|interfaz users|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users.
	
	self 
		should: [InterfazEntrada createCartFor: 'a' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: ''].! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 19:50:46' prior: 50659549!
test01
	|interfaz users|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users.
	
	self 
		should: [interfaz createCartFor: 'a' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: ''].! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 19:52:55'!
test02
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users.
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self assert: interfaz listCartWithId: cartId equals: Bag new.
	
	! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 19:53:00'!
ERROR!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 19:53:00'!
ERROR!
!InterfazEntrada class methodsFor: 'instance creation' stamp: 'mm uu 11/6/2023 19:53:47'!
withUsers: users 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithUsers: users ! !
!InterfazEntrada class methodsFor: 'instance creation' stamp: 'mm uu 11/6/2023 19:53:59' prior: 50659591!
withUsers: usersList
	^self new initializeWithUsers: usersList ! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 19:54:02'!
ERROR!

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/6/2023 19:54:08'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/6/2023 19:54:08'!
initializeWithUsers: usersList 
	self shouldBeImplemented.
	usersList_CHANGE_ME := usersList.! !
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/6/2023 19:54:29' prior: 50659615!
initializeWithUsers: aUserList
	usersList_CHANGE_ME := aUserList.! !

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/6/2023 19:54:33'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 19:54:33' prior: 50659622!
initializeWithUsers: aUserList
	usersList := aUserList.! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 19:54:36'!
ERROR!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 19:54:36'!
ERROR!
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/6/2023 19:54:46'!
createCartFor: aRenameMe1 withPassword: aRenameMe2 
	self shouldBeImplemented.! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/6/2023 19:58:31' prior: 50659645!
createCartFor: username withPassword: password 
	|pass|
	pass := usersList at: username ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = password ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	^Cart acceptingItemsOf: Dictionary new.! !
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/6/2023 19:58:54'!
invalidCredentialsErrorMessage
	^'Invalid credentials'! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 19:59:08'!
ERROR!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 19:59:08'!
ERROR!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 19:59:37' prior: 50659574!
test02
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users.
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self assert: (interfaz listCartWithId: cartId) equals: Bag new.
	
	! !

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/6/2023 20:00:36'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/6/2023 20:00:33' prior: 50659651!
createCartFor: username withPassword: password 
	|pass|
	pass := usersList at: username ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = password ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	carts add: username -> (Cart acceptingItemsOf: Dictionary new).! !
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/6/2023 20:00:48' prior: 50659635!
initializeWithUsers: aUserList
	usersList := aUserList.
	carts := Dictionary new.! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/6/2023 20:00:59' prior: 50659693!
createCartFor: username withPassword: password 
	|pass|
	pass := usersList at: username ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = password ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	carts add: username -> (Cart acceptingItemsOf: Dictionary new).
	
	^6! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:01:03'!
ERROR!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:01:03'!
ERROR!
!InterfazEntrada methodsFor: 'list cart' stamp: 'mm uu 11/6/2023 20:01:25'!
listCartWithId: cartId 
	self shouldBeImplemented.! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/6/2023 20:02:29' prior: 50659712!
createCartFor: username withPassword: password 
	|pass cartId|
	pass := usersList at: username ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = password ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := 6.
	carts add: cartId -> (Cart acceptingItemsOf: Dictionary new).
	
	^cartId! !
!InterfazEntrada methodsFor: 'list cart' stamp: 'mm uu 11/6/2023 20:02:49' prior: 50659730!
listCartWithId: cartId 
	^(carts at: cartId)! !
!Cart methodsFor: 'total' stamp: 'mm uu 11/6/2023 20:03:15'!
items
	^items copy! !
!InterfazEntrada methodsFor: 'list cart' stamp: 'mm uu 11/6/2023 20:03:25' prior: 50659749!
listCartWithId: cartId 
	^(carts at: cartId) items! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:03:54'!
FAILURE!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:03:54'!
FAILURE!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:04:04' prior: 50659674!
test02
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users.
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self assert: (interfaz listCartWithId: cartId) equals: OrderedCollection new.
	
	! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:04:06'!
PASSED!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:04:10'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:14:51' prior: 50659562!
test01
	|interfaz users|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users.
	
	self 
		should: [interfaz createCartFor: 'a' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !

!methodRemoval: InterfazEntrada #invalidCredentialsErrorMessage stamp: 'mm uu 11/6/2023 20:15:16'!
invalidCredentialsErrorMessage
	^'Invalid credentials'!
!InterfazEntrada class methodsFor: 'instance creation' stamp: 'mm uu 11/6/2023 20:15:19'!
invalidCredentialsErrorMessage
	^'Invalid credentials'! !

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 20:15:23'!
PASSED!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:15:24'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:17:41'!
test03
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: Dictionary new.
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: 'a' withOcurrences: 2.
	
	self assert: (interfaz listCartWithId: cartId) equals: OrderedCollection new.
	
	! !

!classDefinition: #InterfazEntradaTests category: 'TusLibros' stamp: 'mm uu 11/6/2023 20:19:50'!
TestCase subclass: #InterfazEntradaTests
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:19:48' overrides: 16961394!
setUp
	factory := StoreTestObjectsFactory new! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:20:18' prior: 50659815!
test03
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: 'a' withOcurrences: 2.
	
	self assert: (interfaz listCartWithId: cartId) equals: OrderedCollection new.
	
	! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:20:21'!
PASSED!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:20:24'!
ERROR!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:20:24'!
ERROR!
!InterfazEntrada class methodsFor: 'instance creation' stamp: 'mm uu 11/6/2023 20:20:28'!
withUsers: users withCatalog: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithUsers: users withCatalog: aRenameMe1 ! !
!InterfazEntrada class methodsFor: 'instance creation' stamp: 'mm uu 11/6/2023 20:20:49' prior: 50659866!
withUsers: aUserList withCatalog: aCatalog 
	^self new initializeWithUsers: aUserList withCatalog: aCatalog ! !

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:20:51'!
ERROR!

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/6/2023 20:20:59'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList carts userList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/6/2023 20:20:59'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList carts userList catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/6/2023 20:20:59'!
initializeWithUsers: aUserList withCatalog: aCatalog 
	self shouldBeImplemented.
	userList := aUserList.
	catalog := aCatalog.! !
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/6/2023 20:21:03' prior: 50659901!
initializeWithUsers: aUserList withCatalog: aCatalog 
	userList := aUserList.
	catalog := aCatalog.! !

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:21:07'!
ERROR!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:21:07'!
ERROR!
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/6/2023 20:21:51' prior: 50659909!
initializeWithUsers: aUserList withCatalog: aCatalog 
	usersList := aUserList.
	catalog := aCatalog.! !
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/6/2023 20:22:05' prior: 50659921!
initializeWithUsers: aUserList withCatalog: aCatalog 
	usersList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.! !

!methodRemoval: InterfazEntrada #initializeWithUsers: stamp: 'mm uu 11/6/2023 20:22:11'!
initializeWithUsers: aUserList
	usersList := aUserList.
	carts := Dictionary new.!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:22:15'!
ERROR!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:22:16'!
ERROR!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/6/2023 20:22:21'!
addToCartWithId: cartId item: aRenameMe1 withOcurrences: aRenameMe2 
	self shouldBeImplemented.! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/6/2023 20:23:12' prior: 50659946!
addToCartWithId: cartId item: anItem withOcurrences: ocurrences 
	|cart|
	cart := carts at: cartId .
	cart add: anItem withOccurrences: ocurrences ! !

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:23:33'!
ERROR!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:23:33'!
ERROR!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/6/2023 20:24:07' prior: 50659953!
addToCartWithId: cartId item: anItem withOcurrences: ocurrences 
	|cart|
	cart := carts at: cartId .
	cart add: ocurrences of: anItem ! !

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:24:09'!
ERROR!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:24:09'!
ERROR!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:24:35' prior: 50659843!
test03
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self assert: (interfaz listCartWithId: cartId) equals: OrderedCollection new.
	
	! !

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:24:36'!
ERROR!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:24:37'!
ERROR!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:24:41'!
ERROR!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:24:41'!
ERROR!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:25:22'!
ERROR!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:25:22'!
ERROR!
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/6/2023 20:25:58' prior: 50659735!
createCartFor: username withPassword: password 
	|pass cartId|
	pass := usersList at: username ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = password ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := 6.
	carts add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId! !

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:26:01'!
FAILURE!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:26:01'!
FAILURE!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:26:25' prior: 50659979!
test03
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self assert: (interfaz listCartWithId: cartId) equals: OrderedCollection with: factory defaultCatalog with: factory defaultCatalog .
	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:26:37' prior: 50660031!
test03
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (OrderedCollection with: factory defaultCatalog with: factory defaultCatalog) .
	
	! !

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:26:38'!
FAILURE!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:26:38'!
FAILURE!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:27:00' prior: 50660049!
test03
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (OrderedCollection with: factory itemSellByTheStore with: factory itemSellByTheStore ) .
	
	! !

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:27:01'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:27:39' prior: 50659768!
test02
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users testObjectsFactory createCart.
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self assert: (interfaz listCartWithId: cartId) equals: OrderedCollection new.
	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:27:50' prior: 50660095!
test02
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory createCart.
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self assert: (interfaz listCartWithId: cartId) equals: OrderedCollection new.
	
	! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:27:52'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:28:01' prior: 50659786!
test01
	|interfaz users|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory createCart.
	
	self 
		should: [interfaz createCartFor: 'a' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 20:28:02'!
PASSED!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:28:02'!
PASSED!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:28:03'!
PASSED!

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 20:30:57'!
PASSED!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:30:57'!
PASSED!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:30:57'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:31:46' prior: 50660073!
test03
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (OrderedCollection with: factory itemSellByTheStore) .
	
	! !

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:31:47'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:32:01'!
test04
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (OrderedCollection with: factory itemSellByTheStore with: factory itemSellByTheStore) .
	
	! !

!testRun: #InterfazEntradaTests #test04 stamp: 'mm uu 11/6/2023 20:32:02'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:39:15'!
test05
	|interfaz users|
	users := Dictionary new.
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self
		should: [interfaz addToCartWithId: 9 item: factory itemSellByTheStore withOcurrences: 2]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCartId].
	! !

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 20:39:19'!
ERROR!

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 20:39:19'!
ERROR!
!InterfazEntrada class methodsFor: 'errors' stamp: 'mm uu 11/6/2023 20:39:34'!
invalidCartId
	self shouldBeImplemented.! !
!InterfazEntrada class methodsFor: 'errors' stamp: 'mm uu 11/6/2023 20:39:41' prior: 50660216!
invalidCartId
	^'Invalid cart id'! !

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 20:39:44'!
FAILURE!

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 20:39:44'!
FAILURE!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/6/2023 20:40:05' prior: 50659966!
addToCartWithId: cartId item: anItem withOcurrences: ocurrences 
	|cart|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	cart add: ocurrences of: anItem ! !

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 20:40:08'!
PASSED!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/6/2023 20:41:00'!
retrieveCartWith: cartId

	^ carts at: cartId ifAbsent: [self error: self class invalidCartId ]! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/6/2023 20:41:00' prior: 50660231!
addToCartWithId: cartId item: anItem withOcurrences: ocurrences 
	|cart|
	cart := self retrieveCartWith: cartId.
	cart add: ocurrences of: anItem ! !
!InterfazEntrada methodsFor: 'list cart' stamp: 'mm uu 11/6/2023 20:41:23' prior: 50659757!
listCartWithId: cartId 
	|cart|
	cart := self retrieveCartWith: cartId.
	^cart items! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:41:38'!
test06
	|interfaz users|
	users := Dictionary new.
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self
		should: [interfaz listCartWithId: 9]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCartId].
	! !

!testRun: #InterfazEntradaTests #test06 stamp: 'mm uu 11/6/2023 20:41:39'!
PASSED!

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 20:41:58'!
PASSED!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:41:58'!
PASSED!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:41:58'!
PASSED!

!testRun: #InterfazEntradaTests #test04 stamp: 'mm uu 11/6/2023 20:41:58'!
PASSED!

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 20:41:58'!
PASSED!

!testRun: #InterfazEntradaTests #test06 stamp: 'mm uu 11/6/2023 20:41:58'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:49:42' prior: 50660125!
test01
	|interfaz users cart|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory createCart.
	
	self 
		should: [cart := interfaz createCartFor: 'a' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].
		
	self 
		should: [interfaz addToCartWithId: cart item: factory itemSellByTheStore withOcurrences: 1]
		raise: MessageNotUnderstood ! !

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 20:49:43'!
ERROR!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 20:51:19' prior: 50660295!
test01
	|interfaz users cart|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory createCart.
	
	self 
		should: [cart := interfaz createCartFor: 'a' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].
		
	self 
		should: [interfaz addToCartWithId: cart item: factory itemSellByTheStore withOcurrences: 1]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = interfaz class invalidCartId ]! !

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 20:51:20'!
PASSED!

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 20:53:49'!
PASSED!

!testRun: #InterfazEntradaTests #test04 stamp: 'mm uu 11/6/2023 20:53:54'!
PASSED!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 20:53:56'!
PASSED!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 20:53:57'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:00:55' prior: 50660317!
test01
	|interfaz users cart|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory createCart.
	
	self 
		should: [cart := interfaz createCartFor: 'a' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !
!Cart methodsFor: 'initialization' stamp: 'mm uu 11/6/2023 21:05:35' prior: 50658895!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/6/2023 21:05:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/6/2023 21:05:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/6/2023 21:05:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/6/2023 21:05:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/6/2023 21:05:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/6/2023 21:05:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/6/2023 21:05:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/6/2023 21:05:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'mm uu 11/6/2023 21:06:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'mm uu 11/6/2023 21:06:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'mm uu 11/6/2023 21:06:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'mm uu 11/6/2023 21:06:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'mm uu 11/6/2023 21:06:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'mm uu 11/6/2023 21:06:17'!
PASSED!

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 21:06:21'!
PASSED!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 21:06:21'!
FAILURE!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 21:06:21'!
FAILURE!

!testRun: #InterfazEntradaTests #test04 stamp: 'mm uu 11/6/2023 21:06:21'!
FAILURE!

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 21:06:21'!
PASSED!

!testRun: #InterfazEntradaTests #test06 stamp: 'mm uu 11/6/2023 21:06:21'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:06:29' prior: 50660109!
test02
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory createCart.
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self assert: (interfaz listCartWithId: cartId) equals: Bag new.
	
	! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 21:06:31'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:06:35' prior: 50660156!
test03
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore) .
	
	! !

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 21:06:36'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:06:41' prior: 50660176!
test04
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .
	
	! !

!testRun: #InterfazEntradaTests #test04 stamp: 'mm uu 11/6/2023 21:06:42'!
PASSED!

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 21:06:44'!
PASSED!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 21:06:44'!
PASSED!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 21:06:44'!
PASSED!

!testRun: #InterfazEntradaTests #test04 stamp: 'mm uu 11/6/2023 21:06:44'!
PASSED!

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 21:06:44'!
PASSED!

!testRun: #InterfazEntradaTests #test06 stamp: 'mm uu 11/6/2023 21:06:44'!
PASSED!

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 21:07:26'!
PASSED!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 21:07:26'!
PASSED!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 21:07:26'!
PASSED!

!testRun: #InterfazEntradaTests #test04 stamp: 'mm uu 11/6/2023 21:07:26'!
PASSED!

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 21:07:27'!
PASSED!

!testRun: #InterfazEntradaTests #test06 stamp: 'mm uu 11/6/2023 21:07:27'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:08:10'!
test07
	|interfaz users cartIdOne cartIdTwo|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .
	
	! !

!testRun: #InterfazEntradaTests #test07 stamp: 'mm uu 11/6/2023 21:08:12'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:09:16' prior: 50660525!
test07
	|interfaz users cartIdOne cartIdTwo|
	users := Dictionary new.
	users add: #pepe -> #pass.
	users add: #pp -> #holi.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .
	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:10:09' prior: 50660547!
test07
	|interfaz users cartIdOne cartIdTwo|
	users := Dictionary new.
	users add: #pepe -> #pass.
	users add: #pp -> #holi.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	interfaz addToCartWithId: cartIdTwo item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .

	self 
		assert: (interfaz listCartWithId: cartIdTwo ) 
		equals: (Bag with: factory itemSellByTheStore) .	
	! !

!testRun: #InterfazEntradaTests #test07 stamp: 'mm uu 11/6/2023 21:10:12'!
FAILURE!

!testRun: #InterfazEntradaTests #test07 stamp: 'mm uu 11/6/2023 21:10:12'!
FAILURE!

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/6/2023 21:10:28'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList carts userList catalog lastCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/6/2023 21:10:26' prior: 50659928!
initializeWithUsers: aUserList withCatalog: aCatalog 
	usersList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	lastCartId := 1.! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/6/2023 21:11:22' prior: 50660011!
createCartFor: username withPassword: password 
	|pass cartId|
	pass := usersList at: username ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = password ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	carts add: cartId -> (Cart acceptingItemsOf: catalog).
	lastCartId := lastCartId + 1
	
	^cartId! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/6/2023 21:11:26' prior: 50660619!
createCartFor: username withPassword: password 
	|pass cartId|
	pass := usersList at: username ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = password ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	carts add: cartId -> (Cart acceptingItemsOf: catalog).
	lastCartId := lastCartId + 1.
	
	^cartId! !

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 21:11:28'!
PASSED!

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 21:11:29'!
PASSED!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/6/2023 21:11:29'!
PASSED!

!testRun: #InterfazEntradaTests #test04 stamp: 'mm uu 11/6/2023 21:11:29'!
PASSED!

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/6/2023 21:11:29'!
PASSED!

!testRun: #InterfazEntradaTests #test06 stamp: 'mm uu 11/6/2023 21:11:29'!
PASSED!

!testRun: #InterfazEntradaTests #test07 stamp: 'mm uu 11/6/2023 21:11:29'!
PASSED!

!testRun: #InterfazEntradaTests #test07 stamp: 'mm uu 11/6/2023 21:12:55'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:13:01' prior: 50660569!
test07
	|interfaz users cartIdOne cartIdTwo|
	users := Dictionary new.
	users add: #pepe -> #pass.
	users add: #pp -> #holi.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	interfaz addToCartWithId: cartIdTwo item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .

	self 
		assert: (interfaz listCartWithId: cartIdTwo ) 
		equals: (Bag with: factory itemSellByTheStore) .	
	! !

Bag with: 88!

self add: 88!

self add: 88!

self add: 88!

self add: 88!

self add: 88!

self add: 88!

self add: 88!

self add: 88!

self add: 88!

self add: 88!

self add: 88!

self add: 88!

self at: 88!

!testRun: #InterfazEntradaTests #test07 stamp: 'mm uu 11/6/2023 21:15:04'!
PASSED!

Bag with: 'a' with: 'a'!

interfaz listCartWithId: cartIdOne !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:20:45'!
test08
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [cartIdOne checkoutCartId: cartIdOne WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: 'a']! !

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:24:17'!
FAILURE!

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:24:17'!
FAILURE!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:25:56' prior: 50660710!
test08
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [cartIdOne checkoutCartId: cartIdOne WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: '']! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:27:08' prior: 50660732!
test08
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [cartIdOne checkoutCartId: cartIdOne WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:27:10'!
FAILURE!

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:27:10'!
FAILURE!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:27:31' prior: 50660749!
test08
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [cartIdOne checkoutCartId: cartIdOne WithCard: card]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:27:32'!
ERROR!

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:27:32'!
ERROR!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:27:46' prior: 50660774!
test08
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [interfaz checkoutCartId: cartIdOne WithCard: card]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:27:47'!
ERROR!

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:27:47'!
ERROR!
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/6/2023 21:27:55'!
checkoutCartId: cartIdOne WithCard: card 
	self shouldBeImplemented.! !
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/6/2023 21:29:34' prior: 50660823!
checkoutCartId: cartId WithCard: card 
	|cart cashier|
	cart := self retrieveCartWith: cartId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: cart total 
		throught: CartTest new
		on: card
		registeringOn: Dictionary new.! !
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/6/2023 21:29:59' prior: 50660829!
checkoutCartId: cartId WithCard: card 
	|cart cashier|
	cart := self retrieveCartWith: cartId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: cart total 
		throught: CartTest new
		on: card
		registeringOn: Dictionary new.
	cashier checkOut .
	
	^2! !

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:30:11'!
FAILURE!

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:30:22'!
FAILURE!

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:30:22'!
FAILURE!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:32:30' prior: 50660799!
test08
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [interfaz checkoutCartId: cartIdOne WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:32:32'!
FAILURE!

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:32:32'!
FAILURE!

cart !

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:33:08'!
FAILURE!

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:33:42'!
FAILURE!
!Cart methodsFor: 'total' stamp: 'mm uu 11/6/2023 21:36:57' prior: 50658913!
total

	^ items sum: [ :anItem | catalog at: anItem ] ifEmpty: [0]! !

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/6/2023 21:37:03'!
PASSED!

----SNAPSHOT----(6 November 2023 21:39:41) CuisUniversity-5981.image priorSource: 10468844!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:45:17' prior: 50660353!
test01
	|interfaz users cart|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self 
		should: [cart := interfaz createCartFor: 'a' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 21:45:27'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:45:39' prior: 50660901!
test01
	|interfaz users |
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self 
		should: [ interfaz createCartFor: 'a' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:46:39' prior: 50660437!
test02
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self assert: (interfaz listCartWithId: cartId) equals: Bag new.
	
	! !

!testRun: #InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 21:46:40'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:47:09' prior: 50660919!
test01
	|interfaz users |
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self 
		should: [ interfaz createCartFor: 'pepe' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !

!testRun: #InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 21:47:10'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:47:25'!
test00
	|interfaz users |
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self 
		should: [ interfaz createCartFor: 'e' withPassword: 'pass']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !

!testRun: #InterfazEntradaTests #test00 stamp: 'mm uu 11/6/2023 21:47:27'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:48:02'!
test00CannotCreateCartWithInvalidPassword
	|interfaz users |
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self 
		should: [ interfaz createCartFor: 'e' withPassword: 'pass']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !

!methodRemoval: InterfazEntradaTests #test00 stamp: 'mm uu 11/6/2023 21:48:02'!
test00
	|interfaz users |
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self 
		should: [ interfaz createCartFor: 'e' withPassword: 'pass']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:48:36'!
test01CannotCreateCartWithInvalidUser
	|interfaz users |
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self 
		should: [ interfaz createCartFor: 'pepe' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !

!methodRemoval: InterfazEntradaTests #test01 stamp: 'mm uu 11/6/2023 21:48:36'!
test01
	|interfaz users |
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self 
		should: [ interfaz createCartFor: 'pepe' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].!

----SNAPSHOT----(6 November 2023 21:48:51) CuisUniversity-5981.image priorSource: 10535865!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:49:36'!
test02CanCreateCartWithValidUserAndPassword
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self assert: (interfaz listCartWithId: cartId) equals: Bag new.
	
	! !

!methodRemoval: InterfazEntradaTests #test02 stamp: 'mm uu 11/6/2023 21:49:37'!
test02
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self assert: (interfaz listCartWithId: cartId) equals: Bag new.
	
	!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/6/2023 21:52:05'!
recordatorio
	
	"Checkear que no se pueda aniadir un item que no esta en el catalogo"! !

----SNAPSHOT----(6 November 2023 21:52:09) CuisUniversity-5981.image priorSource: 10540637!

----SNAPSHOT----(6 November 2023 21:55:17) CuisUniversity-5981.image priorSource: 10541752!

----SNAPSHOT----(6 November 2023 21:55:18) CuisUniversity-5981.image priorSource: 10541845!

----QUIT----(6 November 2023 21:55:28) CuisUniversity-5981.image priorSource: 10541938!

----STARTUP---- (7 November 2023 17:14:50) as C:\Users\Manuel Urkovich\Facu\Inge1\TusLibros\windows64\CuisUniversity-5981.image!


!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/7/2023 17:30:36'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/7/2023 17:30:36'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/7/2023 17:30:36'!
PASSED!

!testRun: #InterfazEntradaTests #test03 stamp: 'mm uu 11/7/2023 17:30:36'!
PASSED!

!testRun: #InterfazEntradaTests #test04 stamp: 'mm uu 11/7/2023 17:30:36'!
PASSED!

!testRun: #InterfazEntradaTests #test05 stamp: 'mm uu 11/7/2023 17:30:36'!
PASSED!

!testRun: #InterfazEntradaTests #test06 stamp: 'mm uu 11/7/2023 17:30:36'!
PASSED!

!testRun: #InterfazEntradaTests #test07 stamp: 'mm uu 11/7/2023 17:30:36'!
PASSED!

!testRun: #InterfazEntradaTests #test08 stamp: 'mm uu 11/7/2023 17:30:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'mm uu 11/7/2023 17:30:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'mm uu 11/7/2023 17:30:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'mm uu 11/7/2023 17:30:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'mm uu 11/7/2023 17:30:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'mm uu 11/7/2023 17:30:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'mm uu 11/7/2023 17:30:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/7/2023 17:30:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/7/2023 17:30:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/7/2023 17:30:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/7/2023 17:30:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/7/2023 17:30:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/7/2023 17:30:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/7/2023 17:30:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/7/2023 17:30:41'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:36:15'!
test03CanAddItemToCart
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore) .
	
	! !

!methodRemoval: InterfazEntradaTests #test03 stamp: 'mm uu 11/7/2023 17:36:15'!
test03
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore) .
	
	!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:36:29'!
test04CanAddMultipleItemsToCart
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .
	
	! !

!methodRemoval: InterfazEntradaTests #test04 stamp: 'mm uu 11/7/2023 17:36:29'!
test04
	|interfaz users cartId|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .
	
	!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:36:54'!
test05CannotAddItemsToInvalidCart
	|interfaz users|
	users := Dictionary new.
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self
		should: [interfaz addToCartWithId: 9 item: factory itemSellByTheStore withOcurrences: 2]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCartId].
	! !

!methodRemoval: InterfazEntradaTests #test05 stamp: 'mm uu 11/7/2023 17:36:54'!
test05
	|interfaz users|
	users := Dictionary new.
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self
		should: [interfaz addToCartWithId: 9 item: factory itemSellByTheStore withOcurrences: 2]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCartId].
	!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:37:02'!
test06CannotListItemsForInvalidCart
	|interfaz users|
	users := Dictionary new.
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self
		should: [interfaz listCartWithId: 9]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCartId].
	! !

!methodRemoval: InterfazEntradaTests #test06 stamp: 'mm uu 11/7/2023 17:37:02'!
test06
	|interfaz users|
	users := Dictionary new.
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	self
		should: [interfaz listCartWithId: 9]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCartId].
	!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:37:23'!
test07CanCreateMultipleCartsForDifferentUsers
	|interfaz users cartIdOne cartIdTwo|
	users := Dictionary new.
	users add: #pepe -> #pass.
	users add: #pp -> #holi.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	interfaz addToCartWithId: cartIdTwo item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .

	self 
		assert: (interfaz listCartWithId: cartIdTwo ) 
		equals: (Bag with: factory itemSellByTheStore) .	
	! !

!methodRemoval: InterfazEntradaTests #test07 stamp: 'mm uu 11/7/2023 17:37:23'!
test07
	|interfaz users cartIdOne cartIdTwo|
	users := Dictionary new.
	users add: #pepe -> #pass.
	users add: #pp -> #holi.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	interfaz addToCartWithId: cartIdTwo item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .

	self 
		assert: (interfaz listCartWithId: cartIdTwo ) 
		equals: (Bag with: factory itemSellByTheStore) .	
	!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:38:24'!
test08CannotCheckoutEmptyCart
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [interfaz checkoutCartId: cartIdOne WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !

!methodRemoval: InterfazEntradaTests #test08 stamp: 'mm uu 11/7/2023 17:38:24'!
test08
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [interfaz checkoutCartId: cartIdOne WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:42:50'!
test09CannotAddItemThatIsNotInCatalog
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemNotSellByTheStore withOcurrences: 1.
	
	self 
		should: [interfaz checkoutCartId: cartIdOne WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:42:54'!
ERROR!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:42:54'!
ERROR!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:43:12' prior: 50661389!
test09CannotAddItemThatIsNotInCatalog
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemNotSellByTheStore withOcurrences: 1.
	
	self 
		should: [interfaz checkoutCartId: cartIdOne WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart]! !
!Cart class methodsFor: 'error messages' stamp: 'mm uu 11/7/2023 17:43:27'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !

!methodRemoval: Cart #invalidItemErrorMessage stamp: 'mm uu 11/7/2023 17:43:27'!
invalidItemErrorMessage
	
	^'Item is not in catalog'!
!Cart methodsFor: 'assertions' stamp: 'mm uu 11/7/2023 17:43:35' prior: 50658882!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/7/2023 17:43:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/7/2023 17:43:38'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/7/2023 17:43:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/7/2023 17:43:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/7/2023 17:43:38'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/7/2023 17:43:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/7/2023 17:43:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/7/2023 17:43:38'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'mm uu 11/7/2023 17:43:45' prior: 50659012!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart class invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/7/2023 17:43:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/7/2023 17:43:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/7/2023 17:43:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/7/2023 17:43:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/7/2023 17:43:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/7/2023 17:43:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/7/2023 17:43:48'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/7/2023 17:43:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/7/2023 17:43:48'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'mm uu 11/7/2023 17:44:08' prior: 50658968!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart class invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mm uu 11/7/2023 17:44:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mm uu 11/7/2023 17:44:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mm uu 11/7/2023 17:44:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mm uu 11/7/2023 17:44:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mm uu 11/7/2023 17:44:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mm uu 11/7/2023 17:44:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mm uu 11/7/2023 17:44:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mm uu 11/7/2023 17:44:10'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:44:17' prior: 50661419!
test09CannotAddItemThatIsNotInCatalog
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemNotSellByTheStore withOcurrences: 1.
	
	self 
		should: [interfaz checkoutCartId: cartIdOne WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart invalidItemErrorMessage ]! !

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:44:19'!
ERROR!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:44:19'!
ERROR!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:44:29'!
ERROR!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:44:29'!
ERROR!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:45:08' prior: 50661567!
test09CannotAddItemThatIsNotInCatalog
	|interfaz users cartIdOne card|
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	
	
	self 
		should: [
			interfaz addToCartWithId: cartIdOne 
			item: factory itemNotSellByTheStore 
			withOcurrences: 1.]
		raise: Error
		withExceptionDo: [
			:anError | self assert: anError messageText equals: Cart invalidItemErrorMessage ]! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:45:24' prior: 50661604!
test09CannotAddItemThatIsNotInCatalog
	|interfaz users cartIdOne |
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [
			interfaz addToCartWithId: cartIdOne 
			item: factory itemNotSellByTheStore 
			withOcurrences: 1.]
		raise: Error
		withExceptionDo: [
			:anError | self assert: anError messageText equals: Cart invalidItemErrorMessage ]! !

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:45:25'!
PASSED!

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/7/2023 17:45:28'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/7/2023 17:45:28'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/7/2023 17:45:28'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/7/2023 17:45:28'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/7/2023 17:45:28'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/7/2023 17:45:28'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/7/2023 17:45:28'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/7/2023 17:45:28'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 17:45:28'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:45:28'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:45:37' prior: 50661626!
test09CannotAddItemThatIsNotInCatalog
	|interface users cartIdOne |
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartIdOne := interface createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [
			interface addToCartWithId: cartIdOne 
			item: factory itemNotSellByTheStore 
			withOcurrences: 1.]
		raise: Error
		withExceptionDo: [
			:anError | self assert: anError messageText equals: Cart invalidItemErrorMessage ]! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:45:54' prior: 50661685!
test09CannotAddItemThatIsNotInCatalog
	|interface users cartId |
	users := Dictionary new.
	users add: #pepe -> #pass.
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	cartId := interface createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [
			interface addToCartWithId: cartId 
			item: factory itemNotSellByTheStore 
			withOcurrences: 1.]
		raise: Error
		withExceptionDo: [
			:anError | self assert: anError messageText equals: Cart invalidItemErrorMessage ]! !

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:45:56'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 17:45:58'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:45:59'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:46:22' prior: 50661705!
test09CannotAddItemThatIsNotInCatalog
	|interface cartId |
	
	interface := InterfazEntrada withUsers: factory defaultUsers withCatalog: factory defaultCatalog .
	cartId := interface createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [
			interface addToCartWithId: cartId 
			item: factory itemNotSellByTheStore 
			withOcurrences: 1.]
		raise: Error
		withExceptionDo: [
			:anError | self assert: anError messageText equals: Cart invalidItemErrorMessage ]! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'mm uu 11/7/2023 17:47:10'!
defaultUsers
	^Dictionary new
		at: #pepe put: #pass; yourself! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/7/2023 17:47:13'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/7/2023 17:47:13'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/7/2023 17:47:13'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/7/2023 17:47:13'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/7/2023 17:47:13'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/7/2023 17:47:13'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/7/2023 17:47:13'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/7/2023 17:47:13'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 17:47:14'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:47:14'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:47:37' prior: 50661351!
test08CannotCheckoutEmptyCart
	|interfaz cartIdOne card|
	
	interfaz := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
		
	card := CreditCard expiringOn: factory today .
	cartIdOne := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self 
		should: [interfaz checkoutCartId: cartIdOne WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:47:59' prior: 50661269!
test06CannotListItemsForInvalidCart
	|interfaz |
	interfaz := InterfazEntrada withUsers: factory defaultUsers withCatalog: factory defaultCatalog .
	
	self
		should: [interfaz listCartWithId: 9]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCartId].
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:48:10' prior: 50661240!
test05CannotAddItemsToInvalidCart
	|interfaz |
	interfaz := InterfazEntrada withUsers: factory defaultUsers withCatalog: factory defaultCatalog .
	
	self
		should: [interfaz addToCartWithId: 9 item: factory itemSellByTheStore withOcurrences: 2]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCartId].
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:48:21' prior: 50661204!
test04CanAddMultipleItemsToCart
	|interfaz cartId|
	interfaz := InterfazEntrada withUsers: factory defaultUsers withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .
	
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/7/2023 17:48:24'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/7/2023 17:48:24'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/7/2023 17:48:24'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/7/2023 17:48:24'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/7/2023 17:48:24'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/7/2023 17:48:24'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/7/2023 17:48:24'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/7/2023 17:48:24'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 17:48:24'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:48:24'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:48:33' prior: 50661170!
test03CanAddItemToCart
	|interfaz cartId|
	
	interfaz := InterfazEntrada withUsers: factory defaultUsers withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore) .
	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:48:42' prior: 50661049!
test02CanCreateCartWithValidUserAndPassword
	|interfaz cartId|
	
	interfaz := InterfazEntrada withUsers: factory defaultUsers withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: 'pepe' withPassword: 'pass'.
	
	self assert: (interfaz listCartWithId: cartId) equals: Bag new.
	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:48:56' prior: 50661016!
test01CannotCreateCartWithInvalidUser
	|interfaz |
	interfaz := InterfazEntrada withUsers: factory defaultUsers withCatalog: factory defaultCatalog .
	
	self 
		should: [ interfaz createCartFor: 'pepe' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:49:04' prior: 50660986!
test00CannotCreateCartWithInvalidPassword
	|interfaz |
	
	interfaz := InterfazEntrada withUsers: factory defaultUsers withCatalog: factory defaultCatalog .
	
	self 
		should: [ interfaz createCartFor: 'e' withPassword: 'pass']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/7/2023 17:49:06'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/7/2023 17:49:06'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/7/2023 17:49:06'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/7/2023 17:49:06'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/7/2023 17:49:07'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/7/2023 17:49:07'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/7/2023 17:49:07'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/7/2023 17:49:07'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 17:49:07'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:49:07'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'mm uu 11/7/2023 17:49:29'!
defaultUsername
	
	^ 'pepe'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'mm uu 11/7/2023 17:49:38'!
defaultPassword
	
	^ 'pass'! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'mm uu 11/7/2023 17:50:01' prior: 50661754!
defaultUsers
	^Dictionary new
		at: self defaultUsername put: self defaultPassword ; yourself! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/7/2023 17:50:05'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/7/2023 17:50:05'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/7/2023 17:50:05'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/7/2023 17:50:05'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/7/2023 17:50:05'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/7/2023 17:50:05'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/7/2023 17:50:05'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/7/2023 17:50:05'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 17:50:05'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:50:05'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:50:26' prior: 50661913!
test02CanCreateCartWithValidUserAndPassword
	|interfaz cartId|
	
	interfaz := InterfazEntrada withUsers: factory defaultUsers withCatalog: factory defaultCatalog .
	cartId := interfaz createCartFor: factory defaultUsername withPassword: factory defaultPassword.
	
	self assert: (interfaz listCartWithId: cartId) equals: Bag new.
	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:50:38' prior: 50662041!
test02CanCreateCartWithValidUserAndPassword
	|interfaz cartId|
	
	interfaz := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	self assert: (interfaz listCartWithId: cartId) equals: Bag new.
	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:50:47' prior: 50661896!
test03CanAddItemToCart
	|interfaz cartId|
	
	interfaz := InterfazEntrada withUsers: factory defaultUsers withCatalog: factory defaultCatalog .
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore) .
	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:50:54' prior: 50662070!
test03CanAddItemToCart
	|interfaz cartId|
	
	interfaz := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore) .
	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:51:02' prior: 50661843!
test04CanAddMultipleItemsToCart
	|interfaz cartId|
	interfaz := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .
	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:51:55' prior: 50661295!
test07CanCreateMultipleCartsForDifferentUsers
	|interfaz users cartIdOne cartIdTwo|
	users := factory defaultUsers .
	users add: #pp -> #holi.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog .
	
	cartIdOne := interfaz createCartFor: factory defaultUsername withPassword: factory defaultPassword .
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	interfaz addToCartWithId: cartIdTwo item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .

	self 
		assert: (interfaz listCartWithId: cartIdTwo ) 
		equals: (Bag with: factory itemSellByTheStore) .	
	! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:52:08' prior: 50661795!
test08CannotCheckoutEmptyCart
	|interfaz cartId card|
	
	interfaz := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
		
	card := CreditCard expiringOn: factory today .
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	self 
		should: [interfaz checkoutCartId: cartId WithCard: card]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 17:52:10'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 17:52:21' prior: 50661736!
test09CannotAddItemThatIsNotInCatalog
	|interface cartId |
	
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	self 
		should: [
			interface addToCartWithId: cartId 
			item: factory itemNotSellByTheStore 
			withOcurrences: 1.]
		raise: Error
		withExceptionDo: [
			:anError | self assert: anError messageText equals: Cart invalidItemErrorMessage ]! !

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:52:24'!
PASSED!

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/7/2023 17:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/7/2023 17:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/7/2023 17:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/7/2023 17:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/7/2023 17:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/7/2023 17:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/7/2023 17:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/7/2023 17:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 17:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 17:52:25'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 19:28:29'!
test09InterfaceShowsPurchaseAfterCheckout
	|interface cartId card merchantProcessor salesBook|
	
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	card := CreditCard expiringOn: factory today.
	
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	
	interface 
		checkoutCartId: cartId 
		WithCard: card
		through: merchantProcessor.
	
	self 
		assert: interface listPurchases 
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !

!classDefinition: #MerchantProcessorStub category: 'TusLibros' stamp: 'mm uu 11/7/2023 19:30:35'!
Object subclass: #MerchantProcessorStub
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 19:30:28' prior: 50662237!
test09InterfaceShowsPurchaseAfterCheckout
	|interface cartId card merchantProcessor|
	
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	card := CreditCard expiringOn: factory today.
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [].
	
	
	
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	
	interface 
		checkoutCartId: cartId 
		WithCard: card
		through: merchantProcessor.
	
	self 
		assert: interface listPurchases 
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 19:30:44' prior: 50662270!
test09InterfaceShowsPurchaseAfterCheckout
	|interface cartId card merchantProcessor|
	
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	card := CreditCard expiringOn: factory today.
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [].
	
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	
	interface 
		checkoutCartId: cartId 
		WithCard: card
		through: merchantProcessor.
	
	self 
		assert: interface listPurchases 
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:30:48'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:30:48'!
ERROR!
!MerchantProcessorStub class methodsFor: 'instance creation' stamp: 'mm uu 11/7/2023 19:30:52'!
withDefaultBehavior: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithDefaultBehavior: aRenameMe1 ! !
!MerchantProcessorStub class methodsFor: 'instance creation' stamp: 'mm uu 11/7/2023 19:31:11' prior: 50662332!
withDefaultBehavior: aDefaultBehavior
	^self new initializeWithDefaultBehavior: aDefaultBehavior ! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:31:13'!
ERROR!

!classDefinition: #MerchantProcessorStub category: 'TusLibros' stamp: 'mm uu 11/7/2023 19:31:19'!
Object subclass: #MerchantProcessorStub
	instanceVariableNames: 'defaultBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorStub methodsFor: 'initialization' stamp: 'mm uu 11/7/2023 19:31:19'!
initializeWithDefaultBehavior: aDefaultBehavior 
	self shouldBeImplemented.
	defaultBehavior := aDefaultBehavior.! !
!MerchantProcessorStub methodsFor: 'initialization' stamp: 'mm uu 11/7/2023 19:31:27' prior: 50662360!
initializeWithDefaultBehavior: aDefaultBehavior 
	defaultBehavior := aDefaultBehavior.! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:31:35'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:31:35'!
ERROR!
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/7/2023 19:32:27'!
checkoutCartId: cartId withCard: card through: aMerchantProcessor
	|cart cashier|
	cart := self retrieveCartWith: cartId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: cart total 
		throught: aMerchantProcessor
		on: card
		registeringOn: Dictionary new.
	cashier checkOut .
	
	^2! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:33:05'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:33:05'!
ERROR!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 19:33:17' prior: 50662298!
test09InterfaceShowsPurchaseAfterCheckout
	|interface cartId card merchantProcessor|
	
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	card := CreditCard expiringOn: factory today.
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [].
	
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	
	interface 
		checkoutCartId: cartId 
		withCard: card
		through: merchantProcessor.
	
	self 
		assert: interface listPurchases 
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:33:18'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:33:18'!
ERROR!
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/7/2023 19:35:16'!
checkoutCartId: aCartId charging: aCard through: aMerchantProcessor on: aDate
	|cart cashier|
	cart := self retrieveCartWith: aCartId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: aCard
		throught: aMerchantProcessor
		on: aDate
		registeringOn: Dictionary new.
	cashier checkOut .
	
	^2! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 19:36:35' prior: 50662400!
test09InterfaceShowsPurchaseAfterCheckout
	|interface cartId card merchantProcessor|
	
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	card := CreditCard expiringOn: factory today.
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [].
	
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
	
	self 
		assert: interface listPurchases 
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:36:37'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:36:37'!
ERROR!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 19:37:21' prior: 50662447!
test09InterfaceShowsPurchaseAfterCheckout
	|interface cartId card merchantProcessor|
	
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [].
	
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
	
	self 
		assert: interface listPurchases 
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:37:23'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:37:23'!
ERROR!
!MerchantProcessorStub methodsFor: 'operations' stamp: 'mm uu 11/7/2023 19:37:30'!
debit: aTotal from: aCreditCard 
	self shouldBeImplemented.! !
!MerchantProcessorStub methodsFor: 'operations' stamp: 'mm uu 11/7/2023 19:38:10' prior: 50662516!
debit: anAmount from: aCreditCard 
	defaultBehavior value: anAmount value: aCreditCard ! !
!MerchantProcessorStub methodsFor: 'operations' stamp: 'mm uu 11/7/2023 19:38:23' prior: 50662522!
debit: anAmount from: aCreditCard 
	^defaultBehavior value: anAmount value: aCreditCard ! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:38:29'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:38:29'!
ERROR!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 19:38:51' prior: 50662482!
test09InterfaceShowsPurchaseAfterCheckout
	|interface cartId card merchantProcessor|
	
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
	
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
	
	self 
		assert: interface listPurchases 
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:38:52'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:38:52'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:44:04'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:44:04'!
ERROR!

!methodRemoval: InterfazEntrada #checkoutCartId:WithCard: stamp: 'mm uu 11/7/2023 19:44:24'!
checkoutCartId: cartId WithCard: card 
	|cart cashier|
	cart := self retrieveCartWith: cartId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: cart total 
		throught: CartTest new
		on: card
		registeringOn: Dictionary new.
	cashier checkOut .
	
	^2!

!methodRemoval: InterfazEntrada #checkoutCartId:withCard:through: stamp: 'mm uu 11/7/2023 19:44:31'!
checkoutCartId: cartId withCard: card through: aMerchantProcessor
	|cart cashier|
	cart := self retrieveCartWith: cartId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: cart total 
		throught: aMerchantProcessor
		on: card
		registeringOn: Dictionary new.
	cashier checkOut .
	
	^2!

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/7/2023 19:44:45'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList carts userList catalog lastCartId salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/7/2023 19:44:44' prior: 50662434!
checkoutCartId: aCartId charging: aCard through: aMerchantProcessor on: aDate
	|cart cashier|
	cart := self retrieveCartWith: aCartId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: aCard
		throught: aMerchantProcessor
		on: aDate
		registeringOn: salesBook.
	cashier checkOut .
	
	^2! !
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/7/2023 19:44:58' prior: 50660611!
initializeWithUsers: aUserList withCatalog: aCatalog 
	usersList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	lastCartId := 1.
	salesBook := OrderedCollection new.! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:45:06'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:45:06'!
ERROR!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/7/2023 19:45:15'!
listPurchases
	self shouldBeImplemented.! !
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/7/2023 19:46:29'!
listPurchasesForCart: cartId
	self shouldBeImplemented.! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 19:46:30' prior: 50662542!
test09InterfaceShowsPurchaseAfterCheckout
	|interface cartId card merchantProcessor|
	
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
	
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
	
	self 
		assert:  (interface listPurchasesForCart: cartId)
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/7/2023 19:48:43'!
listPurchasesFor: clientId and: password! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 19:49:10' prior: 50662656!
test09InterfaceShowsPurchaseAfterCheckout
	|interface cartId card merchantProcessor|
	
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
	
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
	
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:49:15'!
FAILURE!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:49:15'!
FAILURE!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/7/2023 19:49:42' prior: 50662684!
listPurchasesFor: clientId and: password
	! !

!methodRemoval: InterfazEntrada #listPurchases stamp: 'mm uu 11/7/2023 19:49:46'!
listPurchases
	self shouldBeImplemented.!

!methodRemoval: InterfazEntrada #listPurchasesForCart: stamp: 'mm uu 11/7/2023 19:49:46'!
listPurchasesForCart: cartId
	self shouldBeImplemented.!

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/7/2023 19:49:55'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/7/2023 19:49:55'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/7/2023 19:49:55'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/7/2023 19:49:55'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/7/2023 19:49:55'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/7/2023 19:49:55'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/7/2023 19:49:55'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/7/2023 19:49:55'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 19:49:55'!
FAILURE!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 19:49:55'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:49:55'!
FAILURE!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/7/2023 19:51:32' prior: 50662155!
test08CannotCheckoutEmptyCart
	|interfaz cartId card merchantProcessor|
	
	interfaz := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
		
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:a :b |].
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	self 
		should: [interfaz 
			checkoutCartId: cartId 
			charging: card 
			through: merchantProcessor 
			on: factory today
		]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 19:51:34'!
PASSED!

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/7/2023 19:51:37'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/7/2023 19:51:37'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/7/2023 19:51:37'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/7/2023 19:51:37'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/7/2023 19:51:37'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/7/2023 19:51:37'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/7/2023 19:51:37'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/7/2023 19:51:37'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/7/2023 19:51:38'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/7/2023 19:51:38'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:51:38'!
FAILURE!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:51:38'!
FAILURE!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:52:22'!
FAILURE!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/7/2023 19:52:22'!
FAILURE!

a Sale!

self first!

self first!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/7/2023 19:56:47' prior: 50662727!
listPurchasesFor: clientId and: password
	
	! !
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/7/2023 19:56:50' prior: 50662859!
listPurchasesFor: clientId and: password
	! !

----SNAPSHOT----(7 November 2023 22:01:11) CuisUniversity-5981.image priorSource: 10542031!

----STARTUP---- (8 November 2023 11:12:07) as C:\Users\Manuel Urkovich\Facu\Inge1\TusLibros\windows64\CuisUniversity-5981.image!


!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:29:34'!
FAILURE!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:29:34'!
FAILURE!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 12:30:15' prior: 50662864!
listPurchasesFor: clientId and: password
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mm uu 11/8/2023 12:31:01'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 12:31:00'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withClient: aClient
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	client := aClient.! !
!Cashier methodsFor: 'checkout - private' stamp: 'mm uu 11/8/2023 12:31:38' prior: 50659060!
createSale

	^ Sale of: total for: client
! !

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/8/2023 12:35:44'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList carts userList catalog lastCartId salesBook session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/8/2023 12:35:43' prior: 50662617!
checkoutCartId: aCartId charging: aCard through: aMerchantProcessor on: aDate
	|cart cashier|
	cart := self retrieveCartWith: aCartId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: aCard
		throught: aMerchantProcessor
		on: aDate
		registeringOn: salesBook
		for: (session at: aCartId).
	cashier checkOut .
	
	^2! !
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 12:36:05' prior: 50662630!
initializeWithUsers: aUserList withCatalog: aCatalog 
	usersList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	lastCartId := 1.
	salesBook := OrderedCollection new.
	session := Dictionary new.! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 12:36:38' prior: 50660634!
createCartFor: username withPassword: password 
	|pass cartId|
	pass := usersList at: username ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = password ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	carts add: cartId -> (Cart acceptingItemsOf: catalog).
	session add: cartId -> username.
	lastCartId := lastCartId + 1.
	
	^cartId! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 12:36:38' prior: 50662945!
createCartFor: username withPassword: password 
	|pass cartId|
	pass := usersList at: username ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = password ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	carts add: cartId -> (Cart acceptingItemsOf: catalog).
	session add: cartId -> username.
	
	lastCartId := lastCartId + 1.
	
	^cartId! !

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 12:36:45'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:37:56'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:37:56'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 12:38:02'!
toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeToCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aRenameMe1 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 12:38:07' prior: 50662988!
toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aRenameMe1 
	^self new initializeToCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aRenameMe1 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 12:38:38' prior: 50663002!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aClient
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aClient.! !
!Cashier methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 12:38:53'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aClient
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	client := aClient.! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn:withClient: stamp: 'mm uu 11/8/2023 12:38:56'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withClient: aClient
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	client := aClient.!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:38:58'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:38:58'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 12:39:05'!
of: aTotal for: aClient 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aTotal for: aClient ! !
!Sale class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 12:39:08' prior: 50663056!
of: aTotal for: aClient 
	^self new initializeOf: aTotal for: aClient ! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:39:12'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'mm uu 11/8/2023 12:39:41'!
Object subclass: #Sale
	instanceVariableNames: 'total client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 12:39:40'!
initializeTotal: aTotal for: aClient

	total := aTotal .
	client := aClient.! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:39:43'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:39:43'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 12:39:54' prior: 50663065!
of: aTotal for: aClient 
	^self new initializeTotal: aTotal for: aClient ! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:39:55'!
FAILURE!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:39:55'!
FAILURE!
!Behavior method!
acceptingItemsOf: aCatalog
	#_coverageTracker5275795_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5275795_
		coverAll:
			{31 to: 34}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5275795_
		coverAll:
			{36 to: 38}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5275795_
		coverAll:
			{40 to: 66}
		evaluating: [
			receiver2 initializeAcceptingItemsOf:
				(#_coverageTracker5275795_
					cover: (68 to: 75)
					declaredAt: (19 to: 26)
					by: aCatalog) ]
		thatSends: #initializeAcceptingItemsOf:
		to: receiver2 ] value.! !
!Behavior method!
itemSellByTheStore
	#_coverageTracker5275812_ markAsExecuted.
	^ #_coverageTracker5275812_
		coverAll:
			{25 to: 35}
		byLiteralOrPseudoVariable: 'validBook'.! !
!Behavior method!
setUp
	#_coverageTracker5275913_ markAsExecuted.
	#_coverageTracker5275913_
		cover: (10 to: 27)
		declaredAt: (10 to: 27)
		by:
			(testObjectsFactory _ [ | receiver1 |
			receiver1 _ #_coverageTracker5275913_
				coverAll:
					{32 to: 54}
				by: StoreTestObjectsFactory.
			#_coverageTracker5275913_
				coverAll:
					{56 to: 58}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker5275913_
		cover: (62 to: 74)
		declaredAt: (62 to: 74)
		by:
			(debitBehavior _ [ :anAmount :aCreditCard |
			nil ]).! !
!Behavior method!
retrieveCartWith: cartId
	#_coverageTracker5275994_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ #_coverageTracker5275994_
		cover: (30 to: 34)
		declaredAt: (30 to: 34)
		by: carts.
	#_coverageTracker5275994_
		coverAll:
			{36 to: 38. 47 to: 55}
		evaluating: [
			receiver4
				at:
					(#_coverageTracker5275994_
						cover: (40 to: 45)
						declaredAt: (19 to: 24)
						by: cartId)
				ifAbsent: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker5275994_
						coverAll:
							{58 to: 61}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5275994_
						coverAll:
							{63 to: 68}
						evaluating: [
							receiver3 error:
								[ | receiver2 |
								receiver2 _ [ | receiver1 |
								receiver1 _ #_coverageTracker5275994_
									coverAll:
										{70 to: 73}
									byLiteralOrPseudoVariable: self.
								#_coverageTracker5275994_
									coverAll:
										{75 to: 79}
									evaluating: [ receiver1 class ]
									thatSends: #class
									to: receiver1 ] value.
								#_coverageTracker5275994_
									coverAll:
										{81 to: 93}
									evaluating: [ receiver2 invalidCartId ]
									thatSends: #invalidCartId
									to: receiver2 ] value ]
						thatSends: #error:
						to: receiver3 ] value ]]
		thatSends: #at:ifAbsent:
		to: receiver4 ] value.! !
!Behavior method!
registerSale
	#_coverageTracker5276073_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker5276073_
		cover: (16 to: 24)
		declaredAt: (16 to: 24)
		by: salesBook.
	#_coverageTracker5276073_
		coverAll:
			{26 to: 29}
		evaluating: [
			receiver2 add:
				[ | receiver1 |
				receiver1 _ #_coverageTracker5276073_
					coverAll:
						{31 to: 34}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker5276073_
					coverAll:
						{36 to: 45}
					evaluating: [ receiver1 createSale ]
					thatSends: #createSale
					to: receiver1 ] value ]
		thatSends: #add:
		to: receiver2 ] value.! !
!Behavior method!
add: anItem
	#_coverageTracker5276152_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5276152_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5276152_
		coverAll:
			{22 to: 25. 29 to: 31}
		evaluating: [
			receiver1
				add:
					(#_coverageTracker5276152_
						coverAll:
							{27 to: 27}
						byLiteralOrPseudoVariable: 1)
				of:
					(#_coverageTracker5276152_
						cover: (33 to: 38)
						declaredAt: (6 to: 11)
						by: anItem) ]
		thatSends: #add:of:
		to: receiver1 ] value.! !
!Behavior method!
initialize
	#_coverageTracker5276265_ markAsExecuted.
	#_coverageTracker5276265_
		cover: (14 to: 18)
		declaredAt: (14 to: 18)
		by:
			(today _ [ | receiver1 |
			receiver1 _ #_coverageTracker5276265_
				coverAll:
					{23 to: 33}
				by: DateAndTime.
			#_coverageTracker5276265_
				coverAll:
					{35 to: 37}
				evaluating: [ receiver1 now ]
				thatSends: #now
				to: receiver1 ] value).! !
!Behavior method!
defaultUsers
	#_coverageTracker5276336_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ [ | receiver1 |
	receiver1 _ #_coverageTracker5276336_
		coverAll:
			{16 to: 25}
		by: Dictionary.
	#_coverageTracker5276336_
		coverAll:
			{27 to: 29}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver4 |
	receiver4 _ cascadeReceiver.
	#_coverageTracker5276336_
		coverAll:
			{33 to: 35. 58 to: 61}
		evaluating: [
			receiver4
				at:
					[ | receiver2 |
					receiver2 _ #_coverageTracker5276336_
						coverAll:
							{37 to: 40}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5276336_
						coverAll:
							{42 to: 56}
						evaluating: [ receiver2 defaultUsername ]
						thatSends: #defaultUsername
						to: receiver2 ] value
				put:
					[ | receiver3 |
					receiver3 _ #_coverageTracker5276336_
						coverAll:
							{63 to: 66}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5276336_
						coverAll:
							{68 to: 82}
						evaluating: [ receiver3 defaultPassword ]
						thatSends: #defaultPassword
						to: receiver3 ] value ]
		thatSends: #at:put:
		to: receiver4 ] value.
	[ | receiver5 |
	receiver5 _ cascadeReceiver.
	#_coverageTracker5276336_
		coverAll:
			{86 to: 93}
		evaluating: [ receiver5 yourself ]
		thatSends: #yourself
		to: receiver5 ] value ] value.! !
!Behavior method!
initializeTotal: aTotal for: aClient
	#_coverageTracker5276441_ markAsExecuted.
	#_coverageTracker5276441_
		cover: (40 to: 44)
		declaredAt: (40 to: 44)
		by:
			(total _ #_coverageTracker5276441_
				cover: (49 to: 54)
				declaredAt: (18 to: 23)
				by: aTotal).
	#_coverageTracker5276441_
		cover: (59 to: 64)
		declaredAt: (59 to: 64)
		by:
			(client _ #_coverageTracker5276441_
				cover: (69 to: 75)
				declaredAt: (30 to: 36)
				by: aClient).! !
!Behavior method!
test05CanNotAddMoreThanOneItemNotSellByTheStore
	| cart |
	#_coverageTracker5276539_ markAsExecuted.
	#_coverageTracker5276539_
		cover: (63 to: 66)
		declaredAt: (53 to: 56)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5276539_
				cover: (71 to: 88)
				declaredAt: (71 to: 88)
				by: testObjectsFactory.
			#_coverageTracker5276539_
				coverAll:
					{90 to: 99}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker5276539_
		coverAll:
			{105 to: 108}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5276539_
		coverAll:
			{113 to: 119. 184 to: 189. 222 to: 237}
		evaluating: [
			receiver12
				should: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker5276539_
						cover: (122 to: 125)
						declaredAt: (53 to: 56)
						by: cart.
					#_coverageTracker5276539_
						coverAll:
							{127 to: 130. 134 to: 136}
						evaluating: [
							receiver3
								add:
									(#_coverageTracker5276539_
										coverAll:
											{132 to: 132}
										byLiteralOrPseudoVariable: 2)
								of:
									[ | receiver2 |
									receiver2 _ #_coverageTracker5276539_
										cover: (138 to: 155)
										declaredAt: (71 to: 88)
										by: testObjectsFactory.
									#_coverageTracker5276539_
										coverAll:
											{157 to: 177}
										evaluating: [ receiver2 itemNotSellByTheStore ]
										thatSends: #itemNotSellByTheStore
										to: receiver2 ] value ]
						thatSends: #add:of:
						to: receiver3 ] value ]
				raise:
					[ | receiver4 |
					receiver4 _ #_coverageTracker5276539_
						coverAll:
							{191 to: 195}
						by: Error.
					#_coverageTracker5276539_
						coverAll:
							{197 to: 197}
						evaluating: [
							receiver4 -
								(#_coverageTracker5276539_
									coverAll:
										{199 to: 218}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver4 ] value
				withExceptionDo: [ :anError |
					[ | receiver9 |
					receiver9 _ #_coverageTracker5276539_
						coverAll:
							{255 to: 258}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5276539_
						coverAll:
							{260 to: 266}
						evaluating: [
							receiver9 assert:
								[ | receiver8 |
								receiver8 _ [ | receiver5 |
								receiver5 _ #_coverageTracker5276539_
									cover: (268 to: 274)
									declaredAt: (242 to: 248)
									by: anError.
								#_coverageTracker5276539_
									coverAll:
										{276 to: 286}
									evaluating: [ receiver5 messageText ]
									thatSends: #messageText
									to: receiver5 ] value.
								#_coverageTracker5276539_
									coverAll:
										{288 to: 288}
									evaluating: [
										receiver8 =
											[ | receiver7 |
											receiver7 _ [ | receiver6 |
											receiver6 _ #_coverageTracker5276539_
												cover: (290 to: 293)
												declaredAt: (53 to: 56)
												by: cart.
											#_coverageTracker5276539_
												coverAll:
													{295 to: 299}
												evaluating: [ receiver6 class ]
												thatSends: #class
												to: receiver6 ] value.
											#_coverageTracker5276539_
												coverAll:
													{301 to: 323}
												evaluating: [ receiver7 invalidItemErrorMessage ]
												thatSends: #invalidItemErrorMessage
												to: receiver7 ] value ]
									thatSends: #=
									to: receiver8 ] value ]
						thatSends: #assert:
						to: receiver9 ] value.
					[ | receiver11 |
					receiver11 _ #_coverageTracker5276539_
						coverAll:
							{329 to: 332}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5276539_
						coverAll:
							{334 to: 340}
						evaluating: [
							receiver11 assert:
								[ | receiver10 |
								receiver10 _ #_coverageTracker5276539_
									cover: (342 to: 345)
									declaredAt: (53 to: 56)
									by: cart.
								#_coverageTracker5276539_
									coverAll:
										{347 to: 353}
									evaluating: [ receiver10 isEmpty ]
									thatSends: #isEmpty
									to: receiver10 ] value ]
						thatSends: #assert:
						to: receiver11 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver12 ] value.! !
!Behavior method!
defaultUsername
	#_coverageTracker5276604_ markAsExecuted.
	^ #_coverageTracker5276604_
		coverAll:
			{22 to: 27}
		byLiteralOrPseudoVariable: 'pepe'.! !
!Behavior method!
test02CanNotAddItemsThatDoNotBelongToStore
	| cart |
	#_coverageTracker5276690_ markAsExecuted.
	#_coverageTracker5276690_
		cover: (58 to: 61)
		declaredAt: (48 to: 51)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5276690_
				cover: (66 to: 83)
				declaredAt: (66 to: 83)
				by: testObjectsFactory.
			#_coverageTracker5276690_
				coverAll:
					{85 to: 94}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker5276690_
		coverAll:
			{100 to: 103}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5276690_
		coverAll:
			{108 to: 114. 173 to: 178. 211 to: 226}
		evaluating: [
			receiver12
				should: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker5276690_
						cover: (118 to: 121)
						declaredAt: (48 to: 51)
						by: cart.
					#_coverageTracker5276690_
						coverAll:
							{123 to: 126}
						evaluating: [
							receiver3 add:
								[ | receiver2 |
								receiver2 _ #_coverageTracker5276690_
									cover: (128 to: 145)
									declaredAt: (66 to: 83)
									by: testObjectsFactory.
								#_coverageTracker5276690_
									coverAll:
										{147 to: 167}
									evaluating: [ receiver2 itemNotSellByTheStore ]
									thatSends: #itemNotSellByTheStore
									to: receiver2 ] value ]
						thatSends: #add:
						to: receiver3 ] value ]
				raise:
					[ | receiver4 |
					receiver4 _ #_coverageTracker5276690_
						coverAll:
							{180 to: 184}
						by: Error.
					#_coverageTracker5276690_
						coverAll:
							{186 to: 186}
						evaluating: [
							receiver4 -
								(#_coverageTracker5276690_
									coverAll:
										{188 to: 207}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver4 ] value
				withExceptionDo: [ :anError |
					[ | receiver9 |
					receiver9 _ #_coverageTracker5276690_
						coverAll:
							{244 to: 247}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5276690_
						coverAll:
							{249 to: 255}
						evaluating: [
							receiver9 assert:
								[ | receiver8 |
								receiver8 _ [ | receiver5 |
								receiver5 _ #_coverageTracker5276690_
									cover: (257 to: 263)
									declaredAt: (231 to: 237)
									by: anError.
								#_coverageTracker5276690_
									coverAll:
										{265 to: 275}
									evaluating: [ receiver5 messageText ]
									thatSends: #messageText
									to: receiver5 ] value.
								#_coverageTracker5276690_
									coverAll:
										{277 to: 277}
									evaluating: [
										receiver8 =
											[ | receiver7 |
											receiver7 _ [ | receiver6 |
											receiver6 _ #_coverageTracker5276690_
												cover: (279 to: 282)
												declaredAt: (48 to: 51)
												by: cart.
											#_coverageTracker5276690_
												coverAll:
													{284 to: 288}
												evaluating: [ receiver6 class ]
												thatSends: #class
												to: receiver6 ] value.
											#_coverageTracker5276690_
												coverAll:
													{290 to: 312}
												evaluating: [ receiver7 invalidItemErrorMessage ]
												thatSends: #invalidItemErrorMessage
												to: receiver7 ] value ]
									thatSends: #=
									to: receiver8 ] value ]
						thatSends: #assert:
						to: receiver9 ] value.
					[ | receiver11 |
					receiver11 _ #_coverageTracker5276690_
						coverAll:
							{318 to: 321}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5276690_
						coverAll:
							{323 to: 329}
						evaluating: [
							receiver11 assert:
								[ | receiver10 |
								receiver10 _ #_coverageTracker5276690_
									cover: (331 to: 334)
									declaredAt: (48 to: 51)
									by: cart.
								#_coverageTracker5276690_
									coverAll:
										{336 to: 342}
									evaluating: [ receiver10 isEmpty ]
									thatSends: #isEmpty
									to: receiver10 ] value ]
						thatSends: #assert:
						to: receiver11 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver12 ] value.! !
!Behavior method!
isExpiredOn: aDate
	#_coverageTracker5276775_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5276775_
		cover: (25 to: 34)
		declaredAt: (25 to: 34)
		by: expiration.
	#_coverageTracker5276775_
		coverAll:
			{36 to: 40}
		evaluating: [ receiver1 start ]
		thatSends: #start
		to: receiver1 ] value.
	#_coverageTracker5276775_
		coverAll:
			{42 to: 42}
		evaluating: [
			receiver6 <
				[ | receiver5 |
				receiver5 _ [ | receiver4 |
				receiver4 _ #_coverageTracker5276775_
					coverAll:
						{45 to: 49}
					by: Month.
				#_coverageTracker5276775_
					coverAll:
						{51 to: 56. 75 to: 79}
					evaluating: [
						receiver4
							month:
								[ | receiver2 |
								receiver2 _ #_coverageTracker5276775_
									cover: (58 to: 62)
									declaredAt: (14 to: 18)
									by: aDate.
								#_coverageTracker5276775_
									coverAll:
										{64 to: 73}
									evaluating: [ receiver2 monthIndex ]
									thatSends: #monthIndex
									to: receiver2 ] value
							year:
								[ | receiver3 |
								receiver3 _ #_coverageTracker5276775_
									cover: (81 to: 85)
									declaredAt: (14 to: 18)
									by: aDate.
								#_coverageTracker5276775_
									coverAll:
										{87 to: 96}
									evaluating: [ receiver3 yearNumber ]
									thatSends: #yearNumber
									to: receiver3 ] value ]
					thatSends: #month:year:
					to: receiver4 ] value.
				#_coverageTracker5276775_
					coverAll:
						{99 to: 103}
					evaluating: [ receiver5 start ]
					thatSends: #start
					to: receiver5 ] value ]
		thatSends: #<
		to: receiver6 ] value.! !
!Behavior method!
test03CanNotCheckoutWithAnExpiredCreditCart
	| cart salesBook |
	#_coverageTracker5276876_ markAsExecuted.
	#_coverageTracker5276876_
		cover: (68 to: 71)
		declaredAt: (49 to: 52)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5276876_
				cover: (76 to: 93)
				declaredAt: (76 to: 93)
				by: testObjectsFactory.
			#_coverageTracker5276876_
				coverAll:
					{95 to: 104}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker5276876_
		cover: (108 to: 111)
		declaredAt: (49 to: 52)
		by: cart.
	#_coverageTracker5276876_
		coverAll:
			{113 to: 116}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker5276876_
					cover: (118 to: 135)
					declaredAt: (76 to: 93)
					by: testObjectsFactory.
				#_coverageTracker5276876_
					coverAll:
						{137 to: 154}
					evaluating: [ receiver2 itemSellByTheStore ]
					thatSends: #itemSellByTheStore
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.
	#_coverageTracker5276876_
		cover: (158 to: 166)
		declaredAt: (54 to: 62)
		by:
			(salesBook _ [ | receiver4 |
			receiver4 _ #_coverageTracker5276876_
				coverAll:
					{171 to: 187}
				by: OrderedCollection.
			#_coverageTracker5276876_
				coverAll:
					{189 to: 191}
				evaluating: [ receiver4 new ]
				thatSends: #new
				to: receiver4 ] value).
	[ | receiver15 |
	receiver15 _ #_coverageTracker5276876_
		coverAll:
			{197 to: 200}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5276876_
		coverAll:
			{204 to: 210. 382 to: 387. 420 to: 435}
		evaluating: [
			receiver15
				should: [
					[ | receiver7 |
					receiver7 _ #_coverageTracker5276876_
						coverAll:
							{214 to: 220}
						by: Cashier.
					#_coverageTracker5276876_
						coverAll:
							{227 to: 237. 249 to: 257. 301 to: 309. 320 to: 322. 353 to: 366}
						evaluating: [
							receiver7
								toCheckout:
									(#_coverageTracker5276876_
										cover: (239 to: 242)
										declaredAt: (49 to: 52)
										by: cart)
								charging:
									[ | receiver5 |
									receiver5 _ #_coverageTracker5276876_
										cover: (259 to: 276)
										declaredAt: (76 to: 93)
										by: testObjectsFactory.
									#_coverageTracker5276876_
										coverAll:
											{278 to: 294}
										evaluating: [ receiver5 expiredCreditCard ]
										thatSends: #expiredCreditCard
										to: receiver5 ] value
								throught:
									(#_coverageTracker5276876_
										coverAll:
											{311 to: 314}
										byLiteralOrPseudoVariable: self)
								on:
									[ | receiver6 |
									receiver6 _ #_coverageTracker5276876_
										cover: (324 to: 341)
										declaredAt: (76 to: 93)
										by: testObjectsFactory.
									#_coverageTracker5276876_
										coverAll:
											{343 to: 347}
										evaluating: [ receiver6 today ]
										thatSends: #today
										to: receiver6 ] value
								registeringOn:
									(#_coverageTracker5276876_
										cover: (368 to: 376)
										declaredAt: (54 to: 62)
										by: salesBook) ]
						thatSends: #toCheckout:charging:throught:on:registeringOn:
						to: receiver7 ] value ]
				raise:
					[ | receiver8 |
					receiver8 _ #_coverageTracker5276876_
						coverAll:
							{389 to: 393}
						by: Error.
					#_coverageTracker5276876_
						coverAll:
							{395 to: 395}
						evaluating: [
							receiver8 -
								(#_coverageTracker5276876_
									coverAll:
										{397 to: 416}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver8 ] value
				withExceptionDo: [ :anError |
					[ | receiver12 |
					receiver12 _ #_coverageTracker5276876_
						coverAll:
							{454 to: 457}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5276876_
						coverAll:
							{459 to: 465}
						evaluating: [
							receiver12 assert:
								[ | receiver11 |
								receiver11 _ [ | receiver9 |
								receiver9 _ #_coverageTracker5276876_
									cover: (467 to: 473)
									declaredAt: (440 to: 446)
									by: anError.
								#_coverageTracker5276876_
									coverAll:
										{475 to: 485}
									evaluating: [ receiver9 messageText ]
									thatSends: #messageText
									to: receiver9 ] value.
								#_coverageTracker5276876_
									coverAll:
										{487 to: 487}
									evaluating: [
										receiver11 =
											[ | receiver10 |
											receiver10 _ #_coverageTracker5276876_
												coverAll:
													{489 to: 495}
												by: Cashier.
											#_coverageTracker5276876_
												coverAll:
													{497 to: 539}
												evaluating: [ receiver10 canNotChargeAnExpiredCreditCardErrorMessage ]
												thatSends: #canNotChargeAnExpiredCreditCardErrorMessage
												to: receiver10 ] value ]
									thatSends: #=
									to: receiver11 ] value ]
						thatSends: #assert:
						to: receiver12 ] value.
					[ | receiver14 |
					receiver14 _ #_coverageTracker5276876_
						coverAll:
							{545 to: 548}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5276876_
						coverAll:
							{550 to: 556}
						evaluating: [
							receiver14 assert:
								[ | receiver13 |
								receiver13 _ #_coverageTracker5276876_
									cover: (558 to: 566)
									declaredAt: (54 to: 62)
									by: salesBook.
								#_coverageTracker5276876_
									coverAll:
										{568 to: 574}
									evaluating: [ receiver13 isEmpty ]
									thatSends: #isEmpty
									to: receiver13 ] value ]
						thatSends: #assert:
						to: receiver14 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver15 ] value.! !
!Behavior method!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore
	| cart |
	#_coverageTracker5276932_ markAsExecuted.
	#_coverageTracker5276932_
		cover: (63 to: 66)
		declaredAt: (53 to: 56)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5276932_
				cover: (71 to: 88)
				declaredAt: (71 to: 88)
				by: testObjectsFactory.
			#_coverageTracker5276932_
				coverAll:
					{90 to: 99}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker5276932_
		cover: (105 to: 108)
		declaredAt: (53 to: 56)
		by: cart.
	#_coverageTracker5276932_
		coverAll:
			{110 to: 113}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker5276932_
					cover: (115 to: 132)
					declaredAt: (71 to: 88)
					by: testObjectsFactory.
				#_coverageTracker5276932_
					coverAll:
						{134 to: 151}
					evaluating: [ receiver2 itemSellByTheStore ]
					thatSends: #itemSellByTheStore
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker5276932_
		coverAll:
			{155 to: 158}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5276932_
		coverAll:
			{160 to: 164}
		evaluating: [
			receiver5 deny:
				[ | receiver4 |
				receiver4 _ #_coverageTracker5276932_
					cover: (166 to: 169)
					declaredAt: (53 to: 56)
					by: cart.
				#_coverageTracker5276932_
					coverAll:
						{171 to: 177}
					evaluating: [ receiver4 isEmpty ]
					thatSends: #isEmpty
					to: receiver4 ] value ]
		thatSends: #deny:
		to: receiver5 ] value.! !
!Behavior method!
includes: anItem
	#_coverageTracker5277036_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5277036_
		cover: (21 to: 25)
		declaredAt: (21 to: 25)
		by: items.
	#_coverageTracker5277036_
		coverAll:
			{27 to: 35}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker5277036_
					cover: (37 to: 42)
					declaredAt: (11 to: 16)
					by: anItem) ]
		thatSends: #includes:
		to: receiver1 ] value.! !
!Behavior method!
add: aQuantity of: anItem
	#_coverageTracker5277092_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5277092_
		coverAll:
			{29 to: 32}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5277092_
		coverAll:
			{34 to: 55}
		evaluating: [
			receiver1 assertIsValidQuantity:
				(#_coverageTracker5277092_
					cover: (57 to: 65)
					declaredAt: (6 to: 14)
					by: aQuantity) ]
		thatSends: #assertIsValidQuantity:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker5277092_
		coverAll:
			{69 to: 72}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5277092_
		coverAll:
			{74 to: 91}
		evaluating: [
			receiver2 assertIsValidItem:
				(#_coverageTracker5277092_
					cover: (93 to: 98)
					declaredAt: (20 to: 25)
					by: anItem) ]
		thatSends: #assertIsValidItem:
		to: receiver2 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker5277092_
		coverAll:
			{103 to: 103}
		byLiteralOrPseudoVariable: 1.
	#_coverageTracker5277092_
		coverAll:
			{105 to: 107. 119 to: 121}
		evaluating: [
			receiver4
				to:
					(#_coverageTracker5277092_
						cover: (109 to: 117)
						declaredAt: (6 to: 14)
						by: aQuantity)
				do: [ :aNumber |
					[ | receiver3 |
					receiver3 _ #_coverageTracker5277092_
						cover: (136 to: 140)
						declaredAt: (136 to: 140)
						by: items.
					#_coverageTracker5277092_
						coverAll:
							{142 to: 145}
						evaluating: [
							receiver3 add:
								(#_coverageTracker5277092_
									cover: (147 to: 152)
									declaredAt: (20 to: 25)
									by: anItem) ]
						thatSends: #add:
						to: receiver3 ] value ]]
		thatSends: #to:do:
		to: receiver4 ] value.! !
!Behavior method!
initializeTotal: aTotal
	#_coverageTracker5277175_ markAsExecuted.
	#_coverageTracker5277175_
		cover: (27 to: 31)
		declaredAt: (27 to: 31)
		by:
			(total _ #_coverageTracker5277175_
				cover: (36 to: 41)
				declaredAt: (18 to: 23)
				by: aTotal).! !
!Behavior method!
debit: anAmount from: aCreditCard
	#_coverageTracker5277262_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5277262_
		cover: (38 to: 52)
		declaredAt: (38 to: 52)
		by: defaultBehavior.
	#_coverageTracker5277262_
		coverAll:
			{54 to: 59. 70 to: 75}
		evaluating: [
			receiver1
				value:
					(#_coverageTracker5277262_
						cover: (61 to: 68)
						declaredAt: (8 to: 15)
						by: anAmount)
				value:
					(#_coverageTracker5277262_
						cover: (77 to: 87)
						declaredAt: (23 to: 33)
						by: aCreditCard) ]
		thatSends: #value:value:
		to: receiver1 ] value.! !
!Behavior method!
debitTotal
	#_coverageTracker5277346_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5277346_
		cover: (14 to: 30)
		declaredAt: (14 to: 30)
		by: merchantProcessor.
	#_coverageTracker5277346_
		coverAll:
			{32 to: 37. 45 to: 49}
		evaluating: [
			receiver1
				debit:
					(#_coverageTracker5277346_
						cover: (39 to: 43)
						declaredAt: (39 to: 43)
						by: total)
				from:
					(#_coverageTracker5277346_
						cover: (51 to: 60)
						declaredAt: (51 to: 60)
						by: creditCard) ]
		thatSends: #debit:from:
		to: receiver1 ] value.! !
!Behavior method!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit
	| cart cashier salesBook creditCard |
	#_coverageTracker5277422_ markAsExecuted.
	#_coverageTracker5277422_
		cover: (96 to: 99)
		declaredAt: (58 to: 61)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5277422_
				cover: (104 to: 121)
				declaredAt: (104 to: 121)
				by: testObjectsFactory.
			#_coverageTracker5277422_
				coverAll:
					{123 to: 132}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker5277422_
		cover: (136 to: 139)
		declaredAt: (58 to: 61)
		by: cart.
	#_coverageTracker5277422_
		coverAll:
			{141 to: 144}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker5277422_
					cover: (146 to: 163)
					declaredAt: (104 to: 121)
					by: testObjectsFactory.
				#_coverageTracker5277422_
					coverAll:
						{165 to: 182}
					evaluating: [ receiver2 itemSellByTheStore ]
					thatSends: #itemSellByTheStore
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.
	#_coverageTracker5277422_
		cover: (186 to: 195)
		declaredAt: (81 to: 90)
		by:
			(creditCard _ [ | receiver4 |
			receiver4 _ #_coverageTracker5277422_
				cover: (200 to: 217)
				declaredAt: (104 to: 121)
				by: testObjectsFactory.
			#_coverageTracker5277422_
				coverAll:
					{219 to: 238}
				evaluating: [ receiver4 notExpiredCreditCard ]
				thatSends: #notExpiredCreditCard
				to: receiver4 ] value).
	#_coverageTracker5277422_
		cover: (242 to: 250)
		declaredAt: (71 to: 79)
		by:
			(salesBook _ [ | receiver5 |
			receiver5 _ #_coverageTracker5277422_
				coverAll:
					{255 to: 271}
				by: OrderedCollection.
			#_coverageTracker5277422_
				coverAll:
					{273 to: 275}
				evaluating: [ receiver5 new ]
				thatSends: #new
				to: receiver5 ] value).
	#_coverageTracker5277422_
		cover: (280 to: 292)
		declaredAt: (280 to: 292)
		by:
			(debitBehavior _ [ :anAmount :aCreditCard |
			[ | receiver7 |
			receiver7 _ #_coverageTracker5277422_
				coverAll:
					{324 to: 327}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker5277422_
				coverAll:
					{329 to: 334}
				evaluating: [
					receiver7 error:
						[ | receiver6 |
						receiver6 _ #_coverageTracker5277422_
							coverAll:
								{336 to: 342}
							by: Cashier.
						#_coverageTracker5277422_
							coverAll:
								{344 to: 376}
							evaluating: [ receiver6 creditCardHasNoCreditErrorMessage ]
							thatSends: #creditCardHasNoCreditErrorMessage
							to: receiver6 ] value ]
				thatSends: #error:
				to: receiver7 ] value ]).
	#_coverageTracker5277422_
		cover: (383 to: 389)
		declaredAt: (63 to: 69)
		by:
			(cashier _ [ | receiver9 |
			receiver9 _ #_coverageTracker5277422_
				coverAll:
					{393 to: 399}
				by: Cashier.
			#_coverageTracker5277422_
				coverAll:
					{404 to: 414. 424 to: 432. 447 to: 455. 464 to: 466. 495 to: 508}
				evaluating: [
					receiver9
						toCheckout:
							(#_coverageTracker5277422_
								cover: (416 to: 419)
								declaredAt: (58 to: 61)
								by: cart)
						charging:
							(#_coverageTracker5277422_
								cover: (434 to: 443)
								declaredAt: (81 to: 90)
								by: creditCard)
						throught:
							(#_coverageTracker5277422_
								coverAll:
									{457 to: 460}
								byLiteralOrPseudoVariable: self)
						on:
							[ | receiver8 |
							receiver8 _ #_coverageTracker5277422_
								cover: (468 to: 485)
								declaredAt: (104 to: 121)
								by: testObjectsFactory.
							#_coverageTracker5277422_
								coverAll:
									{487 to: 491}
								evaluating: [ receiver8 today ]
								thatSends: #today
								to: receiver8 ] value
						registeringOn:
							(#_coverageTracker5277422_
								cover: (510 to: 518)
								declaredAt: (71 to: 79)
								by: salesBook) ]
				thatSends: #toCheckout:charging:throught:on:registeringOn:
				to: receiver9 ] value).
	[ | receiver18 |
	receiver18 _ #_coverageTracker5277422_
		coverAll:
			{525 to: 528}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5277422_
		coverAll:
			{533 to: 539. 563 to: 568. 601 to: 616}
		evaluating: [
			receiver18
				should: [
					[ | receiver10 |
					receiver10 _ #_coverageTracker5277422_
						cover: (542 to: 548)
						declaredAt: (63 to: 69)
						by: cashier.
					#_coverageTracker5277422_
						coverAll:
							{550 to: 557}
						evaluating: [ receiver10 checkOut ]
						thatSends: #checkOut
						to: receiver10 ] value ]
				raise:
					[ | receiver11 |
					receiver11 _ #_coverageTracker5277422_
						coverAll:
							{570 to: 574}
						by: Error.
					#_coverageTracker5277422_
						coverAll:
							{576 to: 576}
						evaluating: [
							receiver11 -
								(#_coverageTracker5277422_
									coverAll:
										{578 to: 597}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver11 ] value
				withExceptionDo: [ :anError |
					[ | receiver15 |
					receiver15 _ #_coverageTracker5277422_
						coverAll:
							{634 to: 637}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5277422_
						coverAll:
							{639 to: 645}
						evaluating: [
							receiver15 assert:
								[ | receiver14 |
								receiver14 _ [ | receiver12 |
								receiver12 _ #_coverageTracker5277422_
									cover: (647 to: 653)
									declaredAt: (621 to: 627)
									by: anError.
								#_coverageTracker5277422_
									coverAll:
										{655 to: 665}
									evaluating: [ receiver12 messageText ]
									thatSends: #messageText
									to: receiver12 ] value.
								#_coverageTracker5277422_
									coverAll:
										{667 to: 667}
									evaluating: [
										receiver14 =
											[ | receiver13 |
											receiver13 _ #_coverageTracker5277422_
												coverAll:
													{669 to: 675}
												by: Cashier.
											#_coverageTracker5277422_
												coverAll:
													{677 to: 709}
												evaluating: [ receiver13 creditCardHasNoCreditErrorMessage ]
												thatSends: #creditCardHasNoCreditErrorMessage
												to: receiver13 ] value ]
									thatSends: #=
									to: receiver14 ] value ]
						thatSends: #assert:
						to: receiver15 ] value.
					[ | receiver17 |
					receiver17 _ #_coverageTracker5277422_
						coverAll:
							{715 to: 718}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5277422_
						coverAll:
							{720 to: 726}
						evaluating: [
							receiver17 assert:
								[ | receiver16 |
								receiver16 _ #_coverageTracker5277422_
									cover: (728 to: 736)
									declaredAt: (71 to: 79)
									by: salesBook.
								#_coverageTracker5277422_
									coverAll:
										{738 to: 744}
									evaluating: [ receiver16 isEmpty ]
									thatSends: #isEmpty
									to: receiver16 ] value ]
						thatSends: #assert:
						to: receiver17 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver18 ] value.! !
!Behavior method!
invalidCredentialsErrorMessage
	#_coverageTracker5277483_ markAsExecuted.
	^ #_coverageTracker5277483_
		coverAll:
			{34 to: 54}
		byLiteralOrPseudoVariable: 'Invalid credentials'.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	#_coverageTracker5277580_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5277580_
		coverAll:
			{109 to: 112}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5277580_
		coverAll:
			{114 to: 130}
		evaluating: [
			receiver1 assertIsNotEmpty:
				(#_coverageTracker5277580_
					cover: (132 to: 136)
					declaredAt: (13 to: 17)
					by: aCart) ]
		thatSends: #assertIsNotEmpty:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker5277580_
		coverAll:
			{140 to: 143}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5277580_
		coverAll:
			{145 to: 163. 177 to: 179}
		evaluating: [
			receiver2
				assertIsNotExpired:
					(#_coverageTracker5277580_
						cover: (165 to: 175)
						declaredAt: (29 to: 39)
						by: aCreditCard)
				on:
					(#_coverageTracker5277580_
						cover: (181 to: 185)
						declaredAt: (74 to: 78)
						by: aDate) ]
		thatSends: #assertIsNotExpired:on:
		to: receiver2 ] value.
	^ [ | receiver4 |
	receiver4 _ [ | receiver3 |
	receiver3 _ #_coverageTracker5277580_
		coverAll:
			{192 to: 195}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5277580_
		coverAll:
			{197 to: 199}
		evaluating: [ receiver3 new ]
		thatSends: #new
		to: receiver3 ] value.
	#_coverageTracker5277580_
		coverAll:
			{201 to: 221. 229 to: 237. 251 to: 259. 280 to: 293}
		evaluating: [
			receiver4
				initializeToCheckout:
					(#_coverageTracker5277580_
						cover: (223 to: 227)
						declaredAt: (13 to: 17)
						by: aCart)
				charging:
					(#_coverageTracker5277580_
						cover: (239 to: 249)
						declaredAt: (29 to: 39)
						by: aCreditCard)
				throught:
					(#_coverageTracker5277580_
						cover: (261 to: 278)
						declaredAt: (51 to: 68)
						by: aMerchantProcessor)
				registeringOn:
					(#_coverageTracker5277580_
						cover: (295 to: 304)
						declaredAt: (95 to: 104)
						by: aSalesBook) ]
		thatSends: #initializeToCheckout:charging:throught:registeringOn:
		to: receiver4 ] value.! !
!Behavior method!
initializeWithDefaultBehavior: aDefaultBehavior
	#_coverageTracker5277643_ markAsExecuted.
	#_coverageTracker5277643_
		cover: (51 to: 65)
		declaredAt: (51 to: 65)
		by:
			(defaultBehavior _ #_coverageTracker5277643_
				cover: (70 to: 85)
				declaredAt: (32 to: 47)
				by: aDefaultBehavior).! !
!Behavior method!
creditCardHasNoCreditErrorMessage
	#_coverageTracker5277719_ markAsExecuted.
	^ #_coverageTracker5277719_
		coverAll:
			{39 to: 65}
		byLiteralOrPseudoVariable: 'Credit card has no credit'.! !
!Behavior method!
total
	#_coverageTracker5277797_ markAsExecuted.
	^ #_coverageTracker5277797_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: total.! !
!Behavior method!
today
	#_coverageTracker5277893_ markAsExecuted.
	^ #_coverageTracker5277893_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: today.! !
!Behavior method!
of: aTotal for: aClient
	#_coverageTracker5277999_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5277999_
		coverAll:
			{28 to: 31}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5277999_
		coverAll:
			{33 to: 35}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5277999_
		coverAll:
			{37 to: 52. 61 to: 64}
		evaluating: [
			receiver2
				initializeTotal:
					(#_coverageTracker5277999_
						cover: (54 to: 59)
						declaredAt: (5 to: 10)
						by: aTotal)
				for:
					(#_coverageTracker5277999_
						cover: (66 to: 72)
						declaredAt: (17 to: 23)
						by: aClient) ]
		thatSends: #initializeTotal:for:
		to: receiver2 ] value.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	#_coverageTracker5278099_ markAsExecuted.
	^ #_coverageTracker5278099_
		coverAll:
			{35 to: 67}
		byLiteralOrPseudoVariable: 'Can not check out an empty cart'.! !
!Behavior method!
test04CanNotAddNonPositiveNumberOfItems
	| cart |
	#_coverageTracker5278213_ markAsExecuted.
	#_coverageTracker5278213_
		cover: (55 to: 58)
		declaredAt: (45 to: 48)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5278213_
				cover: (63 to: 80)
				declaredAt: (63 to: 80)
				by: testObjectsFactory.
			#_coverageTracker5278213_
				coverAll:
					{82 to: 91}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver11 |
	receiver11 _ #_coverageTracker5278213_
		coverAll:
			{97 to: 100}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5278213_
		coverAll:
			{105 to: 111. 172 to: 177. 210 to: 225}
		evaluating: [
			receiver11
				should: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker5278213_
						cover: (114 to: 117)
						declaredAt: (45 to: 48)
						by: cart.
					#_coverageTracker5278213_
						coverAll:
							{119 to: 122. 126 to: 128}
						evaluating: [
							receiver3
								add:
									(#_coverageTracker5278213_
										coverAll:
											{124 to: 124}
										byLiteralOrPseudoVariable: 0)
								of:
									[ | receiver2 |
									receiver2 _ #_coverageTracker5278213_
										cover: (130 to: 147)
										declaredAt: (63 to: 80)
										by: testObjectsFactory.
									#_coverageTracker5278213_
										coverAll:
											{149 to: 166}
										evaluating: [ receiver2 itemSellByTheStore ]
										thatSends: #itemSellByTheStore
										to: receiver2 ] value ]
						thatSends: #add:of:
						to: receiver3 ] value ]
				raise:
					[ | receiver4 |
					receiver4 _ #_coverageTracker5278213_
						coverAll:
							{179 to: 183}
						by: Error.
					#_coverageTracker5278213_
						coverAll:
							{185 to: 185}
						evaluating: [
							receiver4 -
								(#_coverageTracker5278213_
									coverAll:
										{187 to: 206}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver4 ] value
				withExceptionDo: [ :anError |
					[ | receiver8 |
					receiver8 _ #_coverageTracker5278213_
						coverAll:
							{243 to: 246}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5278213_
						coverAll:
							{248 to: 254}
						evaluating: [
							receiver8 assert:
								[ | receiver7 |
								receiver7 _ [ | receiver5 |
								receiver5 _ #_coverageTracker5278213_
									cover: (256 to: 262)
									declaredAt: (230 to: 236)
									by: anError.
								#_coverageTracker5278213_
									coverAll:
										{264 to: 274}
									evaluating: [ receiver5 messageText ]
									thatSends: #messageText
									to: receiver5 ] value.
								#_coverageTracker5278213_
									coverAll:
										{276 to: 276}
									evaluating: [
										receiver7 =
											[ | receiver6 |
											receiver6 _ #_coverageTracker5278213_
												cover: (278 to: 281)
												declaredAt: (45 to: 48)
												by: cart.
											#_coverageTracker5278213_
												coverAll:
													{283 to: 309}
												evaluating: [ receiver6 invalidQuantityErrorMessage ]
												thatSends: #invalidQuantityErrorMessage
												to: receiver6 ] value ]
									thatSends: #=
									to: receiver7 ] value ]
						thatSends: #assert:
						to: receiver8 ] value.
					[ | receiver10 |
					receiver10 _ #_coverageTracker5278213_
						coverAll:
							{315 to: 318}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5278213_
						coverAll:
							{320 to: 326}
						evaluating: [
							receiver10 assert:
								[ | receiver9 |
								receiver9 _ #_coverageTracker5278213_
									cover: (328 to: 331)
									declaredAt: (45 to: 48)
									by: cart.
								#_coverageTracker5278213_
									coverAll:
										{333 to: 339}
									evaluating: [ receiver9 isEmpty ]
									thatSends: #isEmpty
									to: receiver9 ] value ]
						thatSends: #assert:
						to: receiver10 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver11 ] value.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	#_coverageTracker5278306_ markAsExecuted.
	#_coverageTracker5278306_
		cover: (40 to: 46)
		declaredAt: (40 to: 46)
		by:
			(catalog _ #_coverageTracker5278306_
				cover: (51 to: 58)
				declaredAt: (29 to: 36)
				by: aCatalog).
	#_coverageTracker5278306_
		cover: (62 to: 66)
		declaredAt: (62 to: 66)
		by:
			(items _ [ | receiver1 |
			receiver1 _ #_coverageTracker5278306_
				coverAll:
					{71 to: 73}
				by: Bag.
			#_coverageTracker5278306_
				coverAll:
					{75 to: 77}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
defaultCatalog
	#_coverageTracker5278393_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ [ | receiver1 |
	receiver1 _ #_coverageTracker5278393_
		coverAll:
			{21 to: 30}
		by: Dictionary.
	#_coverageTracker5278393_
		coverAll:
			{32 to: 34}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver4 |
	receiver4 _ cascadeReceiver.
	#_coverageTracker5278393_
		coverAll:
			{38 to: 40. 66 to: 69}
		evaluating: [
			receiver4
				at:
					[ | receiver2 |
					receiver2 _ #_coverageTracker5278393_
						coverAll:
							{42 to: 45}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5278393_
						coverAll:
							{47 to: 64}
						evaluating: [ receiver2 itemSellByTheStore ]
						thatSends: #itemSellByTheStore
						to: receiver2 ] value
				put:
					[ | receiver3 |
					receiver3 _ #_coverageTracker5278393_
						coverAll:
							{71 to: 74}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5278393_
						coverAll:
							{76 to: 98}
						evaluating: [ receiver3 itemSellByTheStorePrice ]
						thatSends: #itemSellByTheStorePrice
						to: receiver3 ] value ]
		thatSends: #at:put:
		to: receiver4 ] value.
	[ | receiver5 |
	receiver5 _ cascadeReceiver.
	#_coverageTracker5278393_
		coverAll:
			{103 to: 110}
		evaluating: [ receiver5 yourself ]
		thatSends: #yourself
		to: receiver5 ] value ] value.! !
!Behavior method!
test08CartRemembersTheNumberOfAddedItems
	| cart |
	#_coverageTracker5278480_ markAsExecuted.
	#_coverageTracker5278480_
		cover: (56 to: 59)
		declaredAt: (46 to: 49)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5278480_
				cover: (64 to: 81)
				declaredAt: (64 to: 81)
				by: testObjectsFactory.
			#_coverageTracker5278480_
				coverAll:
					{83 to: 92}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker5278480_
		cover: (98 to: 101)
		declaredAt: (46 to: 49)
		by: cart.
	#_coverageTracker5278480_
		coverAll:
			{103 to: 106. 110 to: 112}
		evaluating: [
			receiver3
				add:
					(#_coverageTracker5278480_
						coverAll:
							{108 to: 108}
						byLiteralOrPseudoVariable: 2)
				of:
					[ | receiver2 |
					receiver2 _ #_coverageTracker5278480_
						cover: (114 to: 131)
						declaredAt: (64 to: 81)
						by: testObjectsFactory.
					#_coverageTracker5278480_
						coverAll:
							{133 to: 150}
						evaluating: [ receiver2 itemSellByTheStore ]
						thatSends: #itemSellByTheStore
						to: receiver2 ] value ]
		thatSends: #add:of:
		to: receiver3 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker5278480_
		coverAll:
			{154 to: 157}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5278480_
		coverAll:
			{159 to: 165}
		evaluating: [
			receiver7 assert:
				[ | receiver6 |
				receiver6 _ [ | receiver5 |
				receiver5 _ #_coverageTracker5278480_
					cover: (168 to: 171)
					declaredAt: (46 to: 49)
					by: cart.
				#_coverageTracker5278480_
					coverAll:
						{173 to: 186}
					evaluating: [
						receiver5 occurrencesOf:
							[ | receiver4 |
							receiver4 _ #_coverageTracker5278480_
								cover: (188 to: 205)
								declaredAt: (64 to: 81)
								by: testObjectsFactory.
							#_coverageTracker5278480_
								coverAll:
									{207 to: 224}
								evaluating: [ receiver4 itemSellByTheStore ]
								thatSends: #itemSellByTheStore
								to: receiver4 ] value ]
					thatSends: #occurrencesOf:
					to: receiver5 ] value.
				#_coverageTracker5278480_
					coverAll:
						{227 to: 227}
					evaluating: [
						receiver6 =
							(#_coverageTracker5278480_
								coverAll:
									{228 to: 229}
								byLiteralOrPseudoVariable: 2) ]
					thatSends: #=
					to: receiver6 ] value ]
		thatSends: #assert:
		to: receiver7 ] value.! !
!Behavior method!
expiringOn: aMonth
	#_coverageTracker5278565_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5278565_
		coverAll:
			{25 to: 28}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5278565_
		coverAll:
			{30 to: 32}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5278565_
		coverAll:
			{34 to: 54}
		evaluating: [
			receiver2 initializeExpiringOn:
				(#_coverageTracker5278565_
					cover: (56 to: 61)
					declaredAt: (13 to: 18)
					by: aMonth) ]
		thatSends: #initializeExpiringOn:
		to: receiver2 ] value.! !
!Behavior method!
notExpiredCreditCard
	#_coverageTracker5278669_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ #_coverageTracker5278669_
		coverAll:
			{26 to: 35}
		by: CreditCard.
	#_coverageTracker5278669_
		coverAll:
			{37 to: 47}
		evaluating: [
			receiver5 expiringOn:
				[ | receiver4 |
				receiver4 _ #_coverageTracker5278669_
					coverAll:
						{50 to: 54}
					by: Month.
				#_coverageTracker5278669_
					coverAll:
						{56 to: 61. 80 to: 84}
					evaluating: [
						receiver4
							month:
								[ | receiver1 |
								receiver1 _ #_coverageTracker5278669_
									cover: (63 to: 67)
									declaredAt: (63 to: 67)
									by: today.
								#_coverageTracker5278669_
									coverAll:
										{69 to: 78}
									evaluating: [ receiver1 monthIndex ]
									thatSends: #monthIndex
									to: receiver1 ] value
							year:
								[ | receiver3 |
								receiver3 _ [ | receiver2 |
								receiver2 _ #_coverageTracker5278669_
									cover: (86 to: 90)
									declaredAt: (63 to: 67)
									by: today.
								#_coverageTracker5278669_
									coverAll:
										{92 to: 101}
									evaluating: [ receiver2 yearNumber ]
									thatSends: #yearNumber
									to: receiver2 ] value.
								#_coverageTracker5278669_
									coverAll:
										{103 to: 103}
									evaluating: [
										receiver3 +
											(#_coverageTracker5278669_
												coverAll:
													{105 to: 105}
												byLiteralOrPseudoVariable: 1) ]
									thatSends: #+
									to: receiver3 ] value ]
					thatSends: #month:year:
					to: receiver4 ] value ]
		thatSends: #expiringOn:
		to: receiver5 ] value.! !
!Behavior method!
test05CashierChargesCreditCardUsingMerchantProcessor
	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard |
	#_coverageTracker5278766_ markAsExecuted.
	#_coverageTracker5278766_
		cover: (134 to: 137)
		declaredAt: (58 to: 61)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5278766_
				cover: (142 to: 159)
				declaredAt: (142 to: 159)
				by: testObjectsFactory.
			#_coverageTracker5278766_
				coverAll:
					{161 to: 170}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker5278766_
		cover: (174 to: 177)
		declaredAt: (58 to: 61)
		by: cart.
	#_coverageTracker5278766_
		coverAll:
			{179 to: 182}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker5278766_
					cover: (184 to: 201)
					declaredAt: (142 to: 159)
					by: testObjectsFactory.
				#_coverageTracker5278766_
					coverAll:
						{203 to: 220}
					evaluating: [ receiver2 itemSellByTheStore ]
					thatSends: #itemSellByTheStore
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.
	#_coverageTracker5278766_
		cover: (224 to: 233)
		declaredAt: (87 to: 96)
		by:
			(creditCard _ [ | receiver4 |
			receiver4 _ #_coverageTracker5278766_
				cover: (238 to: 255)
				declaredAt: (142 to: 159)
				by: testObjectsFactory.
			#_coverageTracker5278766_
				coverAll:
					{257 to: 276}
				evaluating: [ receiver4 notExpiredCreditCard ]
				thatSends: #notExpiredCreditCard
				to: receiver4 ] value).
	#_coverageTracker5278766_
		cover: (280 to: 288)
		declaredAt: (71 to: 79)
		by:
			(salesBook _ [ | receiver5 |
			receiver5 _ #_coverageTracker5278766_
				coverAll:
					{293 to: 309}
				by: OrderedCollection.
			#_coverageTracker5278766_
				coverAll:
					{311 to: 313}
				evaluating: [ receiver5 new ]
				thatSends: #new
				to: receiver5 ] value).
	#_coverageTracker5278766_
		cover: (319 to: 325)
		declaredAt: (63 to: 69)
		by:
			(cashier _ [ | receiver7 |
			receiver7 _ #_coverageTracker5278766_
				coverAll:
					{329 to: 335}
				by: Cashier.
			#_coverageTracker5278766_
				coverAll:
					{340 to: 350. 360 to: 368. 383 to: 391. 400 to: 402. 431 to: 444}
				evaluating: [
					receiver7
						toCheckout:
							(#_coverageTracker5278766_
								cover: (352 to: 355)
								declaredAt: (58 to: 61)
								by: cart)
						charging:
							(#_coverageTracker5278766_
								cover: (370 to: 379)
								declaredAt: (87 to: 96)
								by: creditCard)
						throught:
							(#_coverageTracker5278766_
								coverAll:
									{393 to: 396}
								byLiteralOrPseudoVariable: self)
						on:
							[ | receiver6 |
							receiver6 _ #_coverageTracker5278766_
								cover: (404 to: 421)
								declaredAt: (142 to: 159)
								by: testObjectsFactory.
							#_coverageTracker5278766_
								coverAll:
									{423 to: 427}
								evaluating: [ receiver6 today ]
								thatSends: #today
								to: receiver6 ] value
						registeringOn:
							(#_coverageTracker5278766_
								cover: (446 to: 454)
								declaredAt: (71 to: 79)
								by: salesBook) ]
				thatSends: #toCheckout:charging:throught:on:registeringOn:
				to: receiver7 ] value).
	#_coverageTracker5278766_
		cover: (461 to: 473)
		declaredAt: (461 to: 473)
		by:
			(debitBehavior _ [ :anAmount :aCreditCard |
			#_coverageTracker5278766_
				cover: (508 to: 519)
				declaredAt: (98 to: 109)
				by:
					(debitedAmout _ #_coverageTracker5278766_
						cover: (524 to: 531)
						declaredAt: (481 to: 488)
						by: anAmount).
			#_coverageTracker5278766_
				cover: (536 to: 552)
				declaredAt: (111 to: 127)
				by:
					(debitedCreditCard _ #_coverageTracker5278766_
						cover: (557 to: 567)
						declaredAt: (491 to: 501)
						by: aCreditCard) ]).
	#_coverageTracker5278766_
		cover: (573 to: 577)
		declaredAt: (81 to: 85)
		by:
			(total _ [ | receiver8 |
			receiver8 _ #_coverageTracker5278766_
				cover: (582 to: 588)
				declaredAt: (63 to: 69)
				by: cashier.
			#_coverageTracker5278766_
				coverAll:
					{590 to: 597}
				evaluating: [ receiver8 checkOut ]
				thatSends: #checkOut
				to: receiver8 ] value).
	[ | receiver10 |
	receiver10 _ #_coverageTracker5278766_
		coverAll:
			{607 to: 610}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5278766_
		coverAll:
			{612 to: 618}
		evaluating: [
			receiver10 assert:
				[ | receiver9 |
				receiver9 _ #_coverageTracker5278766_
					cover: (620 to: 636)
					declaredAt: (111 to: 127)
					by: debitedCreditCard.
				#_coverageTracker5278766_
					coverAll:
						{638 to: 638}
					evaluating: [
						receiver9 =
							(#_coverageTracker5278766_
								cover: (640 to: 649)
								declaredAt: (87 to: 96)
								by: creditCard) ]
					thatSends: #=
					to: receiver9 ] value ]
		thatSends: #assert:
		to: receiver10 ] value.
	[ | receiver12 |
	receiver12 _ #_coverageTracker5278766_
		coverAll:
			{653 to: 656}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5278766_
		coverAll:
			{658 to: 664}
		evaluating: [
			receiver12 assert:
				[ | receiver11 |
				receiver11 _ #_coverageTracker5278766_
					cover: (666 to: 677)
					declaredAt: (98 to: 109)
					by: debitedAmout.
				#_coverageTracker5278766_
					coverAll:
						{679 to: 679}
					evaluating: [
						receiver11 =
							(#_coverageTracker5278766_
								cover: (681 to: 685)
								declaredAt: (81 to: 85)
								by: total) ]
					thatSends: #=
					to: receiver11 ] value ]
		thatSends: #assert:
		to: receiver12 ] value.! !
!Behavior method!
invalidQuantityErrorMessage
	#_coverageTracker5278854_ markAsExecuted.
	^ #_coverageTracker5278854_
		coverAll:
			{33 to: 57}
		byLiteralOrPseudoVariable: 'Invalid number of items'.! !
!Behavior method!
test01CanNotCheckoutAnEmptyCart
	| salesBook |
	#_coverageTracker5278959_ markAsExecuted.
	#_coverageTracker5278959_
		cover: (52 to: 60)
		declaredAt: (37 to: 45)
		by:
			(salesBook _ [ | receiver1 |
			receiver1 _ #_coverageTracker5278959_
				coverAll:
					{65 to: 81}
				by: OrderedCollection.
			#_coverageTracker5278959_
				coverAll:
					{83 to: 85}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver13 |
	receiver13 _ #_coverageTracker5278959_
		coverAll:
			{89 to: 92}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5278959_
		coverAll:
			{97 to: 103. 299 to: 304. 337 to: 352}
		evaluating: [
			receiver13
				should: [
					[ | receiver5 |
					receiver5 _ #_coverageTracker5278959_
						coverAll:
							{107 to: 113}
						by: Cashier.
					#_coverageTracker5278959_
						coverAll:
							{119 to: 129. 165 to: 173. 219 to: 227. 237 to: 239. 269 to: 282}
						evaluating: [
							receiver5
								toCheckout:
									[ | receiver2 |
									receiver2 _ #_coverageTracker5278959_
										cover: (131 to: 148)
										declaredAt: (131 to: 148)
										by: testObjectsFactory.
									#_coverageTracker5278959_
										coverAll:
											{150 to: 159}
										evaluating: [ receiver2 createCart ]
										thatSends: #createCart
										to: receiver2 ] value
								charging:
									[ | receiver3 |
									receiver3 _ #_coverageTracker5278959_
										cover: (175 to: 192)
										declaredAt: (131 to: 148)
										by: testObjectsFactory.
									#_coverageTracker5278959_
										coverAll:
											{194 to: 213}
										evaluating: [ receiver3 notExpiredCreditCard ]
										thatSends: #notExpiredCreditCard
										to: receiver3 ] value
								throught:
									(#_coverageTracker5278959_
										coverAll:
											{229 to: 232}
										byLiteralOrPseudoVariable: self)
								on:
									[ | receiver4 |
									receiver4 _ #_coverageTracker5278959_
										cover: (241 to: 258)
										declaredAt: (131 to: 148)
										by: testObjectsFactory.
									#_coverageTracker5278959_
										coverAll:
											{260 to: 264}
										evaluating: [ receiver4 today ]
										thatSends: #today
										to: receiver4 ] value
								registeringOn:
									(#_coverageTracker5278959_
										cover: (285 to: 293)
										declaredAt: (37 to: 45)
										by: salesBook) ]
						thatSends: #toCheckout:charging:throught:on:registeringOn:
						to: receiver5 ] value ]
				raise:
					[ | receiver6 |
					receiver6 _ #_coverageTracker5278959_
						coverAll:
							{306 to: 310}
						by: Error.
					#_coverageTracker5278959_
						coverAll:
							{312 to: 312}
						evaluating: [
							receiver6 -
								(#_coverageTracker5278959_
									coverAll:
										{314 to: 333}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver6 ] value
				withExceptionDo: [ :anError |
					[ | receiver10 |
					receiver10 _ #_coverageTracker5278959_
						coverAll:
							{370 to: 373}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5278959_
						coverAll:
							{375 to: 381}
						evaluating: [
							receiver10 assert:
								[ | receiver9 |
								receiver9 _ [ | receiver7 |
								receiver7 _ #_coverageTracker5278959_
									cover: (383 to: 389)
									declaredAt: (357 to: 363)
									by: anError.
								#_coverageTracker5278959_
									coverAll:
										{391 to: 401}
									evaluating: [ receiver7 messageText ]
									thatSends: #messageText
									to: receiver7 ] value.
								#_coverageTracker5278959_
									coverAll:
										{403 to: 403}
									evaluating: [
										receiver9 =
											[ | receiver8 |
											receiver8 _ #_coverageTracker5278959_
												coverAll:
													{405 to: 411}
												by: Cashier.
											#_coverageTracker5278959_
												coverAll:
													{413 to: 441}
												evaluating: [ receiver8 cartCanNotBeEmptyErrorMessage ]
												thatSends: #cartCanNotBeEmptyErrorMessage
												to: receiver8 ] value ]
									thatSends: #=
									to: receiver9 ] value ]
						thatSends: #assert:
						to: receiver10 ] value.
					[ | receiver12 |
					receiver12 _ #_coverageTracker5278959_
						coverAll:
							{447 to: 450}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5278959_
						coverAll:
							{452 to: 458}
						evaluating: [
							receiver12 assert:
								[ | receiver11 |
								receiver11 _ #_coverageTracker5278959_
									cover: (460 to: 468)
									declaredAt: (37 to: 45)
									by: salesBook.
								#_coverageTracker5278959_
									coverAll:
										{470 to: 476}
									evaluating: [ receiver11 isEmpty ]
									thatSends: #isEmpty
									to: receiver11 ] value ]
						thatSends: #assert:
						to: receiver12 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver13 ] value.! !
!Behavior method!
createSale
	#_coverageTracker5279039_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5279039_
		coverAll:
			{16 to: 19}
		by: Sale.
	#_coverageTracker5279039_
		coverAll:
			{21 to: 23. 31 to: 34}
		evaluating: [
			receiver1
				of:
					(#_coverageTracker5279039_
						cover: (25 to: 29)
						declaredAt: (25 to: 29)
						by: total)
				for:
					(#_coverageTracker5279039_
						cover: (36 to: 41)
						declaredAt: (36 to: 41)
						by: client) ]
		thatSends: #of:for:
		to: receiver1 ] value.! !
!Behavior method!
test01NewCartsAreCreatedEmpty
	#_coverageTracker5279138_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker5279138_
		coverAll:
			{33 to: 36}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5279138_
		coverAll:
			{38 to: 44}
		evaluating: [
			receiver3 assert:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker5279138_
					cover: (46 to: 63)
					declaredAt: (46 to: 63)
					by: testObjectsFactory.
				#_coverageTracker5279138_
					coverAll:
						{65 to: 74}
					evaluating: [ receiver1 createCart ]
					thatSends: #createCart
					to: receiver1 ] value.
				#_coverageTracker5279138_
					coverAll:
						{76 to: 82}
					evaluating: [ receiver2 isEmpty ]
					thatSends: #isEmpty
					to: receiver2 ] value ]
		thatSends: #assert:
		to: receiver3 ] value.! !
!Behavior method!
withUsers: aUserList withCatalog: aCatalog
	#_coverageTracker5279235_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5279235_
		coverAll:
			{47 to: 50}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5279235_
		coverAll:
			{52 to: 54}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5279235_
		coverAll:
			{56 to: 75. 87 to: 98}
		evaluating: [
			receiver2
				initializeWithUsers:
					(#_coverageTracker5279235_
						cover: (77 to: 85)
						declaredAt: (12 to: 20)
						by: aUserList)
				withCatalog:
					(#_coverageTracker5279235_
						cover: (100 to: 107)
						declaredAt: (35 to: 42)
						by: aCatalog) ]
		thatSends: #initializeWithUsers:withCatalog:
		to: receiver2 ] value.! !
!Behavior method!
of: aTotal
	"should assert total is not negative or 0!!"
	#_coverageTracker5279325_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5279325_
		coverAll:
			{60 to: 63}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5279325_
		coverAll:
			{65 to: 67}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5279325_
		coverAll:
			{69 to: 84}
		evaluating: [
			receiver2 initializeTotal:
				(#_coverageTracker5279325_
					cover: (86 to: 91)
					declaredAt: (5 to: 10)
					by: aTotal) ]
		thatSends: #initializeTotal:
		to: receiver2 ] value.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	#_coverageTracker5279434_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5279434_
		cover: (36 to: 44)
		declaredAt: (24 to: 32)
		by: aQuantity.
	#_coverageTracker5279434_
		coverAll:
			{46 to: 61}
		evaluating: [ receiver1 strictlyPositive ]
		thatSends: #strictlyPositive
		to: receiver1 ] value.
	#_coverageTracker5279434_
		coverAll:
			{63 to: 70}
		evaluating: [
			receiver4 ifFalse: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker5279434_
					coverAll:
						{74 to: 77}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker5279434_
					coverAll:
						{79 to: 84}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker5279434_
								coverAll:
									{86 to: 89}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker5279434_
								coverAll:
									{91 to: 117}
								evaluating: [ receiver2 invalidQuantityErrorMessage ]
								thatSends: #invalidQuantityErrorMessage
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifFalse:
		to: receiver4 ] value.! !
!Behavior method!
withDefaultBehavior: aDefaultBehavior
	#_coverageTracker5279522_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5279522_
		coverAll:
			{41 to: 44}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5279522_
		coverAll:
			{46 to: 48}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5279522_
		coverAll:
			{50 to: 79}
		evaluating: [
			receiver2 initializeWithDefaultBehavior:
				(#_coverageTracker5279522_
					cover: (81 to: 96)
					declaredAt: (22 to: 37)
					by: aDefaultBehavior) ]
		thatSends: #initializeWithDefaultBehavior:
		to: receiver2 ] value.! !
!Behavior method!
initializeWithUsers: aUserList withCatalog: aCatalog
	#_coverageTracker5279624_ markAsExecuted.
	#_coverageTracker5279624_
		cover: (56 to: 64)
		declaredAt: (56 to: 64)
		by:
			(usersList _ #_coverageTracker5279624_
				cover: (69 to: 77)
				declaredAt: (22 to: 30)
				by: aUserList).
	#_coverageTracker5279624_
		cover: (81 to: 87)
		declaredAt: (81 to: 87)
		by:
			(catalog _ #_coverageTracker5279624_
				cover: (92 to: 99)
				declaredAt: (45 to: 52)
				by: aCatalog).
	#_coverageTracker5279624_
		cover: (103 to: 107)
		declaredAt: (103 to: 107)
		by:
			(carts _ [ | receiver1 |
			receiver1 _ #_coverageTracker5279624_
				coverAll:
					{112 to: 121}
				by: Dictionary.
			#_coverageTracker5279624_
				coverAll:
					{123 to: 125}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker5279624_
		cover: (129 to: 138)
		declaredAt: (129 to: 138)
		by:
			(lastCartId _ #_coverageTracker5279624_
				coverAll:
					{143 to: 143}
				byLiteralOrPseudoVariable: 1).
	#_coverageTracker5279624_
		cover: (147 to: 155)
		declaredAt: (147 to: 155)
		by:
			(salesBook _ [ | receiver2 |
			receiver2 _ #_coverageTracker5279624_
				coverAll:
					{160 to: 176}
				by: OrderedCollection.
			#_coverageTracker5279624_
				coverAll:
					{178 to: 180}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).
	#_coverageTracker5279624_
		cover: (184 to: 190)
		declaredAt: (184 to: 190)
		by:
			(session _ [ | receiver3 |
			receiver3 _ #_coverageTracker5279624_
				coverAll:
					{195 to: 204}
				by: Dictionary.
			#_coverageTracker5279624_
				coverAll:
					{206 to: 208}
				evaluating: [ receiver3 new ]
				thatSends: #new
				to: receiver3 ] value).! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aClient
	#_coverageTracker5279731_ markAsExecuted.
	#_coverageTracker5279731_
		cover: (122 to: 125)
		declaredAt: (122 to: 125)
		by:
			(cart _ #_coverageTracker5279731_
				cover: (130 to: 134)
				declaredAt: (23 to: 27)
				by: aCart).
	#_coverageTracker5279731_
		cover: (138 to: 147)
		declaredAt: (138 to: 147)
		by:
			(creditCard _ #_coverageTracker5279731_
				cover: (152 to: 162)
				declaredAt: (39 to: 49)
				by: aCreditCard).
	#_coverageTracker5279731_
		cover: (166 to: 182)
		declaredAt: (166 to: 182)
		by:
			(merchantProcessor _ #_coverageTracker5279731_
				cover: (187 to: 204)
				declaredAt: (61 to: 78)
				by: aMerchantProcessor).
	#_coverageTracker5279731_
		cover: (208 to: 216)
		declaredAt: (208 to: 216)
		by:
			(salesBook _ #_coverageTracker5279731_
				cover: (221 to: 230)
				declaredAt: (95 to: 104)
				by: aSalesBook).
	#_coverageTracker5279731_
		cover: (234 to: 239)
		declaredAt: (234 to: 239)
		by:
			(client _ #_coverageTracker5279731_
				cover: (244 to: 250)
				declaredAt: (111 to: 117)
				by: aClient).! !
!Behavior method!
test07CartDoesNotHoldNotAddedItems
	| cart |
	#_coverageTracker5279831_ markAsExecuted.
	#_coverageTracker5279831_
		cover: (50 to: 53)
		declaredAt: (40 to: 43)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5279831_
				cover: (58 to: 75)
				declaredAt: (58 to: 75)
				by: testObjectsFactory.
			#_coverageTracker5279831_
				coverAll:
					{77 to: 86}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver4 |
	receiver4 _ #_coverageTracker5279831_
		coverAll:
			{92 to: 95}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5279831_
		coverAll:
			{97 to: 101}
		evaluating: [
			receiver4 deny:
				[ | receiver3 |
				receiver3 _ #_coverageTracker5279831_
					cover: (104 to: 107)
					declaredAt: (40 to: 43)
					by: cart.
				#_coverageTracker5279831_
					coverAll:
						{109 to: 117}
					evaluating: [
						receiver3 includes:
							[ | receiver2 |
							receiver2 _ #_coverageTracker5279831_
								cover: (119 to: 136)
								declaredAt: (58 to: 75)
								by: testObjectsFactory.
							#_coverageTracker5279831_
								coverAll:
									{138 to: 155}
								evaluating: [ receiver2 itemSellByTheStore ]
								thatSends: #itemSellByTheStore
								to: receiver2 ] value ]
					thatSends: #includes:
					to: receiver3 ] value ]
		thatSends: #deny:
		to: receiver4 ] value.! !
!Behavior method!
calculateTotal
	#_coverageTracker5279935_ markAsExecuted.
	#_coverageTracker5279935_
		cover: (18 to: 22)
		declaredAt: (18 to: 22)
		by:
			(total _ [ | receiver1 |
			receiver1 _ #_coverageTracker5279935_
				cover: (27 to: 30)
				declaredAt: (27 to: 30)
				by: cart.
			#_coverageTracker5279935_
				coverAll:
					{32 to: 36}
				evaluating: [ receiver1 total ]
				thatSends: #total
				to: receiver1 ] value).! !
!Behavior method!
withUsers: usersList
	#_coverageTracker5280044_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5280044_
		coverAll:
			{24 to: 27}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5280044_
		coverAll:
			{29 to: 31}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5280044_
		coverAll:
			{33 to: 52}
		evaluating: [
			receiver2 initializeWithUsers:
				(#_coverageTracker5280044_
					cover: (54 to: 62)
					declaredAt: (12 to: 20)
					by: usersList) ]
		thatSends: #initializeWithUsers:
		to: receiver2 ] value.! !
!Behavior method!
setUp
	#_coverageTracker5280139_ markAsExecuted.
	#_coverageTracker5280139_
		cover: (10 to: 27)
		declaredAt: (10 to: 27)
		by:
			(testObjectsFactory _ [ | receiver1 |
			receiver1 _ #_coverageTracker5280139_
				coverAll:
					{32 to: 54}
				by: StoreTestObjectsFactory.
			#_coverageTracker5280139_
				coverAll:
					{56 to: 58}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
checkoutCartId: aCartId charging: aCard through: aMerchantProcessor on: aDate
	| cart cashier |
	#_coverageTracker5280229_ markAsExecuted.
	#_coverageTracker5280229_
		cover: (96 to: 99)
		declaredAt: (81 to: 84)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5280229_
				coverAll:
					{104 to: 107}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker5280229_
				coverAll:
					{109 to: 125}
				evaluating: [
					receiver1 retrieveCartWith:
						(#_coverageTracker5280229_
							cover: (127 to: 133)
							declaredAt: (17 to: 23)
							by: aCartId) ]
				thatSends: #retrieveCartWith:
				to: receiver1 ] value).
	#_coverageTracker5280229_
		cover: (139 to: 145)
		declaredAt: (86 to: 92)
		by:
			(cashier _ [ | receiver3 |
			receiver3 _ #_coverageTracker5280229_
				coverAll:
					{150 to: 156}
				by: Cashier.
			#_coverageTracker5280229_
				coverAll:
					{161 to: 171. 180 to: 188. 198 to: 206. 229 to: 231. 241 to: 254. 268 to: 271}
				evaluating: [
					receiver3
						toCheckout:
							(#_coverageTracker5280229_
								cover: (173 to: 176)
								declaredAt: (81 to: 84)
								by: cart)
						charging:
							(#_coverageTracker5280229_
								cover: (190 to: 194)
								declaredAt: (35 to: 39)
								by: aCard)
						throught:
							(#_coverageTracker5280229_
								cover: (208 to: 225)
								declaredAt: (50 to: 67)
								by: aMerchantProcessor)
						on:
							(#_coverageTracker5280229_
								cover: (233 to: 237)
								declaredAt: (73 to: 77)
								by: aDate)
						registeringOn:
							(#_coverageTracker5280229_
								cover: (256 to: 264)
								declaredAt: (256 to: 264)
								by: salesBook)
						for:
							[ | receiver2 |
							receiver2 _ #_coverageTracker5280229_
								cover: (274 to: 280)
								declaredAt: (274 to: 280)
								by: session.
							#_coverageTracker5280229_
								coverAll:
									{282 to: 284}
								evaluating: [
									receiver2 at:
										(#_coverageTracker5280229_
											cover: (286 to: 292)
											declaredAt: (17 to: 23)
											by: aCartId) ]
								thatSends: #at:
								to: receiver2 ] value ]
				thatSends: #toCheckout:charging:throught:on:registeringOn:for:
				to: receiver3 ] value).
	[ | receiver4 |
	receiver4 _ #_coverageTracker5280229_
		cover: (297 to: 303)
		declaredAt: (86 to: 92)
		by: cashier.
	#_coverageTracker5280229_
		coverAll:
			{305 to: 312}
		evaluating: [ receiver4 checkOut ]
		thatSends: #checkOut
		to: receiver4 ] value.
	^ #_coverageTracker5280229_
		coverAll:
			{319 to: 320}
		byLiteralOrPseudoVariable: 2.! !
!Behavior method!
assertIsNotEmpty: aCart
	#_coverageTracker5280330_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5280330_
		cover: (29 to: 33)
		declaredAt: (19 to: 23)
		by: aCart.
	#_coverageTracker5280330_
		coverAll:
			{35 to: 41}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.
	#_coverageTracker5280330_
		coverAll:
			{43 to: 49}
		evaluating: [
			receiver4 ifTrue: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker5280330_
					coverAll:
						{52 to: 55}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker5280330_
					coverAll:
						{57 to: 62}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker5280330_
								coverAll:
									{64 to: 67}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker5280330_
								coverAll:
									{69 to: 97}
								evaluating: [ receiver2 cartCanNotBeEmptyErrorMessage ]
								thatSends: #cartCanNotBeEmptyErrorMessage
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.! !
!Behavior method!
total
	#_coverageTracker5280420_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker5280420_
		cover: (11 to: 15)
		declaredAt: (11 to: 15)
		by: items.
	#_coverageTracker5280420_
		coverAll:
			{17 to: 20. 55 to: 62}
		evaluating: [
			receiver2
				sum: [ :anItem |
					[ | receiver1 |
					receiver1 _ #_coverageTracker5280420_
						cover: (34 to: 40)
						declaredAt: (34 to: 40)
						by: catalog.
					#_coverageTracker5280420_
						coverAll:
							{42 to: 44}
						evaluating: [
							receiver1 at:
								(#_coverageTracker5280420_
									cover: (46 to: 51)
									declaredAt: (25 to: 30)
									by: anItem) ]
						thatSends: #at:
						to: receiver1 ] value ]
				ifEmpty: [
					#_coverageTracker5280420_
						coverAll:
							{65 to: 65}
						byLiteralOrPseudoVariable: 0 ]]
		thatSends: #sum:ifEmpty:
		to: receiver2 ] value.! !
!Behavior method!
defaultPassword
	#_coverageTracker5280516_ markAsExecuted.
	^ #_coverageTracker5280516_
		coverAll:
			{22 to: 27}
		byLiteralOrPseudoVariable: 'pass'.! !
!Behavior method!
items
	#_coverageTracker5280658_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5280658_
		cover: (9 to: 13)
		declaredAt: (9 to: 13)
		by: items.
	#_coverageTracker5280658_
		coverAll:
			{15 to: 18}
		evaluating: [ receiver1 copy ]
		thatSends: #copy
		to: receiver1 ] value.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	#_coverageTracker5280763_ markAsExecuted.
	#_coverageTracker5280763_
		cover: (109 to: 112)
		declaredAt: (109 to: 112)
		by:
			(cart _ #_coverageTracker5280763_
				cover: (117 to: 121)
				declaredAt: (23 to: 27)
				by: aCart).
	#_coverageTracker5280763_
		cover: (125 to: 134)
		declaredAt: (125 to: 134)
		by:
			(creditCard _ #_coverageTracker5280763_
				cover: (139 to: 149)
				declaredAt: (39 to: 49)
				by: aCreditCard).
	#_coverageTracker5280763_
		cover: (153 to: 169)
		declaredAt: (153 to: 169)
		by:
			(merchantProcessor _ #_coverageTracker5280763_
				cover: (174 to: 191)
				declaredAt: (61 to: 78)
				by: aMerchantProcessor).
	#_coverageTracker5280763_
		cover: (195 to: 203)
		declaredAt: (195 to: 203)
		by:
			(salesBook _ #_coverageTracker5280763_
				cover: (208 to: 217)
				declaredAt: (95 to: 104)
				by: aSalesBook).! !
!Behavior method!
test06CartRemembersAddedItems
	| cart |
	#_coverageTracker5280891_ markAsExecuted.
	#_coverageTracker5280891_
		cover: (45 to: 48)
		declaredAt: (35 to: 38)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5280891_
				cover: (53 to: 70)
				declaredAt: (53 to: 70)
				by: testObjectsFactory.
			#_coverageTracker5280891_
				coverAll:
					{72 to: 81}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker5280891_
		cover: (87 to: 90)
		declaredAt: (35 to: 38)
		by: cart.
	#_coverageTracker5280891_
		coverAll:
			{92 to: 95}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker5280891_
					cover: (97 to: 114)
					declaredAt: (53 to: 70)
					by: testObjectsFactory.
				#_coverageTracker5280891_
					coverAll:
						{116 to: 133}
					evaluating: [ receiver2 itemSellByTheStore ]
					thatSends: #itemSellByTheStore
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.
	[ | receiver6 |
	receiver6 _ #_coverageTracker5280891_
		coverAll:
			{137 to: 140}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5280891_
		coverAll:
			{142 to: 148}
		evaluating: [
			receiver6 assert:
				[ | receiver5 |
				receiver5 _ #_coverageTracker5280891_
					cover: (151 to: 154)
					declaredAt: (35 to: 38)
					by: cart.
				#_coverageTracker5280891_
					coverAll:
						{156 to: 164}
					evaluating: [
						receiver5 includes:
							[ | receiver4 |
							receiver4 _ #_coverageTracker5280891_
								cover: (166 to: 183)
								declaredAt: (53 to: 70)
								by: testObjectsFactory.
							#_coverageTracker5280891_
								coverAll:
									{185 to: 202}
								evaluating: [ receiver4 itemSellByTheStore ]
								thatSends: #itemSellByTheStore
								to: receiver4 ] value ]
					thatSends: #includes:
					to: receiver5 ] value ]
		thatSends: #assert:
		to: receiver6 ] value.! !
!Behavior method!
occurrencesOf: anItem
	#_coverageTracker5281012_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5281012_
		cover: (26 to: 30)
		declaredAt: (26 to: 30)
		by: items.
	#_coverageTracker5281012_
		coverAll:
			{32 to: 45}
		evaluating: [
			receiver1 occurrencesOf:
				(#_coverageTracker5281012_
					cover: (47 to: 52)
					declaredAt: (16 to: 21)
					by: anItem) ]
		thatSends: #occurrencesOf:
		to: receiver1 ] value.! !
!Behavior method!
initializeExpiringOn: aMonth
	#_coverageTracker5281134_ markAsExecuted.
	#_coverageTracker5281134_
		cover: (34 to: 43)
		declaredAt: (34 to: 43)
		by:
			(expiration _ #_coverageTracker5281134_
				cover: (48 to: 53)
				declaredAt: (23 to: 28)
				by: aMonth).! !
!Behavior method!
createCartFor: username withPassword: password
	| pass cartId |
	#_coverageTracker5281252_ markAsExecuted.
	#_coverageTracker5281252_
		cover: (65 to: 68)
		declaredAt: (51 to: 54)
		by:
			(pass _ [ | receiver4 |
			receiver4 _ #_coverageTracker5281252_
				cover: (73 to: 81)
				declaredAt: (73 to: 81)
				by: usersList.
			#_coverageTracker5281252_
				coverAll:
					{83 to: 85. 96 to: 104}
				evaluating: [
					receiver4
						at:
							(#_coverageTracker5281252_
								cover: (87 to: 94)
								declaredAt: (16 to: 23)
								by: username)
						ifAbsent: [ ^ [ | receiver3 |
							receiver3 _ #_coverageTracker5281252_
								coverAll:
									{108 to: 111}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker5281252_
								coverAll:
									{113 to: 118}
								evaluating: [
									receiver3 error:
										[ | receiver2 |
										receiver2 _ [ | receiver1 |
										receiver1 _ #_coverageTracker5281252_
											coverAll:
												{120 to: 123}
											byLiteralOrPseudoVariable: self.
										#_coverageTracker5281252_
											coverAll:
												{125 to: 129}
											evaluating: [ receiver1 class ]
											thatSends: #class
											to: receiver1 ] value.
										#_coverageTracker5281252_
											coverAll:
												{131 to: 160}
											evaluating: [ receiver2 invalidCredentialsErrorMessage ]
											thatSends: #invalidCredentialsErrorMessage
											to: receiver2 ] value ]
								thatSends: #error:
								to: receiver3 ] value ]]
				thatSends: #at:ifAbsent:
				to: receiver4 ] value).
	[ | receiver9 |
	receiver9 _ [ | receiver5 |
	receiver5 _ #_coverageTracker5281252_
		cover: (166 to: 169)
		declaredAt: (51 to: 54)
		by: pass.
	#_coverageTracker5281252_
		coverAll:
			{171 to: 171}
		evaluating: [
			receiver5 =
				(#_coverageTracker5281252_
					cover: (173 to: 180)
					declaredAt: (39 to: 46)
					by: password) ]
		thatSends: #=
		to: receiver5 ] value.
	#_coverageTracker5281252_
		coverAll:
			{182 to: 189}
		evaluating: [ receiver9 ifFalse: [ ^ [ | receiver8 |
				receiver8 _ #_coverageTracker5281252_
					coverAll:
						{193 to: 196}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker5281252_
					coverAll:
						{198 to: 203}
					evaluating: [
						receiver8 error:
							[ | receiver7 |
							receiver7 _ [ | receiver6 |
							receiver6 _ #_coverageTracker5281252_
								coverAll:
									{205 to: 208}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker5281252_
								coverAll:
									{210 to: 214}
								evaluating: [ receiver6 class ]
								thatSends: #class
								to: receiver6 ] value.
							#_coverageTracker5281252_
								coverAll:
									{216 to: 245}
								evaluating: [ receiver7 invalidCredentialsErrorMessage ]
								thatSends: #invalidCredentialsErrorMessage
								to: receiver7 ] value ]
					thatSends: #error:
					to: receiver8 ] value ]]
		thatSends: #ifFalse:
		to: receiver9 ] value.
	#_coverageTracker5281252_
		cover: (252 to: 257)
		declaredAt: (56 to: 61)
		by:
			(cartId _ #_coverageTracker5281252_
				cover: (262 to: 271)
				declaredAt: (262 to: 271)
				by: lastCartId).
	[ | receiver12 |
	receiver12 _ #_coverageTracker5281252_
		cover: (275 to: 279)
		declaredAt: (275 to: 279)
		by: carts.
	#_coverageTracker5281252_
		coverAll:
			{281 to: 284}
		evaluating: [
			receiver12 add:
				[ | receiver11 |
				receiver11 _ #_coverageTracker5281252_
					cover: (286 to: 291)
					declaredAt: (56 to: 61)
					by: cartId.
				#_coverageTracker5281252_
					coverAll:
						{293 to: 294}
					evaluating: [
						receiver11 ->
							[ | receiver10 |
							receiver10 _ #_coverageTracker5281252_
								coverAll:
									{297 to: 300}
								by: Cart.
							#_coverageTracker5281252_
								coverAll:
									{302 to: 318}
								evaluating: [
									receiver10 acceptingItemsOf:
										(#_coverageTracker5281252_
											cover: (320 to: 326)
											declaredAt: (320 to: 326)
											by: catalog) ]
								thatSends: #acceptingItemsOf:
								to: receiver10 ] value ]
					thatSends: #->
					to: receiver11 ] value ]
		thatSends: #add:
		to: receiver12 ] value.
	[ | receiver14 |
	receiver14 _ #_coverageTracker5281252_
		cover: (331 to: 337)
		declaredAt: (331 to: 337)
		by: session.
	#_coverageTracker5281252_
		coverAll:
			{339 to: 342}
		evaluating: [
			receiver14 add:
				[ | receiver13 |
				receiver13 _ #_coverageTracker5281252_
					cover: (344 to: 349)
					declaredAt: (56 to: 61)
					by: cartId.
				#_coverageTracker5281252_
					coverAll:
						{351 to: 352}
					evaluating: [
						receiver13 ->
							(#_coverageTracker5281252_
								cover: (354 to: 361)
								declaredAt: (16 to: 23)
								by: username) ]
					thatSends: #->
					to: receiver13 ] value ]
		thatSends: #add:
		to: receiver14 ] value.
	#_coverageTracker5281252_
		cover: (381 to: 390)
		declaredAt: (262 to: 271)
		by:
			(lastCartId _ [ | receiver15 |
			receiver15 _ #_coverageTracker5281252_
				cover: (367 to: 376)
				declaredAt: (262 to: 271)
				by: lastCartId.
			#_coverageTracker5281252_
				coverAll:
					{392 to: 392}
				evaluating: [
					receiver15 +
						(#_coverageTracker5281252_
							coverAll:
								{394 to: 394}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #+
				to: receiver15 ] value).
	^ #_coverageTracker5281252_
		cover: (401 to: 406)
		declaredAt: (56 to: 61)
		by: cartId.! !
!Behavior method!
invalidCartId
	#_coverageTracker5281344_ markAsExecuted.
	^ #_coverageTracker5281344_
		coverAll:
			{17 to: 33}
		byLiteralOrPseudoVariable: 'Invalid cart id'.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aClient
	#_coverageTracker5281464_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5281464_
		coverAll:
			{122 to: 125}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5281464_
		coverAll:
			{127 to: 143}
		evaluating: [
			receiver1 assertIsNotEmpty:
				(#_coverageTracker5281464_
					cover: (145 to: 149)
					declaredAt: (13 to: 17)
					by: aCart) ]
		thatSends: #assertIsNotEmpty:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker5281464_
		coverAll:
			{153 to: 156}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5281464_
		coverAll:
			{158 to: 176. 190 to: 192}
		evaluating: [
			receiver2
				assertIsNotExpired:
					(#_coverageTracker5281464_
						cover: (178 to: 188)
						declaredAt: (29 to: 39)
						by: aCreditCard)
				on:
					(#_coverageTracker5281464_
						cover: (194 to: 198)
						declaredAt: (74 to: 78)
						by: aDate) ]
		thatSends: #assertIsNotExpired:on:
		to: receiver2 ] value.
	^ [ | receiver4 |
	receiver4 _ [ | receiver3 |
	receiver3 _ #_coverageTracker5281464_
		coverAll:
			{205 to: 208}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5281464_
		coverAll:
			{210 to: 212}
		evaluating: [ receiver3 new ]
		thatSends: #new
		to: receiver3 ] value.
	#_coverageTracker5281464_
		coverAll:
			{214 to: 234. 242 to: 250. 264 to: 272. 293 to: 306. 319 to: 322}
		evaluating: [
			receiver4
				initializeToCheckout:
					(#_coverageTracker5281464_
						cover: (236 to: 240)
						declaredAt: (13 to: 17)
						by: aCart)
				charging:
					(#_coverageTracker5281464_
						cover: (252 to: 262)
						declaredAt: (29 to: 39)
						by: aCreditCard)
				throught:
					(#_coverageTracker5281464_
						cover: (274 to: 291)
						declaredAt: (51 to: 68)
						by: aMerchantProcessor)
				registeringOn:
					(#_coverageTracker5281464_
						cover: (308 to: 317)
						declaredAt: (95 to: 104)
						by: aSalesBook)
				for:
					(#_coverageTracker5281464_
						cover: (324 to: 330)
						declaredAt: (111 to: 117)
						by: aClient) ]
		thatSends: #initializeToCheckout:charging:throught:registeringOn:for:
		to: receiver4 ] value.! !
!Behavior method!
test04CheckoutRegistersASale
	| cart cashier salesBook total |
	#_coverageTracker5281556_ markAsExecuted.
	#_coverageTracker5281556_
		cover: (67 to: 70)
		declaredAt: (34 to: 37)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5281556_
				cover: (75 to: 92)
				declaredAt: (75 to: 92)
				by: testObjectsFactory.
			#_coverageTracker5281556_
				coverAll:
					{94 to: 103}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker5281556_
		cover: (107 to: 110)
		declaredAt: (34 to: 37)
		by: cart.
	#_coverageTracker5281556_
		coverAll:
			{112 to: 115}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker5281556_
					cover: (117 to: 134)
					declaredAt: (75 to: 92)
					by: testObjectsFactory.
				#_coverageTracker5281556_
					coverAll:
						{136 to: 153}
					evaluating: [ receiver2 itemSellByTheStore ]
					thatSends: #itemSellByTheStore
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.
	#_coverageTracker5281556_
		cover: (157 to: 165)
		declaredAt: (47 to: 55)
		by:
			(salesBook _ [ | receiver4 |
			receiver4 _ #_coverageTracker5281556_
				coverAll:
					{170 to: 186}
				by: OrderedCollection.
			#_coverageTracker5281556_
				coverAll:
					{188 to: 190}
				evaluating: [ receiver4 new ]
				thatSends: #new
				to: receiver4 ] value).
	#_coverageTracker5281556_
		cover: (196 to: 202)
		declaredAt: (39 to: 45)
		by:
			(cashier _ [ | receiver7 |
			receiver7 _ #_coverageTracker5281556_
				coverAll:
					{206 to: 212}
				by: Cashier.
			#_coverageTracker5281556_
				coverAll:
					{217 to: 227. 237 to: 245. 289 to: 297. 306 to: 308. 337 to: 350}
				evaluating: [
					receiver7
						toCheckout:
							(#_coverageTracker5281556_
								cover: (229 to: 232)
								declaredAt: (34 to: 37)
								by: cart)
						charging:
							[ | receiver5 |
							receiver5 _ #_coverageTracker5281556_
								cover: (247 to: 264)
								declaredAt: (75 to: 92)
								by: testObjectsFactory.
							#_coverageTracker5281556_
								coverAll:
									{266 to: 285}
								evaluating: [ receiver5 notExpiredCreditCard ]
								thatSends: #notExpiredCreditCard
								to: receiver5 ] value
						throught:
							(#_coverageTracker5281556_
								coverAll:
									{299 to: 302}
								byLiteralOrPseudoVariable: self)
						on:
							[ | receiver6 |
							receiver6 _ #_coverageTracker5281556_
								cover: (310 to: 327)
								declaredAt: (75 to: 92)
								by: testObjectsFactory.
							#_coverageTracker5281556_
								coverAll:
									{329 to: 333}
								evaluating: [ receiver6 today ]
								thatSends: #today
								to: receiver6 ] value
						registeringOn:
							(#_coverageTracker5281556_
								cover: (352 to: 360)
								declaredAt: (47 to: 55)
								by: salesBook) ]
				thatSends: #toCheckout:charging:throught:on:registeringOn:
				to: receiver7 ] value).
	#_coverageTracker5281556_
		cover: (367 to: 371)
		declaredAt: (57 to: 61)
		by:
			(total _ [ | receiver8 |
			receiver8 _ #_coverageTracker5281556_
				cover: (376 to: 382)
				declaredAt: (39 to: 45)
				by: cashier.
			#_coverageTracker5281556_
				coverAll:
					{384 to: 391}
				evaluating: [ receiver8 checkOut ]
				thatSends: #checkOut
				to: receiver8 ] value).
	[ | receiver11 |
	receiver11 _ #_coverageTracker5281556_
		coverAll:
			{401 to: 404}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5281556_
		coverAll:
			{406 to: 412}
		evaluating: [
			receiver11 assert:
				[ | receiver10 |
				receiver10 _ [ | receiver9 |
				receiver9 _ #_coverageTracker5281556_
					cover: (414 to: 422)
					declaredAt: (47 to: 55)
					by: salesBook.
				#_coverageTracker5281556_
					coverAll:
						{424 to: 427}
					evaluating: [ receiver9 size ]
					thatSends: #size
					to: receiver9 ] value.
				#_coverageTracker5281556_
					coverAll:
						{429 to: 429}
					evaluating: [
						receiver10 =
							(#_coverageTracker5281556_
								coverAll:
									{431 to: 431}
								byLiteralOrPseudoVariable: 1) ]
					thatSends: #=
					to: receiver10 ] value ]
		thatSends: #assert:
		to: receiver11 ] value.
	[ | receiver15 |
	receiver15 _ #_coverageTracker5281556_
		coverAll:
			{435 to: 438}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5281556_
		coverAll:
			{440 to: 446}
		evaluating: [
			receiver15 assert:
				[ | receiver14 |
				receiver14 _ [ | receiver13 |
				receiver13 _ [ | receiver12 |
				receiver12 _ #_coverageTracker5281556_
					cover: (448 to: 456)
					declaredAt: (47 to: 55)
					by: salesBook.
				#_coverageTracker5281556_
					coverAll:
						{458 to: 462}
					evaluating: [ receiver12 first ]
					thatSends: #first
					to: receiver12 ] value.
				#_coverageTracker5281556_
					coverAll:
						{464 to: 468}
					evaluating: [ receiver13 total ]
					thatSends: #total
					to: receiver13 ] value.
				#_coverageTracker5281556_
					coverAll:
						{470 to: 470}
					evaluating: [
						receiver14 =
							(#_coverageTracker5281556_
								cover: (472 to: 476)
								declaredAt: (57 to: 61)
								by: total) ]
					thatSends: #=
					to: receiver14 ] value ]
		thatSends: #assert:
		to: receiver15 ] value.! !
!Behavior method!
listPurchasesFor: clientId and: password
	#_coverageTracker5281653_ markAsExecuted.! !
!Behavior method!
itemNotSellByTheStore
	#_coverageTracker5281765_ markAsExecuted.
	^ #_coverageTracker5281765_
		coverAll:
			{27 to: 39}
		byLiteralOrPseudoVariable: 'invalidBook'.! !
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	#_coverageTracker5281862_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5281862_
		cover: (47 to: 57)
		declaredAt: (21 to: 31)
		by: aCreditCard.
	#_coverageTracker5281862_
		coverAll:
			{59 to: 70}
		evaluating: [
			receiver1 isExpiredOn:
				(#_coverageTracker5281862_
					cover: (72 to: 76)
					declaredAt: (37 to: 41)
					by: aDate) ]
		thatSends: #isExpiredOn:
		to: receiver1 ] value.
	#_coverageTracker5281862_
		coverAll:
			{79 to: 85}
		evaluating: [
			receiver4 ifTrue: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker5281862_
					coverAll:
						{89 to: 92}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker5281862_
					coverAll:
						{94 to: 99}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker5281862_
								coverAll:
									{101 to: 104}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker5281862_
								coverAll:
									{106 to: 148}
								evaluating: [ receiver2 canNotChargeAnExpiredCreditCardErrorMessage ]
								thatSends: #canNotChargeAnExpiredCreditCardErrorMessage
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.! !
!Behavior method!
listCartWithId: cartId
	| cart |
	#_coverageTracker5281975_ markAsExecuted.
	#_coverageTracker5281975_
		cover: (34 to: 37)
		declaredAt: (27 to: 30)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5281975_
				coverAll:
					{42 to: 45}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker5281975_
				coverAll:
					{47 to: 63}
				evaluating: [
					receiver1 retrieveCartWith:
						(#_coverageTracker5281975_
							cover: (65 to: 70)
							declaredAt: (17 to: 22)
							by: cartId) ]
				thatSends: #retrieveCartWith:
				to: receiver1 ] value).
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker5281975_
		cover: (75 to: 78)
		declaredAt: (27 to: 30)
		by: cart.
	#_coverageTracker5281975_
		coverAll:
			{80 to: 84}
		evaluating: [ receiver2 items ]
		thatSends: #items
		to: receiver2 ] value.! !
!Behavior method!
expiredCreditCard
	#_coverageTracker5282084_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ #_coverageTracker5282084_
		coverAll:
			{23 to: 32}
		by: CreditCard.
	#_coverageTracker5282084_
		coverAll:
			{34 to: 44}
		evaluating: [
			receiver5 expiringOn:
				[ | receiver4 |
				receiver4 _ #_coverageTracker5282084_
					coverAll:
						{47 to: 51}
					by: Month.
				#_coverageTracker5282084_
					coverAll:
						{53 to: 58. 77 to: 81}
					evaluating: [
						receiver4
							month:
								[ | receiver1 |
								receiver1 _ #_coverageTracker5282084_
									cover: (60 to: 64)
									declaredAt: (60 to: 64)
									by: today.
								#_coverageTracker5282084_
									coverAll:
										{66 to: 75}
									evaluating: [ receiver1 monthIndex ]
									thatSends: #monthIndex
									to: receiver1 ] value
							year:
								[ | receiver3 |
								receiver3 _ [ | receiver2 |
								receiver2 _ #_coverageTracker5282084_
									cover: (83 to: 87)
									declaredAt: (60 to: 64)
									by: today.
								#_coverageTracker5282084_
									coverAll:
										{89 to: 98}
									evaluating: [ receiver2 yearNumber ]
									thatSends: #yearNumber
									to: receiver2 ] value.
								#_coverageTracker5282084_
									coverAll:
										{100 to: 100}
									evaluating: [
										receiver3 -
											(#_coverageTracker5282084_
												coverAll:
													{102 to: 102}
												byLiteralOrPseudoVariable: 1) ]
									thatSends: #-
									to: receiver3 ] value ]
					thatSends: #month:year:
					to: receiver4 ] value ]
		thatSends: #expiringOn:
		to: receiver5 ] value.! !
!Behavior method!
createCart
	#_coverageTracker5282199_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker5282199_
		coverAll:
			{16 to: 19}
		by: Cart.
	#_coverageTracker5282199_
		coverAll:
			{21 to: 37}
		evaluating: [
			receiver2 acceptingItemsOf:
				[ | receiver1 |
				receiver1 _ #_coverageTracker5282199_
					coverAll:
						{39 to: 42}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker5282199_
					coverAll:
						{44 to: 57}
					evaluating: [ receiver1 defaultCatalog ]
					thatSends: #defaultCatalog
					to: receiver1 ] value ]
		thatSends: #acceptingItemsOf:
		to: receiver2 ] value.! !
!Behavior method!
test02CalculatedTotalIsCorrect
	| cart cashier |
	#_coverageTracker5282307_ markAsExecuted.
	#_coverageTracker5282307_
		cover: (54 to: 57)
		declaredAt: (36 to: 39)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5282307_
				cover: (62 to: 79)
				declaredAt: (62 to: 79)
				by: testObjectsFactory.
			#_coverageTracker5282307_
				coverAll:
					{81 to: 90}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker5282307_
		cover: (94 to: 97)
		declaredAt: (36 to: 39)
		by: cart.
	#_coverageTracker5282307_
		coverAll:
			{99 to: 102. 106 to: 108}
		evaluating: [
			receiver3
				add:
					(#_coverageTracker5282307_
						coverAll:
							{104 to: 104}
						byLiteralOrPseudoVariable: 2)
				of:
					[ | receiver2 |
					receiver2 _ #_coverageTracker5282307_
						cover: (110 to: 127)
						declaredAt: (62 to: 79)
						by: testObjectsFactory.
					#_coverageTracker5282307_
						coverAll:
							{129 to: 146}
						evaluating: [ receiver2 itemSellByTheStore ]
						thatSends: #itemSellByTheStore
						to: receiver2 ] value ]
		thatSends: #add:of:
		to: receiver3 ] value.
	#_coverageTracker5282307_
		cover: (152 to: 158)
		declaredAt: (41 to: 47)
		by:
			(cashier _ [ | receiver7 |
			receiver7 _ #_coverageTracker5282307_
				coverAll:
					{164 to: 170}
				by: Cashier.
			#_coverageTracker5282307_
				coverAll:
					{174 to: 184. 194 to: 202. 247 to: 255. 264 to: 266. 296 to: 309}
				evaluating: [
					receiver7
						toCheckout:
							(#_coverageTracker5282307_
								cover: (186 to: 189)
								declaredAt: (36 to: 39)
								by: cart)
						charging:
							[ | receiver4 |
							receiver4 _ #_coverageTracker5282307_
								cover: (204 to: 221)
								declaredAt: (62 to: 79)
								by: testObjectsFactory.
							#_coverageTracker5282307_
								coverAll:
									{223 to: 242}
								evaluating: [ receiver4 notExpiredCreditCard ]
								thatSends: #notExpiredCreditCard
								to: receiver4 ] value
						throught:
							(#_coverageTracker5282307_
								coverAll:
									{257 to: 260}
								byLiteralOrPseudoVariable: self)
						on:
							[ | receiver5 |
							receiver5 _ #_coverageTracker5282307_
								cover: (268 to: 285)
								declaredAt: (62 to: 79)
								by: testObjectsFactory.
							#_coverageTracker5282307_
								coverAll:
									{287 to: 291}
								evaluating: [ receiver5 today ]
								thatSends: #today
								to: receiver5 ] value
						registeringOn:
							[ | receiver6 |
							receiver6 _ #_coverageTracker5282307_
								coverAll:
									{311 to: 327}
								by: OrderedCollection.
							#_coverageTracker5282307_
								coverAll:
									{329 to: 331}
								evaluating: [ receiver6 new ]
								thatSends: #new
								to: receiver6 ] value ]
				thatSends: #toCheckout:charging:throught:on:registeringOn:
				to: receiver7 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker5282307_
		coverAll:
			{338 to: 341}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5282307_
		coverAll:
			{343 to: 349}
		evaluating: [
			receiver12 assert:
				[ | receiver11 |
				receiver11 _ [ | receiver8 |
				receiver8 _ #_coverageTracker5282307_
					cover: (351 to: 357)
					declaredAt: (41 to: 47)
					by: cashier.
				#_coverageTracker5282307_
					coverAll:
						{359 to: 366}
					evaluating: [ receiver8 checkOut ]
					thatSends: #checkOut
					to: receiver8 ] value.
				#_coverageTracker5282307_
					coverAll:
						{368 to: 368}
					evaluating: [
						receiver11 =
							[ | receiver10 |
							receiver10 _ [ | receiver9 |
							receiver9 _ #_coverageTracker5282307_
								cover: (371 to: 388)
								declaredAt: (62 to: 79)
								by: testObjectsFactory.
							#_coverageTracker5282307_
								coverAll:
									{390 to: 412}
								evaluating: [ receiver9 itemSellByTheStorePrice ]
								thatSends: #itemSellByTheStorePrice
								to: receiver9 ] value.
							#_coverageTracker5282307_
								coverAll:
									{414 to: 414}
								evaluating: [
									receiver10 *
										(#_coverageTracker5282307_
											coverAll:
												{416 to: 416}
											byLiteralOrPseudoVariable: 2) ]
								thatSends: #*
								to: receiver10 ] value ]
					thatSends: #=
					to: receiver11 ] value ]
		thatSends: #assert:
		to: receiver12 ] value.! !
!Behavior method!
addToCartWithId: cartId item: anItem withOcurrences: ocurrences
	| cart |
	#_coverageTracker5282404_ markAsExecuted.
	#_coverageTracker5282404_
		cover: (75 to: 78)
		declaredAt: (68 to: 71)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker5282404_
				coverAll:
					{83 to: 86}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker5282404_
				coverAll:
					{88 to: 104}
				evaluating: [
					receiver1 retrieveCartWith:
						(#_coverageTracker5282404_
							cover: (106 to: 111)
							declaredAt: (18 to: 23)
							by: cartId) ]
				thatSends: #retrieveCartWith:
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker5282404_
		cover: (115 to: 118)
		declaredAt: (68 to: 71)
		by: cart.
	#_coverageTracker5282404_
		coverAll:
			{120 to: 123. 136 to: 138}
		evaluating: [
			receiver2
				add:
					(#_coverageTracker5282404_
						cover: (125 to: 134)
						declaredAt: (54 to: 63)
						by: ocurrences)
				of:
					(#_coverageTracker5282404_
						cover: (140 to: 145)
						declaredAt: (31 to: 36)
						by: anItem) ]
		thatSends: #add:of:
		to: receiver2 ] value.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	#_coverageTracker5282505_ markAsExecuted.
	^ #_coverageTracker5282505_
		coverAll:
			{49 to: 87}
		byLiteralOrPseudoVariable: 'Can not charge an expired credit card'.! !
!Behavior method!
debit: anAmount from: aCreditCard
	#_coverageTracker5282617_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5282617_
		cover: (39 to: 51)
		declaredAt: (39 to: 51)
		by: debitBehavior.
	#_coverageTracker5282617_
		coverAll:
			{53 to: 58. 69 to: 74}
		evaluating: [
			receiver1
				value:
					(#_coverageTracker5282617_
						cover: (60 to: 67)
						declaredAt: (8 to: 15)
						by: anAmount)
				value:
					(#_coverageTracker5282617_
						cover: (76 to: 86)
						declaredAt: (23 to: 33)
						by: aCreditCard) ]
		thatSends: #value:value:
		to: receiver1 ] value.! !
!Behavior method!
checkOut
	#_coverageTracker5282741_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5282741_
		coverAll:
			{12 to: 15}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5282741_
		coverAll:
			{17 to: 30}
		evaluating: [ receiver1 calculateTotal ]
		thatSends: #calculateTotal
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker5282741_
		coverAll:
			{34 to: 37}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5282741_
		coverAll:
			{39 to: 48}
		evaluating: [ receiver2 debitTotal ]
		thatSends: #debitTotal
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker5282741_
		coverAll:
			{52 to: 55}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5282741_
		coverAll:
			{57 to: 68}
		evaluating: [ receiver3 registerSale ]
		thatSends: #registerSale
		to: receiver3 ] value.
	^ #_coverageTracker5282741_
		cover: (75 to: 79)
		declaredAt: (75 to: 79)
		by: total.! !
!Behavior method!
invalidItemErrorMessage
	#_coverageTracker5282838_ markAsExecuted.
	^ #_coverageTracker5282838_
		coverAll:
			{29 to: 52}
		byLiteralOrPseudoVariable: 'Item is not in catalog'.! !
!Behavior method!
itemSellByTheStorePrice
	#_coverageTracker5282932_ markAsExecuted.
	^ #_coverageTracker5282932_
		coverAll:
			{29 to: 30}
		byLiteralOrPseudoVariable: 10.! !
!Behavior method!
isEmpty
	#_coverageTracker5283021_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5283021_
		cover: (13 to: 17)
		declaredAt: (13 to: 17)
		by: items.
	#_coverageTracker5283021_
		coverAll:
			{19 to: 25}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.! !
!Behavior method!
assertIsValidItem: anItem
	#_coverageTracker5283126_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5283126_
		cover: (30 to: 36)
		declaredAt: (30 to: 36)
		by: catalog.
	#_coverageTracker5283126_
		coverAll:
			{38 to: 49}
		evaluating: [
			receiver1 includesKey:
				(#_coverageTracker5283126_
					cover: (51 to: 56)
					declaredAt: (20 to: 25)
					by: anItem) ]
		thatSends: #includesKey:
		to: receiver1 ] value.
	#_coverageTracker5283126_
		coverAll:
			{59 to: 66}
		evaluating: [
			receiver5 ifFalse: [
				[ | receiver4 |
				receiver4 _ #_coverageTracker5283126_
					coverAll:
						{70 to: 73}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker5283126_
					coverAll:
						{75 to: 80}
					evaluating: [
						receiver4 error:
							[ | receiver3 |
							receiver3 _ [ | receiver2 |
							receiver2 _ #_coverageTracker5283126_
								coverAll:
									{82 to: 85}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker5283126_
								coverAll:
									{87 to: 91}
								evaluating: [ receiver2 class ]
								thatSends: #class
								to: receiver2 ] value.
							#_coverageTracker5283126_
								coverAll:
									{93 to: 115}
								evaluating: [ receiver3 invalidItemErrorMessage ]
								thatSends: #invalidItemErrorMessage
								to: receiver3 ] value ]
					thatSends: #error:
					to: receiver4 ] value ]]
		thatSends: #ifFalse:
		to: receiver5 ] value.! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:40:10'!
FAILURE!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:40:10'!
FAILURE!

a Sale!

self first!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 12:51:57' prior: 50662883!
listPurchasesFor: clientId and: password
	|clientPurchases|
	clientPurchases := OrderedCollection new.
	salesBook do: [:aSale |
		aSale client = clientId ifTrue: [clientPurchases add: aSale]
	].
	^clientPurchases 
	! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:52:47'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:52:47'!
ERROR!
!Sale methodsFor: 'accesing' stamp: 'mm uu 11/8/2023 12:52:58'!
client
	self shouldBeImplemented.
	^client! !
!Sale methodsFor: 'accesing' stamp: 'mm uu 11/8/2023 12:53:00' prior: 50666503!
client
	^client! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:53:06'!
FAILURE!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:53:06'!
FAILURE!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 12:54:33' prior: 50666486!
listPurchasesFor: clientId and: password
	|clientPurchases saleTotal|
	clientPurchases := OrderedCollection new.
	salesBook do: [:aSale |
		aSale client = clientId ifTrue: [clientPurchases add: aSale]
	].
	saleTotal := clientPurchases sum: [:aSale | aSale total].
	^saleTotal
	! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:54:35'!
FAILURE!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 12:54:35'!
FAILURE!

!classDefinition: #Sale category: 'TusLibros' stamp: 'mm uu 11/8/2023 13:00:53'!
Object subclass: #Sale
	instanceVariableNames: 'total client items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 13:00:51'!
initializeTotal: aTotal for: aClient with: anItemsList

	total := aTotal .
	client := aClient.
	items := anItemsList.! !

!methodRemoval: Sale #initializeTotal:for: stamp: 'mm uu 11/8/2023 13:00:57'!
initializeTotal: aTotal for: aClient

	total := aTotal .
	client := aClient.!
!Sale class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 13:01:40'!
of: aTotal for: aClient with: anItemsList
	^self new initializeTotal: aTotal for: aClient with: anItemsList! !

!methodRemoval: Sale class #of:for: stamp: 'mm uu 11/8/2023 13:01:43'!
of: aTotal for: aClient 
	^self new initializeTotal: aTotal for: aClient !
!Cashier methodsFor: 'checkout - private' stamp: 'mm uu 11/8/2023 13:02:16' prior: 50662907!
createSale

	^ Sale of: total for: client with: cart items
! !

self first!

self first!
!Sale methodsFor: 'total' stamp: 'mm uu 11/8/2023 13:04:23'!
items
	
	^ items! !
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 13:05:32' prior: 50666519!
listPurchasesFor: clientId and: password
	|clientPurchases saleTotal test|
	test := OrderedCollection new.
	clientPurchases := OrderedCollection new.
	salesBook do: [:aSale |
		aSale client = clientId ifTrue: [clientPurchases add: aSale]
	].
	clientPurchases do: [ :aSale |
		aSale items content do: [ :content |
			test add: content.
		]
	].
	saleTotal := clientPurchases sum: [:aSale | aSale total].
	^saleTotal
	! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 13:05:43'!
ERROR!

self contents!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 13:07:25' prior: 50666577!
listPurchasesFor: clientId and: password
	|clientPurchases saleTotal test|
	test := OrderedCollection new.
	clientPurchases := OrderedCollection new.
	salesBook do: [:aSale |
		aSale client = clientId ifTrue: [clientPurchases add: aSale]
	].
	clientPurchases do: [ :aSale |
		test add: aSale items contents
	].
	saleTotal := clientPurchases sum: [:aSale | aSale total].
	^saleTotal
	! !

self keys !
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 13:09:19' prior: 50666598!
listPurchasesFor: clientId and: password
	|clientPurchases saleTotal test|
	test := OrderedCollection new.
	clientPurchases := OrderedCollection new.
	salesBook do: [:aSale |
		aSale client = clientId ifTrue: [clientPurchases add: aSale]
	].
	clientPurchases do: [ :aSale |
		aSale items contents keys do: [ :anItem |
			test add: anItem.
			test add: (aSale items at: anItem).
		].
	].
	saleTotal := clientPurchases sum: [:aSale | aSale total].
	^saleTotal
	! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 13:09:43'!
ERROR!

self at: #validBook!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 13:11:17'!
ERROR!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 13:12:02' prior: 50666614!
listPurchasesFor: clientId and: password
	|clientPurchases saleTotal test|
	test := OrderedCollection new.
	clientPurchases := OrderedCollection new.
	salesBook do: [:aSale |
		aSale client = clientId ifTrue: [clientPurchases add: aSale]
	].
	clientPurchases do: [ :aSale |
		|pp|
		pp := aSale items contents.
		pp keys do: [ :anItem |
			test add: anItem.
			test add: (pp at: anItem).
		].
	].
	saleTotal := clientPurchases sum: [:aSale | aSale total].
	^saleTotal
	! !
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 13:12:32' prior: 50666640!
listPurchasesFor: clientId and: password
	|clientPurchases test|
	test := OrderedCollection new.
	clientPurchases := OrderedCollection new.
	salesBook do: [:aSale |
		aSale client = clientId ifTrue: [clientPurchases add: aSale]
	].
	clientPurchases do: [ :aSale |
		|pp|
		pp := aSale items contents.
		pp keys do: [ :anItem |
			test add: anItem.
			test add: (pp at: anItem).
		].
	].
	test add: (clientPurchases sum: [:aSale | aSale total]).
	^test
	! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 13:12:36'!
PASSED!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 13:12:43' prior: 50666658!
listPurchasesFor: clientId and: password
	|clientPurchases test|
	test := OrderedCollection new.
	clientPurchases := OrderedCollection new.
	salesBook do: [:aSale |
		aSale client = clientId ifTrue: [clientPurchases add: aSale]
	].

	clientPurchases do: [ :aSale |
		|pp|
		pp := aSale items contents.
		pp keys do: [ :anItem |
			test add: anItem.
			test add: (pp at: anItem).
		].
	].

	test add: (clientPurchases sum: [:aSale | aSale total]).
	^test
	! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 13:41:35'!
PASSED!
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 13:43:09' prior: 50662961!
createCartFor: aUsername withPassword: password 
	|pass cartId|
	pass := usersList at: aUsername ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = password ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	carts add: cartId -> (Cart acceptingItemsOf: catalog).
	session add: cartId -> aUsername.
	
	lastCartId := lastCartId + 1.
	
	^cartId! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 13:43:14' prior: 50666701!
createCartFor: aUsername withPassword: aPassword 
	|pass cartId|
	pass := usersList at: aUsername ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = aPassword ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	carts add: cartId -> (Cart acceptingItemsOf: catalog).
	session add: cartId -> aUsername.
	
	lastCartId := lastCartId + 1.
	
	^cartId! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 13:43:27' prior: 50666717!
createCartFor: aClientId withPassword: aPassword 
	|pass cartId|
	pass := usersList at: aClientId ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = aPassword ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	carts add: cartId -> (Cart acceptingItemsOf: catalog).
	session add: cartId -> aClientId.
	
	lastCartId := lastCartId + 1.
	
	^cartId! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'mm uu 11/8/2023 13:45:45' prior: 50659386!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self itemSellByTheStorePrice;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'mm uu 11/8/2023 13:45:58'!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'mm uu 11/8/2023 13:46:09' prior: 50666749!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self itemSellByTheStorePrice;
		yourself ! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:47:29'!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface cartId card merchantProcessor|
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
		
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory anotherItemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.

	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
			
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:48:05' prior: 50666772!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface cartId card merchantProcessor|
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
		
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory anotherItemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.

	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
			
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)! !

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 13:48:07'!
FAILURE!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 13:48:07'!
FAILURE!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 13:48:45'!
FAILURE!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 13:48:45'!
FAILURE!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:49:06' prior: 50666813!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface cartId card merchantProcessor|
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog .
		
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory anotherItemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.

	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
			
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)! !

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 13:49:10'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:51:32' prior: 50666874!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface cartId card merchantProcessor|
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
	interface := factory defaultInterface.
		
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory anotherItemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.

	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
			
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'mm uu 11/8/2023 13:51:56'!
defaultInterface
	
	^ InterfazEntrada 
		withUsers: self defaultUsers 
		withCatalog: self defaultCatalog .! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:52:32' prior: 50666922!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface cartId card merchantProcessor|
	card := factory notExpiredCreditCard .
	interface := factory defaultInterface.
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
		
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory anotherItemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.

	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
			
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)! !

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 13:52:34'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:53:07' prior: 50666970!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface cartId card merchantProcessor|
	card := factory notExpiredCreditCard .
	interface := factory defaultInterface.
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
		
	cartId := 
	interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory anotherItemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.

	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
			
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:53:24' prior: 50667016!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface cartId card merchantProcessor|
	card := factory notExpiredCreditCard .
	interface := factory defaultInterface.
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
		
	"cartId := "
	interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory anotherItemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.

	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	interface addToCartWithId: cartId 
			item: factory itemSellByTheStore 
			withOcurrences: 1.
	interface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.
			
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:56:34'!
createCartForDefaultUserAndAdd: anItem withOcurrences: ocurrences with: anInterface
	|cartId card merchantProcessor|
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
	
	cartId := anInterface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	anInterface addToCartWithId: cartId 
			item: anItem
			withOcurrences: ocurrences.
	anInterface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.! !
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:57:38' prior: 50667058!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface|
	interface := factory defaultInterface.
		
	self 
		createCartForDefaultUserAndAdd: factory itemSellByTheStore 
		withOcurrences: 1 
		with: interface.
	self 
		createCartForDefaultUserAndAdd: factory anotherItemSellByTheStore 
		withOcurrences: 1 
		with: interface.
					
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)! !

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 13:57:40'!
FAILURE!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 13:57:40'!
FAILURE!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:57:57' prior: 50667120!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface|
	interface := factory defaultInterface.
		
	self 
		createCartForDefaultUserAndAdd: factory itemSellByTheStore 
		withOcurrences: 1 
		with: interface.
	self 
		createCartForDefaultUserAndAdd: factory anotherItemSellByTheStore 
		withOcurrences: 1 
		with: interface.
					
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)! !

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 13:57:59'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 13:58:06'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 13:58:10'!
PASSED!
!InterfazEntradaTests methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 13:59:10' prior: 50662689!
test09InterfaceShowsPurchaseAfterCheckout
	|interface|
	
	interface := factory defaultInterface .
		
	self 
		createCartForDefaultUserAndAdd: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 13:59:12'!
PASSED!

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 14:02:57'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 14:02:57'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 14:02:57'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 14:02:57'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 14:02:57'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 14:02:57'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 14:02:57'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 14:02:58'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 14:02:58'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 14:02:58'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 14:02:58'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 14:02:58'!
PASSED!

!methodRemoval: InterfazEntradaTests #recordatorio stamp: 'mm uu 11/8/2023 14:03:07'!
recordatorio
	
	"Checkear que no se pueda aniadir un item que no esta en el catalogo"!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:06:55'!
test10InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users|
	users := factory defaultUsers .
	users at: 'pepe' put: 'pepito' .
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	self 
		createCartForDefaultUserAndAdd: factory itemSellByTheStore 
		withOcurrences: 1 
		with: interface.
					
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory itemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice )! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:06:58' prior: 50667259!
test10InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users|
	users := factory defaultUsers .
	users at: 'pepe' put: 'pepito' .
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	self 
		createCartForDefaultUserAndAdd: factory itemSellByTheStore 
		withOcurrences: 1 
		with: interface.
					
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory itemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice )! !

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/8/2023 14:11:31'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList carts userList catalog lastCartId salesBook session lastTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/8/2023 14:11:29' prior: 50662921!
checkoutCartId: aCartId charging: aCard through: aMerchantProcessor on: aDate
	|cart cashier transactionId|
	cart := self retrieveCartWith: aCartId.
	transactionId := lastTransactionId.
	cashier := Cashier 
		toCheckout: cart
		charging: aCard
		throught: aMerchantProcessor
		on: aDate
		registeringOn: salesBook
		for: (session at: aCartId).
	cashier checkOut .
	lastTransactionId := lastTransactionId + 1.
	
	^transactionId.! !
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/8/2023 14:11:37' prior: 50667322!
checkoutCartId: aCartId charging: aCard through: aMerchantProcessor on: aDate
	|cart cashier transactionId|
	cart := self retrieveCartWith: aCartId.
	transactionId := lastTransactionId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: aCard
		throught: aMerchantProcessor
		on: aDate
		registeringOn: salesBook
		for: (session at: aCartId).
	cashier checkOut .
	
	lastTransactionId := lastTransactionId + 1.
	
	^transactionId.! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:12:03'!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users|
	users := factory defaultUsers .
	users at: 'pepe' put: 'pepito' .
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	self 
		createCartForDefaultUserAndAdd: factory itemSellByTheStore 
		withOcurrences: 1 
		with: interface.
					
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory itemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice )! !

!methodRemoval: InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:12:03'!
test10InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users|
	users := factory defaultUsers .
	users at: 'pepe' put: 'pepito' .
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	self 
		createCartForDefaultUserAndAdd: factory itemSellByTheStore 
		withOcurrences: 1 
		with: interface.
					
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory itemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice )!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:18:53' prior: 50667355!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users cartId card merchantProcessor transactionId|
	users := factory defaultUsers .
	users at: 'pepe' put: 'pepito' .
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	self 
		createCartForDefaultUserAndAdd: factory itemSellByTheStore 
		withOcurrences: 1 
		with: interface.
		
	cartId := interface createCartFor: 'pepe' withPassword: 'pepito'.
	interface addToCartWithId: cartId item: factory anotherItemSellByTheStore withOcurrences: 2.
	transactionId := interface 
		checkoutCartId: cartId 
		charging: card 
		through: merchantProcessor 
		on: factory today.
	
	self deny: transactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice )! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:21:07' prior: 50667409!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users cartId card merchantProcessor transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'pepe' put: 'pepito' .
	card := factory notExpiredCreditCard .
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	merchantProcessor := factory merchantProcessorWithNoBehaviour.
	cartId := interface createCartFor: factory defaultUsername withPassword: factory defaultPassword .
	interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	transactionId := interface 
		checkoutCartId: cartId 
		charging: card 
		through: merchantProcessor 
		on: factory today.
		
	cartId := interface createCartFor: 'pepe' withPassword: 'pepito'.
	interface addToCartWithId: cartId item: factory anotherItemSellByTheStore withOcurrences: 2.
	anotherTransactionId  := interface 
		checkoutCartId: cartId 
		charging: card 
		through: merchantProcessor 
		on: factory today.
	
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice )! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'mm uu 11/8/2023 14:22:02'!
merchantProcessorWithNoBehaviour
	
	^ MerchantProcessorStub withDefaultBehavior: [:anAmount :aCard |]! !

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:22:08'!
ERROR!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:22:08'!
ERROR!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:22:38' prior: 50667447!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users cartId card merchantProcessor transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	card := factory notExpiredCreditCard .
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	merchantProcessor := factory merchantProcessorWithNoBehaviour.
	cartId := interface createCartFor: factory defaultUsername withPassword: factory defaultPassword .
	interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	transactionId := interface 
		checkoutCartId: cartId 
		charging: card 
		through: merchantProcessor 
		on: factory today.
		
	cartId := interface createCartFor: 'juan' withPassword: 'pepito'.
	interface addToCartWithId: cartId item: factory anotherItemSellByTheStore withOcurrences: 2.
	anotherTransactionId  := interface 
		checkoutCartId: cartId 
		charging: card 
		through: merchantProcessor 
		on: factory today.
	
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:22:40'!
ERROR!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:22:40'!
ERROR!
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 14:23:00' prior: 50662935!
initializeWithUsers: aUserList withCatalog: aCatalog 
	usersList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	lastCartId := 1.
	lastTransactionId := 1.
	salesBook := OrderedCollection new.
	session := Dictionary new.! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 14:23:04'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 14:23:04'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 14:23:04'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 14:23:04'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 14:23:05'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 14:23:05'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 14:23:05'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 14:23:05'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 14:23:05'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 14:23:05'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 14:23:05'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 14:23:05'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:23:05'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:23:05'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:23:12'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:23:12'!
FAILURE!
!InterfazEntradaTests methodsFor: 'support' stamp: 'mm uu 11/8/2023 14:25:42'!
createCartForClient: aClient with: aPassword add: anItem withOcurrences: ocurrences with: anInterface
	|cartId card merchantProcessor |
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
	
	cartId := anInterface 
		createCartFor: aClient
		withPassword: aPassword.
	anInterface addToCartWithId: cartId 
			item: anItem
			withOcurrences: ocurrences.
	^ anInterface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 14:25:53'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:26:43' prior: 50667190!
test09InterfaceShowsPurchaseAfterCheckout
	|interface|
	
	interface := factory defaultInterface .
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection with: factory itemSellByTheStore with: 1 with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 14:26:45'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:27:00' prior: 50667153!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface|
	interface := factory defaultInterface.
		
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 1
		with: interface.
					
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)! !

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 14:27:02'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:28:24' prior: 50667511!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepe' 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:28:29'!
ERROR!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:28:29'!
ERROR!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:28:38' prior: 50667717!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:28:39'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:28:39'!
FAILURE!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:28:47' prior: 50667762!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:28:48'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:28:48'!
FAILURE!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:28:56' prior: 50667807!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 2
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'pepe' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:29:02'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:29:02'!
FAILURE!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:29:19' prior: 50667852!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 2
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'juan' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:29:21'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:29:21'!
FAILURE!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 14:29:37' prior: 50667897!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 2
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'juan' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice * 2)! !

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 14:29:39'!
PASSED!

!classDefinition: #DateTimeSimulator category: 'TusLibros' stamp: 'mm uu 11/8/2023 15:03:32'!
Object subclass: #DateTimeSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:03:30'!
test11CanNotOperateWithExpiredCart
	|interface users transactionId anotherTransactionId dateTimeSimulator|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator new.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 2
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'juan' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice * 2)! !

!methodRemoval: InterfazEntrada class #withUsers: stamp: 'mm uu 11/8/2023 15:03:45'!
withUsers: usersList
	^self new initializeWithUsers: usersList !
!InterfazEntrada class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 15:04:03'!
withUsers: aUserList withCatalog: aCatalog withDateTime: aDateTime
	^self new initializeWithUsers: aUserList withCatalog: aCatalog withDateTime: aDateTime.! !

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/8/2023 15:04:23'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList carts userList catalog lastCartId salesBook session lastTransactionId dateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 15:04:22'!
initializeWithUsers: aUserList withCatalog: aCatalog withDateTime: aDateTime
	usersList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	lastCartId := 1.
	lastTransactionId := 1.
	salesBook := OrderedCollection new.
	session := Dictionary new.
	dateTime := aDateTime.! !

!testRun: #InterfazEntradaTests #test11CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:04:35'!
ERROR!

!testRun: #InterfazEntradaTests #test11CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:04:35'!
ERROR!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:04:52' prior: 50667990!
test11CanNotOperateWithExpiredCart
	|interface users transactionId dateTimeSimulator|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator new.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).! !

!testRun: #InterfazEntradaTests #test11CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:04:58'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:05:09'!
test12CanNotOperateWithExpiredCart
	|interface users transactionId dateTimeSimulator|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator new.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).! !

!methodRemoval: InterfazEntradaTests #test11CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:05:09'!
test11CanNotOperateWithExpiredCart
	|interface users transactionId dateTimeSimulator|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator new.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).!

!classDefinition: #Session category: 'TusLibros' stamp: 'mm uu 11/8/2023 15:08:26'!
Object subclass: #Session
	instanceVariableNames: 'clientId createdAt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 15:08:12' prior: 50666733!
createCartFor: aClientId withPassword: aPassword 
	|pass cartId|
	pass := usersList at: aClientId ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = aPassword ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	carts add: cartId -> (Cart acceptingItemsOf: catalog).
	session add: cartId -> (Session for: aClientId createdAt: dateTime now).
	
	lastCartId := lastCartId + 1.
	
	^cartId! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:08:31'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:08:31'!
ERROR!
!DateTimeSimulator methodsFor: 'time' stamp: 'mm uu 11/8/2023 15:08:51'!
now
	self shouldBeImplemented.! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:09:55' prior: 50668098!
test12CanNotOperateWithExpiredCart
	|interface users transactionId dateTimeSimulator|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:10:01'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:10:01'!
ERROR!
!DateTimeSimulator class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 15:10:05'!
startingAt: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeStartingAt: aRenameMe1 ! !
!DateTimeSimulator class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 15:10:17' prior: 50668216!
startingAt: aDateTime 
	^self new initializeStartingAt: aDateTime ! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:10:21'!
ERROR!

!classDefinition: #DateTimeSimulator category: 'TusLibros' stamp: 'mm uu 11/8/2023 15:10:27'!
Object subclass: #DateTimeSimulator
	instanceVariableNames: 'dateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!DateTimeSimulator methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 15:10:27'!
initializeStartingAt: aDateTime 
	self shouldBeImplemented.
	dateTime := aDateTime.! !
!DateTimeSimulator methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 15:10:29' prior: 50668241!
initializeStartingAt: aDateTime 
	dateTime := aDateTime.! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:10:33'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:10:33'!
ERROR!
!DateTimeSimulator methodsFor: 'time' stamp: 'mm uu 11/8/2023 15:11:05' prior: 50668179!
now
	^dateTime! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:11:10'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:11:10'!
ERROR!
!Session class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 15:11:15'!
for: aClientId createdAt: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aClientId createdAt: aRenameMe1 ! !
!Session class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 15:11:25' prior: 50668270!
for: aClientId createdAt: aDateTime 
	^self new initializeFor: aClientId createdAt: aDateTime ! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:11:27'!
ERROR!

!classDefinition: #Session category: 'TusLibros' stamp: 'mm uu 11/8/2023 15:11:33'!
Object subclass: #Session
	instanceVariableNames: 'clientId createdAt dateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 15:11:33'!
initializeFor: aClientId createdAt: aDateTime 
	self shouldBeImplemented.
	clientId := aClientId.
	dateTime := aDateTime.! !
!Session methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 15:11:35' prior: 50668297!
initializeFor: aClientId createdAt: aDateTime 
	clientId := aClientId.
	dateTime := aDateTime.! !

!classDefinition: #Session category: 'TusLibros' stamp: 'mm uu 11/8/2023 15:11:41'!
Object subclass: #Session
	instanceVariableNames: 'clientId createdAt dateTime expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 15:11:40' prior: 50668304!
initializeFor: aClientId createdAt: aDateTime 
	clientId := aClientId.
	expiration := aDateTime.! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:11:46'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:11:46'!
ERROR!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:12:24'!
ERROR!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:12:24'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'mm uu 11/8/2023 15:13:08' prior: 50666963!
defaultInterface
	
	^ InterfazEntrada 
		withUsers: self defaultUsers 
		withCatalog: self defaultCatalog 
		withDateTime: (DateTimeSimulator startingAt: self today).! !

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:13:16'!
ERROR!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:13:16'!
ERROR!
!Session methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 15:15:33'!
clientId
	^clientId! !
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/8/2023 15:15:38' prior: 50667339!
checkoutCartId: aCartId charging: aCard through: aMerchantProcessor on: aDate
	|cart cashier transactionId|
	cart := self retrieveCartWith: aCartId.
	transactionId := lastTransactionId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: aCard
		throught: aMerchantProcessor
		on: aDate
		registeringOn: salesBook
		for: (session at: aCartId clientId).
	cashier checkOut .
	
	lastTransactionId := lastTransactionId + 1.
	
	^transactionId.! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 15:15:40'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 15:15:40'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 15:15:40'!
ERROR!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 15:15:40'!
ERROR!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 15:15:40'!
ERROR!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 15:15:40'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 15:15:40'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 15:15:41'!
ERROR!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 15:15:41'!
ERROR!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 15:15:41'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 15:15:41'!
ERROR!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:15:41'!
ERROR!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 15:15:41'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:15:41'!
ERROR!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:15:50'!
ERROR!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:15:50'!
ERROR!
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/8/2023 15:17:00' prior: 50668361!
checkoutCartId: aCartId charging: aCard through: aMerchantProcessor on: aDate
	|cart cashier transactionId|
	cart := self retrieveCartWith: aCartId.
	transactionId := lastTransactionId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: aCard
		throught: aMerchantProcessor
		on: aDate
		registeringOn: salesBook
		for: ((session at: aCartId) clientId).
	cashier checkOut .
	
	lastTransactionId := lastTransactionId + 1.
	
	^transactionId.! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 15:17:02'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 15:17:02'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 15:17:02'!
ERROR!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 15:17:03'!
ERROR!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 15:17:03'!
ERROR!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 15:17:03'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 15:17:03'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 15:17:03'!
ERROR!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 15:17:03'!
ERROR!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 15:17:03'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 15:17:03'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:17:03'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 15:17:03'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:17:04'!
PASSED!

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 15:17:10'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 15:17:10'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 15:17:11'!
ERROR!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 15:17:11'!
ERROR!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 15:17:11'!
ERROR!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 15:17:11'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 15:17:11'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 15:17:11'!
ERROR!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 15:17:11'!
ERROR!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 15:17:11'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 15:17:11'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:17:11'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 15:17:11'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:17:12'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 15:17:15'!
ERROR!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:17:35' prior: 50662178!
test09CannotAddItemThatIsNotInCatalog
	|interface cartId |
	
	interface := factory defaultInterface .
	cartId := interface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	self 
		should: [
			interface addToCartWithId: cartId 
			item: factory itemNotSellByTheStore 
			withOcurrences: 1.]
		raise: Error
		withExceptionDo: [
			:anError | self assert: anError messageText equals: Cart invalidItemErrorMessage ]! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:17:45' prior: 50662780!
test08CannotCheckoutEmptyCart
	|interfaz cartId card merchantProcessor|
	
	interfaz := factory defaultInterface .
		
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:a :b |].
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	self 
		should: [interfaz 
			checkoutCartId: cartId 
			charging: card 
			through: merchantProcessor 
			on: factory today
		]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:18:16' prior: 50662125!
test07CanCreateMultipleCartsForDifferentUsers
	|interfaz users cartIdOne cartIdTwo|
	users := factory defaultUsers .
	users add: #pp -> #holi.
	
	interfaz := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog withDateTime: (DateTimeSimulator startingAt: factory today).
	
	cartIdOne := interfaz createCartFor: factory defaultUsername withPassword: factory defaultPassword .
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	interfaz addToCartWithId: cartIdTwo item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .

	self 
		assert: (interfaz listCartWithId: cartIdTwo ) 
		equals: (Bag with: factory itemSellByTheStore) .	
	! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:18:24' prior: 50662088!
test03CanAddItemToCart
	|interfaz cartId|
	
	interfaz := factory defaultInterface .
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore) .
	
	! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:18:35' prior: 50662055!
test02CanCreateCartWithValidUserAndPassword
	|interfaz cartId|
	
	interfaz := factory defaultInterface .
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	self assert: (interfaz listCartWithId: cartId) equals: Bag new.
	
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 15:18:36'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 15:18:36'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 15:18:36'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 15:18:37'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 15:18:37'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:18:37'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:18:37'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 15:18:37'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 15:18:37'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 15:18:37'!
ERROR!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 15:18:37'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 15:18:37'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 15:18:37'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 15:18:37'!
ERROR!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:19:01' prior: 50667942!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog withDateTime: DateTimeSimulator startingAt: factory today.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 2
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'juan' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice * 2)! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:19:06' prior: 50668710!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog withDateTime: (DateTimeSimulator startingAt: factory today).
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 2
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'juan' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice * 2)! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:19:16' prior: 50662106!
test04CanAddMultipleItemsToCart
	|interfaz cartId|
	interfaz := factory defaultInterface .
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .
	
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 15:19:17'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 15:19:17'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 15:19:17'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 15:19:17'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 15:19:17'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 15:19:18'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:19:18'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 15:19:18'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 15:19:18'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 15:19:18'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 15:19:18'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 15:19:18'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 15:19:18'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 15:19:18'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:19:22'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:20:37' prior: 50668183!
test12CanNotOperateWithExpiredCart
	|interface users transactionId dateTimeSimulator|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	dateTimeSimulator forwardMinutes: 31.
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:20:40' prior: 50668859!
test12CanNotOperateWithExpiredCart
	|interface users transactionId dateTimeSimulator|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	dateTimeSimulator forwardMinutes: 31.
	
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:20:48' prior: 50668886!
test12CanNotOperateWithExpiredCart
	|interface users dateTimeSimulator|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	dateTimeSimulator forwardMinutes: 31.
	
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:20:55'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:20:55'!
ERROR!
!DateTimeSimulator methodsFor: 'time' stamp: 'mm uu 11/8/2023 15:21:01'!
forwardMinutes: aRenameMe1 
	self shouldBeImplemented.! !
!DateTimeSimulator methodsFor: 'time' stamp: 'mm uu 11/8/2023 15:21:22' prior: 50668946!
forwardMinutes: minutes
	dateTime := dateTime + minutes! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:22:16' prior: 50668913!
test12CanNotOperateWithExpiredCart
	|interface users dateTimeSimulator|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	dateTimeSimulator forward: 31 minutes.
	
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:22:20'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:22:20'!
ERROR!
!DateTimeSimulator methodsFor: 'time' stamp: 'mm uu 11/8/2023 15:22:23'!
forward: aRenameMe1 
	self shouldBeImplemented.! !
!DateTimeSimulator methodsFor: 'time' stamp: 'mm uu 11/8/2023 15:22:36' prior: 50668989!
forward: anAmount
	dateTime := dateTime + anAmount! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:22:39'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:23:42' prior: 50668956!
test12CanNotOperateWithExpiredCart
	|interface users dateTimeSimulator|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	dateTimeSimulator forward: 31 minutes.
	
	self 
		should: [interface listPurchasesFor: factory defaultUsername and: factory defaultPassword ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: interface class cartIsExpiredErrorMessage]! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:23:45'!
FAILURE!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:23:45'!
FAILURE!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:25:10' prior: 50669003!
test12CanNotOperateWithExpiredCart
	|interface users dateTimeSimulator cartId|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	cartId := interface createCartFor: factory defaultUsername withPassword: factory defaultPassword .
		
	dateTimeSimulator forward: 31 minutes.
	
	self 
		should: [interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: interface class cartIsExpiredErrorMessage]! !
!Session methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 15:28:05'!
createdAt
	^createdAt! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:29:49' prior: 50660242!
retrieveCartWith: cartId
	|cart createdAt|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	createdAt := (session at: cartId) createdAt.
	dateTime now - createdAt > 30 minutes ifTrue: [self class cartIsExpiredErrorMessage ].! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:29:57' prior: 50669065!
retrieveCartWith: cartId
	|cart createdAt|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	createdAt := (session at: cartId) createdAt.
	dateTime now - createdAt > 30 minutes ifTrue: [self class cartIsExpiredErrorMessage ].
	^cart.! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:30:03'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:30:03'!
ERROR!
!InterfazEntrada class methodsFor: 'errors' stamp: 'mm uu 11/8/2023 15:30:12'!
cartIsExpiredErrorMessage
	self shouldBeImplemented.! !
!InterfazEntrada class methodsFor: 'errors' stamp: 'mm uu 11/8/2023 15:30:19' prior: 50669094!
cartIsExpiredErrorMessage
	^'Cart has expired'! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:30:25' prior: 50669076!
retrieveCartWith: cartId
	|cart createdAt|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	createdAt := (session at: cartId) createdAt.
	dateTime now - createdAt > 30 minutes ifTrue: [self class cartIsExpiredErrorMessage ].
	^cart.! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:30:29'!
FAILURE!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:30:29'!
FAILURE!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:31:53' prior: 50669104!
retrieveCartWith: cartId
	|cart createdAt|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	createdAt := (session at: cartId) createdAt.
	((dateTime now - createdAt) > 30 minutes) ifTrue: [self class cartIsExpiredErrorMessage ].
	^cart.! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:31:58'!
FAILURE!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:31:58'!
FAILURE!

self at: 1!

self createdAt!

!classDefinition: #Session category: 'TusLibros' stamp: 'mm uu 11/8/2023 15:33:49'!
Object subclass: #Session
	instanceVariableNames: 'clientId createdAt dateTime expiration lastAccessTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 15:33:47' prior: 50668318!
initializeFor: aClientId createdAt: aDateTime 
	clientId := aClientId.
	lastAccessTime := aDateTime.! !
!Session methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 15:34:12'!
lastAcessTime
	^lastAccessTime ! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:34:20' prior: 50669123!
retrieveCartWith: cartId
	|cart createdAt|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	createdAt := (session at: cartId) lastAcessTime .
	((dateTime now - createdAt) > 30 minutes) ifTrue: [self class cartIsExpiredErrorMessage ].
	^cart.! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:34:26'!
FAILURE!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:34:26'!
FAILURE!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:34:43' prior: 50669162!
retrieveCartWith: cartId
	|cart lastAccess|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	lastAccess := (session at: cartId) lastAcessTime .
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [self class cartIsExpiredErrorMessage ].
	^cart.! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:35:16' prior: 50669181!
retrieveCartWith: cartId
	|cart lastAccess test|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	lastAccess := (session at: cartId) lastAcessTime .
	test := dateTime now - lastAccess.
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [self class cartIsExpiredErrorMessage ].
	^cart.! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:36:07' prior: 50669193!
retrieveCartWith: cartId
	|cart lastAccess test|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	lastAccess := (session at: cartId) lastAcessTime .
	test := dateTime now - lastAccess.
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [self error: self class cartIsExpiredErrorMessage ].
	^cart.! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:36:13' prior: 50669206!
retrieveCartWith: cartId
	|cart lastAccess|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	lastAccess := (session at: cartId) lastAcessTime .
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [self error: self class cartIsExpiredErrorMessage ].
	^cart.! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:36:17'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:38:10' prior: 50669037!
test12CanNotOperateWithExpiredCart
	|interface users dateTimeSimulator cartId|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	cartId := interface createCartFor: factory defaultUsername withPassword: factory defaultPassword .
		
	dateTimeSimulator forward: 31 minutes.
	
	self 
		should: [interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: interface class cartIsExpiredErrorMessage.
		].
	self 
		should: [interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: interface class invalidCartId .
		]! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:39:20'!
FAILURE!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:39:20'!
FAILURE!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:40:28' prior: 50669220!
retrieveCartWith: cartId
	|cart lastAccess|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	lastAccess := (session at: cartId) lastAcessTime .
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [
		self error: self class cartIsExpiredErrorMessage .
		carts removeKey: cartId.
	].
	^cart.! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:40:29'!
FAILURE!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:40:29'!
FAILURE!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:40:36'!
FAILURE!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:40:36'!
FAILURE!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 15:40:57' prior: 50669275!
retrieveCartWith: cartId
	|cart lastAccess|
	cart := carts at: cartId ifAbsent: [self error: self class invalidCartId ].
	lastAccess := (session at: cartId) lastAcessTime .
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [
		carts removeKey: cartId.
		self error: self class cartIsExpiredErrorMessage .
	].
	^cart.! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 15:41:04'!
PASSED!

----SNAPSHOT----(8 November 2023 15:41:08) CuisUniversity-5981.image priorSource: 10598957!
!Session class methodsFor: 'instance creation' stamp: 'mm uu 11/8/2023 16:12:55'!
for: aClientId createdAt: aDateTime withCart: aCart
	^self new initializeFor: aClientId createdAt: aDateTime withCart: aCart ! !

!classDefinition: #Session category: 'TusLibros' stamp: 'mm uu 11/8/2023 16:13:10'!
Object subclass: #Session
	instanceVariableNames: 'clientId createdAt dateTime expiration lastAccessTime cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 16:13:09'!
initializeFor: aClientId createdAt: aDateTime withCart: aCart
	clientId := aClientId.
	lastAccessTime := aDateTime.
	cart := aCart.! !

!methodRemoval: Session #initializeFor:createdAt: stamp: 'mm uu 11/8/2023 16:13:13'!
initializeFor: aClientId createdAt: aDateTime 
	clientId := aClientId.
	lastAccessTime := aDateTime.!

!methodRemoval: Session class #for:createdAt: stamp: 'mm uu 11/8/2023 16:13:16'!
for: aClientId createdAt: aDateTime 
	^self new initializeFor: aClientId createdAt: aDateTime !
!Session methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 16:13:31'!
cart
	^cart! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:13:37'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:13:37'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:13:37'!
ERROR!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:13:37'!
ERROR!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:13:37'!
ERROR!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:13:37'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:13:37'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:13:38'!
ERROR!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:13:38'!
ERROR!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:13:38'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:13:38'!
ERROR!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:13:38'!
ERROR!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:13:38'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:13:38'!
ERROR!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:13:41'!
ERROR!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 16:14:12' prior: 50669303!
retrieveCartWith: cartId
	|sessionR lastAccess|
	sessionR := session at: cartId ifAbsent: [self error: self class invalidCartId ].
	lastAccess := session lastAcessTime .
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [
		session removeKey: cartId.
		self error: self class cartIsExpiredErrorMessage .
	].
	^sessionR cart.! !

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/8/2023 16:14:28'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList carts userList catalog lastCartId salesBook sessions lastTransactionId dateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfazEntrada methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 16:14:28' prior: 50668051!
initializeWithUsers: aUserList withCatalog: aCatalog withDateTime: aDateTime
	usersList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	lastCartId := 1.
	lastTransactionId := 1.
	salesBook := OrderedCollection new.
	sessions := Dictionary new.
	dateTime := aDateTime.! !
!InterfazEntrada methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 16:14:29' prior: 50667569!
initializeWithUsers: aUserList withCatalog: aCatalog 
	usersList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	lastCartId := 1.
	lastTransactionId := 1.
	salesBook := OrderedCollection new.
	sessions := Dictionary new.! !
!InterfazEntrada methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 16:14:29' prior: 50668155!
createCartFor: aClientId withPassword: aPassword 
	|pass cartId|
	pass := usersList at: aClientId ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = aPassword ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	carts add: cartId -> (Cart acceptingItemsOf: catalog).
	sessions add: cartId -> (Session for: aClientId createdAt: dateTime now).
	
	lastCartId := lastCartId + 1.
	
	^cartId! !
!InterfazEntrada methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 16:14:29' prior: 50668437!
checkoutCartId: aCartId charging: aCard through: aMerchantProcessor on: aDate
	|cart cashier transactionId|
	cart := self retrieveCartWith: aCartId.
	transactionId := lastTransactionId.
	
	cashier := Cashier 
		toCheckout: cart
		charging: aCard
		throught: aMerchantProcessor
		on: aDate
		registeringOn: salesBook
		for: ((sessions at: aCartId) clientId).
	cashier checkOut .
	
	lastTransactionId := lastTransactionId + 1.
	
	^transactionId.! !
!InterfazEntrada methodsFor: 'as yet unclassified' stamp: 'mm uu 11/8/2023 16:14:29' prior: 50669414!
retrieveCartWith: cartId
	|sessionR lastAccess|
	sessionR := sessions at: cartId ifAbsent: [self error: self class invalidCartId ].
	lastAccess := sessions lastAcessTime .
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [
		sessions removeKey: cartId.
		self error: self class cartIsExpiredErrorMessage .
	].
	^sessionR cart.! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 16:15:23' prior: 50669462!
createCartFor: aClientId withPassword: aPassword 
	|pass cartId cart|
	pass := usersList at: aClientId ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = aPassword ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	cart := Cart acceptingItemsOf: catalog.
	sessions add: cartId -> (Session for: aClientId createdAt: dateTime now withCart: cart).
	
	lastCartId := lastCartId + 1.
	
	^cartId! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:15:31'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:15:31'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:15:31'!
ERROR!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:15:31'!
ERROR!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:15:32'!
ERROR!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:15:32'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:15:32'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:15:32'!
ERROR!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:15:32'!
FAILURE!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:15:32'!
FAILURE!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:15:32'!
ERROR!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:15:32'!
ERROR!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:15:32'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:15:33'!
FAILURE!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:15:35'!
ERROR!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 16:16:00' prior: 50669498!
retrieveCartWith: cartId
	|sessionR lastAccess|
	sessionR := sessions at: cartId ifAbsent: [self error: self class invalidCartId ].
	lastAccess := sessionR lastAcessTime .
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [
		sessions removeKey: cartId.
		self error: self class cartIsExpiredErrorMessage .
	].
	^sessionR cart.! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:16:02'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:16:02'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:16:03'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:16:03'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:16:03'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:16:03'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:16:03'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:16:03'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:16:03'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:16:04'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:16:04'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:16:04'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:16:04'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:16:04'!
PASSED!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 16:16:21' prior: 50669585!
retrieveCartWith: cartId
	|session lastAccess|
	session := sessions at: cartId ifAbsent: [self error: self class invalidCartId ].
	lastAccess := session lastAcessTime .
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [
		sessions removeKey: cartId.
		self error: self class cartIsExpiredErrorMessage .
	].
	^session cart.! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:16:23'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:16:23'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:16:23'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:16:23'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:16:24'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:16:24'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:16:24'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:16:24'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:16:24'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:16:24'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:16:24'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:16:24'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:16:24'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:16:25'!
PASSED!

Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList userList catalog lastCartId salesBook sessions lastTransactionId dateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfazEntrada category: 'TusLibros' stamp: 'mm uu 11/8/2023 16:18:37'!
Object subclass: #InterfazEntrada
	instanceVariableNames: 'usersList userList catalog lastCartId salesBook sessions lastTransactionId dateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:18:41'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:18:41'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:18:41'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:18:41'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:18:41'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:18:41'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:18:41'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:18:41'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:18:41'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:18:42'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:18:42'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:18:42'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:18:42'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:18:42'!
PASSED!

!methodRemoval: InterfazEntrada #initializeWithUsers:withCatalog: stamp: 'mm uu 11/8/2023 16:20:33'!
initializeWithUsers: aUserList withCatalog: aCatalog 
	usersList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	lastCartId := 1.
	lastTransactionId := 1.
	salesBook := OrderedCollection new.
	sessions := Dictionary new.!

!methodRemoval: InterfazEntrada class #withUsers:withCatalog: stamp: 'mm uu 11/8/2023 16:20:40'!
withUsers: aUserList withCatalog: aCatalog 
	^self new initializeWithUsers: aUserList withCatalog: aCatalog !
!InterfazEntrada methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 16:20:47' prior: 50669438!
initializeWithUsers: aUserList withCatalog: aCatalog withDateTime: aDateTime
	usersList := aUserList.
	catalog := aCatalog.
	lastCartId := 1.
	lastTransactionId := 1.
	salesBook := OrderedCollection new.
	sessions := Dictionary new.
	dateTime := aDateTime.! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:20:50'!
ERROR!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:20:50'!
ERROR!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:20:50'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:20:50'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:20:50'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:20:50'!
ERROR!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:20:51'!
ERROR!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:20:51'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:20:51'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:20:51'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:20:51'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:20:51'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:20:51'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:20:51'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:21:09' prior: 50661941!
test00CannotCreateCartWithInvalidPassword
	|interfaz |
	
	interfaz := factory defaultInterface .
	
	self 
		should: [ interfaz createCartFor: 'e' withPassword: 'pass']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:21:18' prior: 50661926!
test01CannotCreateCartWithInvalidUser
	|interfaz |
	interfaz := factory defaultInterface .
	
	self 
		should: [ interfaz createCartFor: 'pepe' withPassword: 'a']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:21:27' prior: 50661828!
test05CannotAddItemsToInvalidCart
	|interfaz |
	interfaz := factory defaultInterface .
	
	self
		should: [interfaz addToCartWithId: 9 item: factory itemSellByTheStore withOcurrences: 2]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCartId].
	! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:21:36' prior: 50661814!
test06CannotListItemsForInvalidCart
	|interfaz |
	interfaz := factory defaultInterface .
	
	self
		should: [interfaz listCartWithId: 9]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCartId].
	! !

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:21:37'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:21:37'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:21:37'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:21:37'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:21:37'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:21:37'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:21:38'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:21:38'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:21:38'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:21:38'!
PASSED!

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:21:38'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:21:38'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:21:38'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:21:38'!
PASSED!
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 16:23:39' prior: 50669512!
createCartFor: aClientId withPassword: aPassword 
	|pass cartId cart|
	
	usersList at: aClientId ifAbsent: [^self error: self class invalidCredentialsErrorMessage].	
	pass = aPassword ifFalse: [^self error: self class invalidCredentialsErrorMessage].
	
	cartId := lastCartId.
	cart := Cart acceptingItemsOf: catalog.
	sessions add: cartId -> (Session for: aClientId createdAt: dateTime now withCart: cart).
	
	lastCartId := lastCartId + 1.
	^cartId! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 16:25:25'!
checkCredentialsFor: aClientId with: aPassword
	|password |
	
	password := usersList 
		at: aClientId 
		ifAbsent: [self error: self class invalidCredentialsErrorMessage].	
	password = aPassword 
		ifFalse: [self error: self class invalidCredentialsErrorMessage].
	! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 16:27:05'!
createCartId
	|cartId |
	cartId := lastCartId.
	lastCartId := lastCartId + 1.
	^cartId! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 16:28:24' prior: 50669963!
createCartFor: aClientId withPassword: aPassword 
	|cartId|
	self checkCredentialsFor: aClientId with: aPassword.
	cartId := self createCartId .
	sessions add: cartId -> (Session 
		for: aClientId 
		createdAt: dateTime now 
		withCart: (Cart acceptingItemsOf: catalog)).
	
	^cartId! !
!InterfazEntrada methodsFor: 'create cart' stamp: 'mm uu 11/8/2023 16:28:29' prior: 50669997!
createCartFor: aClientId withPassword: aPassword 
	|cartId|
	self checkCredentialsFor: aClientId with: aPassword.
	cartId := self createCartId .
	
	sessions add: cartId -> (Session 
		for: aClientId 
		createdAt: dateTime now 
		withCart: (Cart acceptingItemsOf: catalog)).
	
	^cartId! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:28:36'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:28:36'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:28:36'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:28:36'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:28:36'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:28:36'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:28:37'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:28:37'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:28:37'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:28:37'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:28:37'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:28:37'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:28:37'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:28:37'!
PASSED!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 16:30:40'!
retrieveSessionFor: aCartId

	^ sessions at: aCartId ifAbsent: [self error: self class invalidCartId ]! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 16:30:40' prior: 50669650!
retrieveCartWith: cartId
	|session lastAccess|
	session := self retrieveSessionFor: cartId.
	lastAccess := session lastAcessTime .
	((dateTime now - lastAccess) > 30 minutes) ifTrue: [
		sessions removeKey: cartId.
		self error: self class cartIsExpiredErrorMessage .
	].
	^session cart.! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:30:51'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:30:51'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:30:51'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:30:51'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:30:51'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:30:52'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:30:52'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:30:52'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:30:52'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:30:52'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:30:52'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:30:52'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:30:52'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:30:53'!
PASSED!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 16:31:33' prior: 50670079!
retrieveCartWith: cartId
	|session lastAccess|
	session := self retrieveSessionFor: cartId.
	lastAccess := session lastAcessTime .
	session isExpired ifTrue: [self error: self class cartIsExpiredErrorMessage ].
	^session cart.! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 16:33:08' prior: 50670143!
retrieveCartWith: cartId
	|session |
	session := self retrieveSessionFor: cartId.
	(session isExpiredFrom: dateTime now) ifTrue: [
		self error: self class cartIsExpiredErrorMessage 
	].
	^session cart.! !
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 16:33:22' prior: 50670154!
retrieveCartWith: cartId
	|session |
	session := self retrieveSessionFor: cartId.
	(session isExpiredFrom: dateTime now) ifTrue: [
		sessions removeKey: cartId.
		self error: self class cartIsExpiredErrorMessage 
	].
	^session cart.! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:33:31'!
FAILURE!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:33:31'!
FAILURE!
!Session methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 16:34:27'!
isExpiredFrom: aDateTime
	^(aDateTime - lastAccessTime) > 30 minutes! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:34:30'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:34:30'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:34:31'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:34:31'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:34:31'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:34:31'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:34:31'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:34:31'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:34:31'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:34:31'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:34:31'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:34:31'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:34:32'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:34:32'!
PASSED!
!InterfazEntrada methodsFor: 'add to cart' stamp: 'mm uu 11/8/2023 16:34:51' prior: 50670164!
retrieveCartWith: cartId
	|session |
	session := self retrieveSessionFor: cartId.
	
	(session isExpiredFrom: dateTime now) ifTrue: [
		sessions removeKey: cartId.
		self error: self class cartIsExpiredErrorMessage 
	].

	^session cart.! !
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/8/2023 16:35:33'!
createTransactionId
	|transactionId|
	transactionId := lastTransactionId.
	lastTransactionId := lastTransactionId + 1.
	^transactionId.! !
!InterfazEntrada methodsFor: 'checkout' stamp: 'mm uu 11/8/2023 16:35:49' prior: 50669480!
checkoutCartId: aCartId charging: aCard through: aMerchantProcessor on: aDate
	|cart cashier transactionId|
	cart := self retrieveCartWith: aCartId.
	transactionId := self createTransactionId .
	cashier := Cashier 
		toCheckout: cart
		charging: aCard
		throught: aMerchantProcessor
		on: aDate
		registeringOn: salesBook
		for: ((sessions at: aCartId) clientId).
	cashier checkOut .
	^transactionId.! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:35:59'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:35:59'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:35:59'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:35:59'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:35:59'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:35:59'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:35:59'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:36:00'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:36:00'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:36:00'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:36:00'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:36:00'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:36:00'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:36:00'!
PASSED!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:38:23' prior: 50666680!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	clientPurchases do: [ :aSale |
		|pp|
		pp := aSale items contents.
		pp keys do: [ :anItem |
			summary add: anItem.
			summary add: (pp at: anItem).
		].
	].

	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:38:25'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:38:25'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:38:25'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:38:26'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:38:26'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:38:26'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:38:26'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:38:26'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:38:26'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:38:26'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:38:26'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:38:26'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:38:26'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:38:27'!
PASSED!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:41:07' prior: 50670323!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	clientPurchases do: [ :aSale |
		summary add: aSale items contents.
	].

	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:41:09'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:41:15'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:41:16'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:41:16'!
FAILURE!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:41:27' prior: 50670391!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	clientPurchases do: [ :aSale |
		summary add: aSale items.
	].

	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:41:30'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:41:30'!
FAILURE!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:43:03' prior: 50668749!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog withDateTime: (DateTimeSimulator startingAt: factory today).
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 2
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: (Bag add: (factory itemSellByTheStore) withOccurrences: 1 )
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'juan' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice * 2)! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:43:18' prior: 50667664!
test09InterfaceShowsPurchaseAfterCheckout
	|interface|
	
	interface := factory defaultInterface .
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: (Bag add: (factory itemSellByTheStore) withOccurrences: 1 )
			with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:43:20'!
ERROR!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:43:20'!
ERROR!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:43:52' prior: 50670482!
test09InterfaceShowsPurchaseAfterCheckout
	|interface|
	
	interface := factory defaultInterface .
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: (Bag with: (factory itemSellByTheStore) with: (factory itemSellByTheStore) )
			with: factory itemSellByTheStorePrice )! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 15:19:06' prior: 50670442!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog withDateTime: (DateTimeSimulator startingAt: factory today).
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 2
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'juan' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice * 2)! !
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:45:03' prior: 50670420!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	clientPurchases do: [ :aSale |
		|pp|
		summary := aSale itemsWithCount.
		pp := aSale items contents.
		pp keys do: [ :anItem |
			summary add: anItem.
			summary add: (pp at: anItem).
		].
	].

	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !
!Sale methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 16:46:43'!
itemsWithCount
	|itemsWithCount|
	itemsWithCount := OrderedCollection new.
	items contents keys do: [ :anItem |
		itemsWithCount add: anItem.
		itemsWithCount add: (items contents at: anItem).
	].! !
!Sale methodsFor: 'initialization' stamp: 'mm uu 11/8/2023 16:46:49' prior: 50670585!
itemsWithCount
	|itemsWithCount|
	itemsWithCount := OrderedCollection new.
	items contents keys do: [ :anItem |
		itemsWithCount add: anItem.
		itemsWithCount add: (items contents at: anItem).
	].
	^itemsWithCount ! !
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:47:03' prior: 50670568!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	clientPurchases do: [ :aSale |
		summary addAll: aSale itemsWithCount.
	].

	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:47:07'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:47:07'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:47:07'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:47:07'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:47:07'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:47:07'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:47:07'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:47:08'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:47:08'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:47:08'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:47:08'!
FAILURE!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:47:08'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:47:08'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:47:08'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:47:08'!
FAILURE!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:47:37' prior: 50670509!
test09InterfaceShowsPurchaseAfterCheckout
	|interface|
	
	interface := factory defaultInterface .
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice )! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:47:39'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:47:39'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:47:39'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:47:39'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:47:39'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:47:39'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:47:39'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:47:39'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:47:39'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:47:40'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:47:40'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:47:40'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:47:40'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:47:40'!
PASSED!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:49:37' prior: 50670604!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	summary := clientPurchases inject: #() into: [:summarySoFar :purchase| 
		summarySoFar addAll: purchase itemsWithCount].
"	clientPurchases do: [ :aSale |
		summary addAll: aSale itemsWithCount.
	]."

	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:49:41'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:49:41'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:49:41'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:49:41'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:49:41'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:49:41'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:49:41'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:49:41'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:49:42'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:49:42'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:49:42'!
ERROR!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:49:42'!
ERROR!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:49:42'!
ERROR!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:49:42'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:49:44'!
ERROR!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:50:20' prior: 50670743!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	summary := clientPurchases 
		inject: OrderedCollection new 
		into: [:summarySoFar :purchase| 
			summarySoFar addAll: purchase itemsWithCount
		].
"	clientPurchases do: [ :aSale |
		summary addAll: aSale itemsWithCount.
	]."

	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:50:22'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:50:22'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:50:22'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:50:22'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:50:22'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:50:22'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:50:22'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:50:23'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:50:23'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:50:23'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:50:23'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:50:23'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:50:23'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:50:23'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:50:23'!
FAILURE!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:50:48' prior: 50670816!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	summary := clientPurchases 
		inject: OrderedCollection new 
		into: [:summarySoFar :purchase| 
			summarySoFar addAll: purchase itemsWithCount; yourself 
		].
"	clientPurchases do: [ :aSale |
		summary addAll: aSale itemsWithCount.
	]."

	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:50:50'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:50:50'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:50:50'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:50:50'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:50:50'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:50:50'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:50:50'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:50:50'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:50:50'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:50:51'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:50:51'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:50:51'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:50:51'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:50:51'!
PASSED!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:51:46' prior: 50670890!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	clientPurchases inject: summary
		into: [:summarySoFar :purchase| 
			summarySoFar addAll: purchase itemsWithCount].
	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:51:48'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:51:48'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:51:48'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:51:48'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:51:48'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:51:48'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:51:48'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:51:48'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:51:48'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:51:49'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:51:49'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:51:49'!
FAILURE!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:51:49'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:51:49'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:51:49'!
FAILURE!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:52:10' prior: 50670960!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	clientPurchases inject: summary
		into: [:x :purchase| 
			summary addAll: purchase itemsWithCount].
	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:52:12'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:52:12'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:52:12'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:52:12'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:52:12'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:52:12'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:52:13'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:52:13'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:52:13'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:52:13'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:52:13'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:52:13'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:52:13'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:52:13'!
PASSED!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:52:20' prior: 50671031!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	clientPurchases 
		inject: summary
		into: [:x :purchase| summary addAll: purchase itemsWithCount].
	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 16:52:22' prior: 50671097!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale client = clientId.
	].
	clientPurchases 
		inject: summary
		into: [:x :purchase| summary addAll: purchase itemsWithCount].
		
	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:52:25'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:52:26'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:52:26'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:52:26'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:52:26'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:52:26'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:52:26'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:52:26'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:52:26'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:56:27'!
test12OperationRefreshesSession
	|interface dateTimeSimulator cartId|
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	cartId := interface createCartFor: factory defaultUsername withPassword: factory defaultPassword .
		
	dateTimeSimulator forward: 28 minutes.
	
	interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	dateTimeSimulator forward: 5 minutes.
	
	self 
		shouldnt: [interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.]
		raise: Error.! !

!testRun: #InterfazEntradaTests #test12OperationRefreshesSession stamp: 'mm uu 11/8/2023 16:56:29'!
FAILURE!

!testRun: #InterfazEntradaTests #test12OperationRefreshesSession stamp: 'mm uu 11/8/2023 16:56:29'!
FAILURE!
!InterfazEntrada methodsFor: 'support' stamp: 'mm uu 11/8/2023 16:57:23' prior: 50670238!
retrieveCartWith: cartId
	|session |
	session := self retrieveSessionFor: cartId.
	
	(session isExpiredFrom: dateTime now) ifTrue: [
		sessions removeKey: cartId.
		self error: self class cartIsExpiredErrorMessage 
	].
	session accessedAt: dateTime now.
	^session cart.! !

!testRun: #InterfazEntradaTests #test12OperationRefreshesSession stamp: 'mm uu 11/8/2023 16:57:29'!
ERROR!

!testRun: #InterfazEntradaTests #test12OperationRefreshesSession stamp: 'mm uu 11/8/2023 16:57:29'!
ERROR!
!Session methodsFor: 'access' stamp: 'mm uu 11/8/2023 16:57:37'!
accessedAt: aRenameMe1 
	self shouldBeImplemented.! !
!Session methodsFor: 'access' stamp: 'mm uu 11/8/2023 16:57:47' prior: 50671226!
accessedAt: aDateTime
	lastAccessTime := aDateTime! !

!testRun: #InterfazEntradaTests #test12OperationRefreshesSession stamp: 'mm uu 11/8/2023 16:57:51'!
PASSED!

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 16:57:54'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 16:57:54'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 16:57:54'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 16:57:54'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 16:57:54'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 16:57:54'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 16:57:54'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 16:57:54'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 16:57:54'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 16:57:55'!
PASSED!

!testRun: #InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:57:55'!
PASSED!

!testRun: #InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:57:55'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:57:55'!
PASSED!

!testRun: #InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:57:55'!
PASSED!

!testRun: #InterfazEntradaTests #test12OperationRefreshesSession stamp: 'mm uu 11/8/2023 16:57:55'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:58:06'!
test15OperationRefreshesSession
	|interface dateTimeSimulator cartId|
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	cartId := interface createCartFor: factory defaultUsername withPassword: factory defaultPassword .
		
	dateTimeSimulator forward: 28 minutes.
	
	interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	dateTimeSimulator forward: 5 minutes.
	
	self 
		shouldnt: [interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.]
		raise: Error.! !

!methodRemoval: InterfazEntradaTests #test12OperationRefreshesSession stamp: 'mm uu 11/8/2023 16:58:06'!
test12OperationRefreshesSession
	|interface dateTimeSimulator cartId|
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	interface := InterfazEntrada 
		withUsers: factory defaultUsers 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	cartId := interface createCartFor: factory defaultUsername withPassword: factory defaultPassword .
		
	dateTimeSimulator forward: 28 minutes.
	
	interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	dateTimeSimulator forward: 5 minutes.
	
	self 
		shouldnt: [interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.]
		raise: Error.!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:58:11'!
test14CanNotOperateWithExpiredCart
	|interface users dateTimeSimulator cartId|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	cartId := interface createCartFor: factory defaultUsername withPassword: factory defaultPassword .
		
	dateTimeSimulator forward: 31 minutes.
	
	self 
		should: [interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: interface class cartIsExpiredErrorMessage.
		].
	self 
		should: [interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: interface class invalidCartId .
		]! !

!methodRemoval: InterfazEntradaTests #test12CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 16:58:12'!
test12CanNotOperateWithExpiredCart
	|interface users dateTimeSimulator cartId|
	users := factory defaultUsers .
	dateTimeSimulator := DateTimeSimulator startingAt: factory today.
	
	interface := InterfazEntrada 
		withUsers: users 
		withCatalog: factory defaultCatalog
		withDateTime: dateTimeSimulator.
	
	cartId := interface createCartFor: factory defaultUsername withPassword: factory defaultPassword .
		
	dateTimeSimulator forward: 31 minutes.
	
	self 
		should: [interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: interface class cartIsExpiredErrorMessage.
		].
	self 
		should: [interface addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: interface class invalidCartId .
		]!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:58:16'!
test13InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog withDateTime: (DateTimeSimulator startingAt: factory today).
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 2
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'juan' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice * 2)! !

!methodRemoval: InterfazEntradaTests #test11InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 16:58:16'!
test11InterfaceShowsMultiplePurchasesForDifferentClients
	|interface users transactionId anotherTransactionId|
	users := factory defaultUsers .
	users at: 'juan' put: 'pepito' .
	
	interface := InterfazEntrada withUsers: users withCatalog: factory defaultCatalog withDateTime: (DateTimeSimulator startingAt: factory today).
	
	transactionId := self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	
	anotherTransactionId := self
		createCartForClient: 'juan'
		with: 'pepito' 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 2
		with: interface.
		
	self deny: transactionId = anotherTransactionId .
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory itemSellByTheStorePrice ).
	self assert: (interface listPurchasesFor: 'juan' and: 'pepito')
		equals:(OrderedCollection 
			with: factory anotherItemSellByTheStore with: 2
			with: factory itemSellByTheStorePrice * 2)!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:58:20'!
test12InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface|
	interface := factory defaultInterface.
		
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 1
		with: interface.
					
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)! !

!methodRemoval: InterfazEntradaTests #test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 16:58:20'!
test10InterfaceShowsMultiplePurchasesAfterMultipleCheckouts
	|interface|
	interface := factory defaultInterface.
		
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory anotherItemSellByTheStore 
		withOcurrences: 1
		with: interface.
					
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1 
			with: factory anotherItemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice + factory itemSellByTheStorePrice)!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:58:26'!
test10InterfaceShowsPurchaseAfterCheckout
	|interface|
	
	interface := factory defaultInterface .
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice )! !

!methodRemoval: InterfazEntradaTests #test09InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:58:26'!
test09InterfaceShowsPurchaseAfterCheckout
	|interface|
	
	interface := factory defaultInterface .
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice )!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:58:31'!
test11InterfaceShowsPurchaseAfterCheckout
	|interface|
	
	interface := factory defaultInterface .
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice )! !

!methodRemoval: InterfazEntradaTests #test10InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 16:58:31'!
test10InterfaceShowsPurchaseAfterCheckout
	|interface|
	
	interface := factory defaultInterface .
	
	self 
		createCartForClient: factory defaultUsername 
		with: factory defaultPassword 
		add: factory itemSellByTheStore 
		withOcurrences: 1
		with: interface.
		
	self 
		assert:  (interface listPurchasesFor: factory defaultUsername and: factory defaultPassword )
		equals: (OrderedCollection 
			with: factory itemSellByTheStore with: 1
			with: factory itemSellByTheStorePrice )!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:58:47' prior: 50669861!
test00CannotCreateCartWithInvalidPassword
	|interfaz |
	interfaz := factory defaultInterface .
	
	self 
		should: [ interfaz createCartFor: 'e' withPassword: 'pass']
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: InterfazEntrada invalidCredentialsErrorMessage].! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 16:59:26' prior: 50668600!
test07CanCreateMultipleCartsForDifferentUsers
	|interfaz users cartIdOne cartIdTwo|
	users := factory defaultUsers .
	users add: #pp -> #holi.
	
	interfaz := factory createInterfaceWithUsers: users.
	
	cartIdOne := interfaz createCartFor: factory defaultUsername withPassword: factory defaultPassword .
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	interfaz addToCartWithId: cartIdTwo item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .

	self 
		assert: (interfaz listCartWithId: cartIdTwo ) 
		equals: (Bag with: factory itemSellByTheStore) .	
	! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'mm uu 11/8/2023 16:59:38'!
createInterfaceWithUsers: users.
	
	^ InterfazEntrada 
		withUsers: users
		withCatalog: self defaultCatalog 
		withDateTime: (DateTimeSimulator startingAt: self today).! !

!methodRemoval: InterfazEntradaTests #createCartForDefaultUserAndAdd:withOcurrences:with: stamp: 'mm uu 11/8/2023 16:59:51'!
createCartForDefaultUserAndAdd: anItem withOcurrences: ocurrences with: anInterface
	|cartId card merchantProcessor|
	card := factory notExpiredCreditCard .
	merchantProcessor := MerchantProcessorStub withDefaultBehavior: [:anAmount :aCreditCard|].
	
	cartId := anInterface 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	anInterface addToCartWithId: cartId 
			item: anItem
			withOcurrences: ocurrences.
	anInterface 
		checkoutCartId: cartId
		charging: card
		through: merchantProcessor
		on: factory today.!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 17:00:28' prior: 50671626!
test07CanCreateMultipleCartsForDifferentUsers
	|interfaz users cartIdOne cartIdTwo|
	users := factory defaultUsers .
	users add: #pp -> #holi.
	interfaz := factory createInterfaceWithUsers: users.
	cartIdOne := factory createCartForDefaultUser.
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	interfaz addToCartWithId: cartIdTwo item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .

	self 
		assert: (interfaz listCartWithId: cartIdTwo ) 
		equals: (Bag with: factory itemSellByTheStore) .	
	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'mm uu 11/8/2023 17:01:18'!
createCartForDefaultUserWith: interface
	
	^ interface createCartFor: self defaultUsername withPassword: self defaultPassword ! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 17:01:48' prior: 50668647!
test02CanCreateCartWithValidUserAndPassword
	|interfaz cartId|
	
	interfaz := factory defaultInterface .
	cartId := factory createCartForDefaultUserWith: interfaz.
	
	self assert: (interfaz listCartWithId: cartId) equals: Bag new.
	
	! !

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 17:01:51'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 17:02:03' prior: 50668631!
test03CanAddItemToCart
	|interfaz cartId|
	
	interfaz := factory defaultInterface .
	cartId := factory createCartForDefaultUserWith: interfaz.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore) .
	
	! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 17:02:07' prior: 50668788!
test04CanAddMultipleItemsToCart
	|interfaz cartId|
	interfaz := factory defaultInterface .
	cartId := factory createCartForDefaultUserWith: interfaz.
	
	interfaz addToCartWithId: cartId item: factory itemSellByTheStore withOcurrences: 2.
	
	self 
		assert: (interfaz listCartWithId: cartId) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .
	
	! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 17:02:26' prior: 50671684!
test07CanCreateMultipleCartsForDifferentUsers
	|interfaz users cartIdOne cartIdTwo|
	users := factory defaultUsers .
	users add: #pp -> #holi.
	interfaz := factory createInterfaceWithUsers: users.
	cartIdOne := factory createCartForDefaultUserWith: interfaz.
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	interfaz addToCartWithId: cartIdTwo item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .

	self 
		assert: (interfaz listCartWithId: cartIdTwo ) 
		equals: (Bag with: factory itemSellByTheStore) .	
	! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 17:02:29' prior: 50671761!
test07CanCreateMultipleCartsForDifferentUsers
	|interfaz users cartIdOne cartIdTwo|
	users := factory defaultUsers .
	users add: #pp -> #holi.
	interfaz := factory createInterfaceWithUsers: users.
	
	cartIdOne := factory createCartForDefaultUserWith: interfaz.
	cartIdTwo := interfaz createCartFor: 'pp' withPassword: 'holi'.
	
	interfaz addToCartWithId: cartIdOne item: factory itemSellByTheStore withOcurrences: 2.
	interfaz addToCartWithId: cartIdTwo item: factory itemSellByTheStore withOcurrences: 1.
	
	self 
		assert: (interfaz listCartWithId: cartIdOne ) 
		equals: (Bag with: factory itemSellByTheStore with: factory itemSellByTheStore) .

	self 
		assert: (interfaz listCartWithId: cartIdTwo ) 
		equals: (Bag with: factory itemSellByTheStore) .	
	! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 17:02:51' prior: 50668578!
test08CannotCheckoutEmptyCart
	|interfaz cartId card merchantProcessor|
	interfaz := factory defaultInterface .
		
	card := factory notExpiredCreditCard .
	merchantProcessor := factory merchantProcessorWithNoBehaviour .
	cartId := interfaz 
		createCartFor: factory defaultUsername 
		withPassword: factory defaultPassword.
	
	self 
		should: [interfaz 
			checkoutCartId: cartId 
			charging: card 
			through: merchantProcessor 
			on: factory today
		]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 17:02:56' prior: 50671815!
test08CannotCheckoutEmptyCart
	|interfaz cartId card merchantProcessor|
	interfaz := factory defaultInterface .
		
	card := factory notExpiredCreditCard .
	merchantProcessor := factory merchantProcessorWithNoBehaviour .
	cartId := factory createCartForDefaultUserWith: interfaz.
	
	self 
		should: [interfaz 
			checkoutCartId: cartId 
			charging: card 
			through: merchantProcessor 
			on: factory today
		]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cartCanNotBeEmptyErrorMessage ]! !

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 17:03:02'!
PASSED!
!InterfazEntradaTests methodsFor: 'tests' stamp: 'mm uu 11/8/2023 17:03:09' prior: 50668560!
test09CannotAddItemThatIsNotInCatalog
	|interface cartId |
	
	interface := factory defaultInterface .
	cartId := factory createCartForDefaultUserWith: interface.
	
	self 
		should: [
			interface addToCartWithId: cartId 
			item: factory itemNotSellByTheStore 
			withOcurrences: 1.]
		raise: Error
		withExceptionDo: [
			:anError | self assert: anError messageText equals: Cart invalidItemErrorMessage ]! !

----SNAPSHOT----(8 November 2023 17:03:31) CuisUniversity-5981.image priorSource: 10805393!

!methodRemoval: Session #lastAcessTime stamp: 'mm uu 11/8/2023 17:03:54'!
lastAcessTime
	^lastAccessTime !

!methodRemoval: Session #createdAt stamp: 'mm uu 11/8/2023 17:03:57'!
createdAt
	^createdAt!

!methodRemoval: Session #clientId stamp: 'mm uu 11/8/2023 17:04:00'!
clientId
	^clientId!
!Session methodsFor: 'access' stamp: 'mm uu 11/8/2023 17:04:14'!
clientId
	^clientId ! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 17:04:16'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 17:04:16'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 17:04:16'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 17:04:16'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 17:04:16'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 17:04:16'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 17:04:16'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 17:04:17'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 17:04:17'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 17:04:17'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 17:04:17'!
PASSED!

!testRun: #InterfazEntradaTests #test12InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 17:04:17'!
PASSED!

!testRun: #InterfazEntradaTests #test13InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 17:04:17'!
PASSED!

!testRun: #InterfazEntradaTests #test14CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 17:04:17'!
PASSED!

!testRun: #InterfazEntradaTests #test15OperationRefreshesSession stamp: 'mm uu 11/8/2023 17:04:17'!
PASSED!

!methodRemoval: Sale #initializeTotal: stamp: 'mm uu 11/8/2023 17:04:26'!
initializeTotal: aTotal

	total := aTotal !

!methodRemoval: Sale class #of: stamp: 'mm uu 11/8/2023 17:04:30'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 17:04:31'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 17:04:31'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 17:04:32'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 17:04:32'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 17:04:32'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 17:04:32'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 17:04:32'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 17:04:32'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 17:04:32'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 17:04:32'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 17:04:32'!
PASSED!

!testRun: #InterfazEntradaTests #test12InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 17:04:33'!
PASSED!

!testRun: #InterfazEntradaTests #test13InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 17:04:33'!
PASSED!

!testRun: #InterfazEntradaTests #test14CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 17:04:33'!
PASSED!

!testRun: #InterfazEntradaTests #test15OperationRefreshesSession stamp: 'mm uu 11/8/2023 17:04:33'!
PASSED!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 17:05:19' prior: 50671112!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale |
		aSale isFromClient: clientId.
	].
	clientPurchases 
		inject: summary
		into: [:x :purchase| summary addAll: purchase itemsWithCount].
		
	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !
!Sale methodsFor: 'accesing' stamp: 'mm uu 11/8/2023 17:05:46'!
isFromClient: aClientId
	^aClientId = client ! !

!methodRemoval: Sale #client stamp: 'mm uu 11/8/2023 17:05:48'!
client
	^client!

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 17:05:50'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 17:05:50'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 17:05:51'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 17:05:51'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 17:05:51'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 17:05:51'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 17:05:51'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 17:05:51'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 17:05:51'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 17:05:51'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 17:05:52'!
PASSED!

!testRun: #InterfazEntradaTests #test12InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 17:05:52'!
PASSED!

!testRun: #InterfazEntradaTests #test13InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 17:05:52'!
PASSED!

!testRun: #InterfazEntradaTests #test14CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 17:05:52'!
PASSED!

!testRun: #InterfazEntradaTests #test15OperationRefreshesSession stamp: 'mm uu 11/8/2023 17:05:52'!
PASSED!
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 17:06:10' prior: 50672010!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale | aSale isFromClient: clientId ].
	clientPurchases 
		inject: summary
		into: [:x :purchase| summary addAll: purchase itemsWithCount].
		
	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !
!InterfazEntrada methodsFor: 'list purchases' stamp: 'mm uu 11/8/2023 17:06:14' prior: 50672086!
listPurchasesFor: clientId and: password
	|clientPurchases summary|
	summary := OrderedCollection new.
	
	clientPurchases := salesBook select: [:aSale | aSale isFromClient: clientId ].
	clientPurchases inject: summary
		into: [:x :purchase| summary addAll: purchase itemsWithCount].
		
	summary add: (clientPurchases sum: [:aSale | aSale total]).
	^summary
	! !

!testRun: #InterfazEntradaTests #test00CannotCreateCartWithInvalidPassword stamp: 'mm uu 11/8/2023 17:06:16'!
PASSED!

!testRun: #InterfazEntradaTests #test01CannotCreateCartWithInvalidUser stamp: 'mm uu 11/8/2023 17:06:16'!
PASSED!

!testRun: #InterfazEntradaTests #test02CanCreateCartWithValidUserAndPassword stamp: 'mm uu 11/8/2023 17:06:16'!
PASSED!

!testRun: #InterfazEntradaTests #test03CanAddItemToCart stamp: 'mm uu 11/8/2023 17:06:16'!
PASSED!

!testRun: #InterfazEntradaTests #test04CanAddMultipleItemsToCart stamp: 'mm uu 11/8/2023 17:06:17'!
PASSED!

!testRun: #InterfazEntradaTests #test05CannotAddItemsToInvalidCart stamp: 'mm uu 11/8/2023 17:06:17'!
PASSED!

!testRun: #InterfazEntradaTests #test06CannotListItemsForInvalidCart stamp: 'mm uu 11/8/2023 17:06:17'!
PASSED!

!testRun: #InterfazEntradaTests #test07CanCreateMultipleCartsForDifferentUsers stamp: 'mm uu 11/8/2023 17:06:17'!
PASSED!

!testRun: #InterfazEntradaTests #test08CannotCheckoutEmptyCart stamp: 'mm uu 11/8/2023 17:06:17'!
PASSED!

!testRun: #InterfazEntradaTests #test09CannotAddItemThatIsNotInCatalog stamp: 'mm uu 11/8/2023 17:06:17'!
PASSED!

!testRun: #InterfazEntradaTests #test11InterfaceShowsPurchaseAfterCheckout stamp: 'mm uu 11/8/2023 17:06:17'!
PASSED!

!testRun: #InterfazEntradaTests #test12InterfaceShowsMultiplePurchasesAfterMultipleCheckouts stamp: 'mm uu 11/8/2023 17:06:17'!
PASSED!

!testRun: #InterfazEntradaTests #test13InterfaceShowsMultiplePurchasesForDifferentClients stamp: 'mm uu 11/8/2023 17:06:17'!
PASSED!

!testRun: #InterfazEntradaTests #test14CanNotOperateWithExpiredCart stamp: 'mm uu 11/8/2023 17:06:18'!
PASSED!

!testRun: #InterfazEntradaTests #test15OperationRefreshesSession stamp: 'mm uu 11/8/2023 17:06:18'!
PASSED!

!methodRemoval: DateTimeSimulator #forwardMinutes: stamp: 'mm uu 11/8/2023 17:06:33'!
forwardMinutes: minutes
	dateTime := dateTime + minutes!

----SNAPSHOT----(8 November 2023 17:06:53) CuisUniversity-5981.image priorSource: 10887224!

----SNAPSHOT----(8 November 2023 17:06:56) CuisUniversity-5981.image priorSource: 10896745!