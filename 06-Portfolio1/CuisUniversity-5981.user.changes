

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (2 September 2023 17:38:42) as /home/matias/Descargas/linux64/CuisUniversity-5981.image!


----STARTUP---- (6 September 2023 09:51:37) as /home/matias/Descargas/linux64/CuisUniversity-5981.image!


----End fileIn of /home/matias/Descargas/linux64/CodigoRepetido-Ejercicio.st----!
!CustomerBook methodsFor: 'customer management' stamp: 'h 9/6/2023 09:52:49' prior: 50650599!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	(self includesCustomerNamed: aName) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'h 9/6/2023 09:52:59'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'h 9/6/2023 09:52:59'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'h 9/6/2023 09:52:59'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'h 9/6/2023 09:52:59'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'h 9/6/2023 09:52:59'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'h 9/6/2023 09:52:59'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'h 9/6/2023 09:52:59'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'h 9/6/2023 09:52:59'!
PASSED!

----SNAPSHOT----(6 September 2023 09:55:22) CuisUniversity-5981.image priorSource: 10197292!

----QUIT----(6 September 2023 10:01:16) CuisUniversity-5981.image priorSource: 10210255!

----STARTUP---- (6 September 2023 12:10:35) as /home/matias/Descargas/linux64/CuisUniversity-5981.image!


----End fileIn of /home/matias/Descargas/linux64/CodigoRepetido-Ejercicio.st----!

----STARTUP---- (6 September 2023 12:11:32) as /home/matias/Descargas/linux64/CuisUniversity-5981.image!


!classRemoval: #CustomerBook stamp: 'h 9/6/2023 12:11:39'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'h 9/6/2023 12:11:39'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'h 9/6/2023 12:11:40'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'h 9/6/2023 12:11:40'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of /home/matias/Descargas/linux64/CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'testing' stamp: 'h 9/6/2023 12:29:09' prior: 50650869!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds
	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	customerBook addCustomerNamed: paulMcCartney.
	  
	self assertThatAClosure: [customerBook removeCustomerNamed: paulMcCartney.] in: 1 takesLessThan: 100*millisecond.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'h 9/6/2023 12:29:13'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'h 9/6/2023 12:29:13'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'h 9/6/2023 12:29:13'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'h 9/6/2023 12:29:13'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'h 9/6/2023 12:29:13'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'h 9/6/2023 12:29:13'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'h 9/6/2023 12:29:13'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'h 9/6/2023 12:29:13'!
PASSED!

!classRemoval: #CustomerBook stamp: 'h 9/6/2023 12:29:52'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'h 9/6/2023 12:29:52'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'h 9/6/2023 12:29:53'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'h 9/6/2023 12:29:53'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of /home/matias/Descargas/CodigoRepetido-EjercicioVIejo.st----!

----STARTUP---- (13 October 2023 20:17:27) as /home/matias/Descargas/linux64/CuisUniversity-5981.image!


----End fileIn of /home/matias/Descargas/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'h 10/13/2023 20:19:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:19:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:19:15'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'h 10/13/2023 20:19:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'h 10/13/2023 20:19:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'h 10/13/2023 20:19:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'h 10/13/2023 20:19:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:19:15'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'h 10/13/2023 20:20:46' prior: 50650943!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] 
								ifFalse: [aTransaction value negated] 
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'h 10/13/2023 20:20:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:20:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:20:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'h 10/13/2023 20:20:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'h 10/13/2023 20:20:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'h 10/13/2023 20:20:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'h 10/13/2023 20:20:49'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'h 10/13/2023 20:22:41' prior: 50650986!
balance
	
	|currentBalance|
	
	currentBalance := 0.
	
	transactions do: [ :aTransaction | 
		currentBalance := aTransaction calculateBalance: currentBalance
		]
	
	^currentBalance ! !
!AccountTransaction methodsFor: 'balance' stamp: 'h 10/13/2023 20:23:15'!
calculateBalance: currentBalance

	^self subclassResponsibility! !
!Deposit methodsFor: 'balance' stamp: 'h 10/13/2023 20:23:49' overrides: 50651030!
calculateBalance: balanceToCalculate

	^balanceToCalculate + value! !
!Withdraw methodsFor: 'balance' stamp: 'h 10/13/2023 20:24:03' overrides: 50651030!
calculateBalance: balanceToCalculate

	^balanceToCalculate - value! !
!AccountTransaction methodsFor: 'balance' stamp: 'h 10/13/2023 20:24:26' prior: 50651030!
calculateBalance: balanceToUpdate

	^self subclassResponsibility! !
!Deposit methodsFor: 'balance' stamp: 'h 10/13/2023 20:24:36' prior: 50651035 overrides: 50651045!
calculateBalance: balanceToUpdate

	^balanceToUpdate+ value! !
!Withdraw methodsFor: 'balance' stamp: 'h 10/13/2023 20:24:51' prior: 50651040 overrides: 50651045!
calculateBalance: balanceToUpdate

	^balanceToUpdate - value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'h 10/13/2023 20:24:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:24:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:24:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'h 10/13/2023 20:24:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'h 10/13/2023 20:24:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'h 10/13/2023 20:24:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'h 10/13/2023 20:24:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'h 10/13/2023 20:26:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:26:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:26:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'h 10/13/2023 20:26:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'h 10/13/2023 20:26:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'h 10/13/2023 20:26:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'h 10/13/2023 20:26:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'h 10/13/2023 20:26:13'!
ERROR!

account balance!

account!
!ReceptiveAccount methodsFor: 'balance' stamp: 'h 10/13/2023 20:27:14' prior: 50651021!
balance
	
	|currentBalance|
	
	currentBalance := 0.
	
	transactions do: [ :aTransaction | 
		currentBalance := aTransaction calculateBalance: currentBalance
		].
	
	^currentBalance ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'h 10/13/2023 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'h 10/13/2023 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'h 10/13/2023 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'h 10/13/2023 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'h 10/13/2023 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'h 10/13/2023 20:27:16'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'h 10/13/2023 20:27:37'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'h 10/13/2023 20:29:50'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'h 10/13/2023 20:29:45'!
test01EmptyPortfolioBalanceEqualsZero

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/13/2023 20:29:54'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/13/2023 20:29:54'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/13/2023 20:29:56'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/13/2023 20:29:56'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'h 10/13/2023 20:30:04'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'h 10/13/2023 20:30:10' prior: 50651193!
balance
	^0! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/13/2023 20:30:14'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/13/2023 20:31:50'!
test02PortfolioWithOneAccountBalanceEqualsAccountBalance

	|portfolio firstAccount|
	
	firstAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	Deposit register: 100 on: firstAccount .
	
	self assert: portfolio balance equals: firstAccount balance.! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/13/2023 20:31:54'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/13/2023 20:32:31' prior: 50651204!
test02PortfolioWithOneAccountBalanceEqualsAccountBalance

	|portfolio firstAccount|
	
	firstAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	portfolio addAccount: firstAccount .
	
	self assert: portfolio balance equals: firstAccount balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/13/2023 20:32:42' prior: 50651220!
test02PortfolioWithOneAccountBalanceEqualsAccountBalance

	|portfolio firstAccount|
	
	firstAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	portfolio addAccount: firstAccount.
	
	self assert: portfolio balance equals: firstAccount balance.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'h 10/13/2023 20:33:30'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'add' stamp: 'h 10/13/2023 20:33:28'!
addAccount: anAccountToAdd

	accounts add: anAccountToAdd ! !
!Portfolio methodsFor: 'initialize' stamp: 'h 10/13/2023 20:33:49' overrides: 16920235!
initialize

	accounts := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'h 10/13/2023 20:34:00' prior: 50651197!
balance
	^accounts first balance! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/13/2023 20:34:04'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'h 10/13/2023 20:34:51' prior: 50651262!
balance
	accounts ifEmpty: [^0].
	^accounts first balance! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/13/2023 20:34:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/13/2023 20:34:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/13/2023 20:36:56'!
test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances

	|portfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 50 on: secondAccount .
	portfolio addAccount: firstAccount.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: firstAccount balance + secondAccount balance.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/13/2023 20:37:04'!
FAILURE!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/13/2023 20:37:04'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'h 10/13/2023 20:38:24' prior: 50651270!
balance
	
	accounts ifEmpty: [^0].
	
	^accounts sum: [:anAccount | anAccount balance]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/13/2023 20:38:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/13/2023 20:38:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/13/2023 20:38:25'!
PASSED!

----SNAPSHOT----(13 October 2023 20:38:32) CuisUniversity-5981.image priorSource: 10210349!

----QUIT----(13 October 2023 20:38:36) CuisUniversity-5981.image priorSource: 10229610!

----STARTUP---- (14 October 2023 00:47:46) as /home/matias/Descargas/linux64/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 00:50:52'!
test04PortfolioWithOnePortfolioHaveSameBalance

	|portfolio firstIncludedPortfolio firstAccount|
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self assert: portfolio balance equals: firstIncludedPortfolio balance.! !

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:50:59'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:50:59'!
ERROR!
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 00:51:03'!
addPortfolio: firstIncludedPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'h 10/14/2023 00:51:34'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 00:51:32' prior: 50651358!
addPortfolio: aPortfolioToBeAdded 
	
	portfolio := aPortfolioToBeAdded.! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'h 10/14/2023 00:52:20'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 00:52:25' prior: 50651371!
addPortfolio: aPortfolioToBeAdded 
	
	portfolios := aPortfolioToBeAdded.! !
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 00:53:48' prior: 50651309!
balance
	
	accounts ifEmpty: [^0].
	portfolios isEmpty ifFalse: [^portfolios first balance].
	^accounts sum: [:anAccount | anAccount balance]! !

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:53:54'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:53:54'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 00:54:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 00:54:18'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 00:54:18'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:54:18'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 00:54:21'!
ERROR!
!Portfolio methodsFor: 'initialize' stamp: 'h 10/14/2023 00:54:39' prior: 50651257 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 00:54:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 00:54:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 00:54:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:54:41'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:54:41'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 00:54:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 00:54:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 00:54:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:54:50'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:54:50'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 00:55:30' prior: 50651389!
addPortfolio: aPortfolioToBeAdded 
	
	portfolios add: aPortfolioToBeAdded.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 00:55:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 00:55:32'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 00:55:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:55:32'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:55:32'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 00:55:59' prior: 50651394!
balance
	
	accounts ifEmpty: [^0].
	portfolios isEmpty ifFalse: [^(portfolios first) balance].
	^accounts sum: [:anAccount | anAccount balance]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 00:56:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 00:56:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 00:56:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:56:01'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:56:01'!
FAILURE!

portfolio!

firstIncludedPortfolio!
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 00:57:57' prior: 50651495!
balance
	
	portfolios isEmpty ifFalse: [^(portfolios first) balance].
	accounts ifEmpty: [^0].
	^accounts sum: [:anAccount | anAccount balance]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 00:57:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 00:57:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 00:57:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 00:57:59'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:00:17'!
test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances

	|portfolio firstIncludedPortfolio secondIncludedPortfolio secondAccount firstAccount|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 200 on: secondAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self assert: portfolio balance equals: firstIncludedPortfolio balance + secondIncludedPortfolio balance.! !

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:00:21'!
FAILURE!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:00:21'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 01:01:36' prior: 50651523!
balance
	
	portfolios sum: [:aPortfolio | aPortfolio balance].
	
	^accounts sum: [:anAccount | anAccount balance]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:01:37'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:01:37'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:01:37'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:01:37'!
ERROR!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:01:37'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 01:02:17' prior: 50651582!
balance
	
	portfolios isEmpty ifFalse: [portfolios sum: [:aPortfolio | aPortfolio balance]].
	
	^accounts sum: [:anAccount | anAccount balance]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:02:19'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:02:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:02:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:02:19'!
ERROR!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:02:19'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 01:03:27' prior: 50651608!
balance
	
	portfolios isEmpty ifFalse: [^portfolios sum: [:aPortfolio | aPortfolio balance]].
	
	^accounts sum: [:anAccount | anAccount balance]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:03:28'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:03:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:03:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:03:28'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:03:28'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:03:28'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 01:04:02' prior: 50651635!
balance
	
	portfolios isEmpty ifFalse: [^portfolios sum: [:aPortfolio | aPortfolio balance]].
	accounts ifEmpty: [^0].
	^accounts sum: [:anAccount | anAccount balance]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:04:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:04:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:04:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:04:03'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:04:03'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:06:00'!
test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances

	|portfolio firstIncludedPortfolio secondIncludedPortfolio secondAccount firstAccount thirdAccount|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 200 on: secondAccount .
	Deposit register: 100 on: thirdAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: portfolio balance equals: 400.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:06:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:06:04'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:06:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:06:04'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:06:04'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:06:04'!
FAILURE!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:06:04'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 01:08:31' prior: 50651666!
balance
	
	|currentBalance|
	
	currentBalance := portfolios sum: [portfolios sum: [:aPortfolio | aPortfolio balance]] ifEmpty: [0].
	
	currentBalance := currentBalance + accounts sum: [:anAccount | anAccount balance] ifEmpty: [0].
	
	^currentBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:08:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:08:34'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:08:34'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:08:34'!
ERROR!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:08:34'!
ERROR!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:08:34'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 01:08:53' prior: 50651751!
balance
	
	|currentBalance|
	
	currentBalance := portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0].
	
	currentBalance := currentBalance + accounts sum: [:anAccount | anAccount balance] ifEmpty: [0].
	
	^currentBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:08:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:08:56'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:08:56'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:08:56'!
ERROR!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:08:56'!
ERROR!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:08:56'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:09:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:09:33'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:09:33'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:09:33'!
ERROR!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:09:33'!
ERROR!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:09:33'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:09:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:09:46'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:09:46'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:09:46'!
ERROR!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:09:46'!
ERROR!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:09:46'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:09:48'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 01:10:03' prior: 50651786!
balance
	
	|currentBalance|
	currentBalance := 0.
	currentBalance := portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0].
	
	currentBalance := currentBalance + accounts sum: [:anAccount | anAccount balance] ifEmpty: [0].
	
	^currentBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:10:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:10:05'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:10:05'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:10:05'!
ERROR!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:10:05'!
ERROR!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:10:05'!
ERROR!

portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0]!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:12:16'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 01:12:35' prior: 50651872!
balance
	
	|currentBalance|
	currentBalance := 0.
	currentBalance := portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0].
	
	currentBalance := currentBalance + (accounts sum: [:anAccount | anAccount balance] ifEmpty: [0]).
	
	^currentBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:12:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:21:01'!
test07EmptyPortfolioDoesNotHaveRegisteredTransactions

	|portfolio anAccount aDeposit|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: anAccount.
	
	self assert: (portfolio hasRegistered: aDeposit ).! !

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:21:02'!
ERROR!
!Portfolio methodsFor: 'test' stamp: 'h 10/14/2023 01:21:09'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'test' stamp: 'h 10/14/2023 01:21:29' prior: 50651962!
hasRegistered: aTransaction
	
	^false! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:21:37' prior: 50651948!
test07EmptyPortfolioDoesNotHaveRegisteredTransactions

	|portfolio anAccount aDeposit|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: anAccount.
	
	self deny: (portfolio hasRegistered: aDeposit ).! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:21:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:21:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:21:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:21:39'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:21:39'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:21:39'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:21:39'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:23:25'!
test08PortfolioWithOneAccountHasRegisteredTransaction

	|portfolio anAccount aDeposit|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: anAccount.
	portfolio addAccount: anAccount .
	
	self assert: (portfolio hasRegistered: aDeposit ).! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:23:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:23:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:23:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:23:28'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:23:28'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:23:28'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:23:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasRegisteredTransaction stamp: 'h 10/14/2023 01:23:28'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasRegisteredTransaction stamp: 'h 10/14/2023 01:23:28'!
FAILURE!
!Portfolio methodsFor: 'test' stamp: 'h 10/14/2023 01:24:33' prior: 50651967!
hasRegistered: aTransaction
	
	accounts ifEmpty: [^false]
	^true! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:24:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:24:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:24:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:24:35'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:24:35'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:24:35'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:24:35'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasRegisteredTransaction stamp: 'h 10/14/2023 01:24:35'!
ERROR!

accounts!

accounts!

self size!
!Portfolio methodsFor: 'test' stamp: 'h 10/14/2023 01:25:57' prior: 50652059!
hasRegistered: aTransaction
	
	accounts ifEmpty: [^false].
	^true! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:25:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:25:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:25:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:25:59'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:25:59'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:25:59'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:25:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasRegisteredTransaction stamp: 'h 10/14/2023 01:25:59'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:27:01'!
test08PortfolioWithMultipleAccountDoesNotHaveRegisteredTransaction

	|portfolio firstAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: firstAccount .
	
	self assert: (portfolio hasRegistered: aDeposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:27:10'!
test09PortfolioWithOneAccountHasRegisteredTransaction

	|portfolio anAccount aDeposit|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: anAccount.
	portfolio addAccount: anAccount .
	
	self assert: (portfolio hasRegistered: aDeposit ).! !

!methodRemoval: PortfolioTest #test08PortfolioWithOneAccountHasRegisteredTransaction stamp: 'h 10/14/2023 01:27:10'!
test08PortfolioWithOneAccountHasRegisteredTransaction

	|portfolio anAccount aDeposit|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: anAccount.
	portfolio addAccount: anAccount .
	
	self assert: (portfolio hasRegistered: aDeposit ).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:30:38' prior: 50652147!
test09PortfolioWithOneAccountHasRegisteredTransaction

	|portfolio firstAccount secondAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: secondAccount .
	
	self deny: (portfolio hasRegistered: aDeposit ).! !

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasRegisteredTransaction stamp: 'h 10/14/2023 01:30:45'!
FAILURE!
!Portfolio methodsFor: 'test' stamp: 'h 10/14/2023 01:32:47' prior: 50652097!
hasRegistered: aTransaction
	
	(accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction]) ifTrue: [^true].
	^false! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:32:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:32:49'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:32:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:32:49'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:32:49'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:32:49'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:32:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithMultipleAccountDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 01:32:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasRegisteredTransaction stamp: 'h 10/14/2023 01:32:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:33:10'!
test09PortfolioWithAccountsHasRegisteredTransaction

	|portfolio firstAccount secondAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: secondAccount .
	
	self deny: (portfolio hasRegistered: aDeposit ).! !

!methodRemoval: PortfolioTest #test09PortfolioWithOneAccountHasRegisteredTransaction stamp: 'h 10/14/2023 01:33:10'!
test09PortfolioWithOneAccountHasRegisteredTransaction

	|portfolio firstAccount secondAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: secondAccount .
	
	self deny: (portfolio hasRegistered: aDeposit ).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:33:25'!
test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction

	|portfolio firstAccount secondAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: secondAccount .
	
	self deny: (portfolio hasRegistered: aDeposit ).! !

!methodRemoval: PortfolioTest #test09PortfolioWithAccountsHasRegisteredTransaction stamp: 'h 10/14/2023 01:33:25'!
test09PortfolioWithAccountsHasRegisteredTransaction

	|portfolio firstAccount secondAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: secondAccount .
	
	self deny: (portfolio hasRegistered: aDeposit ).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:33:57'!
test08PortfolioWithOneAccounthasRegisteredTransaction

	|portfolio firstAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: firstAccount .
	
	self assert: (portfolio hasRegistered: aDeposit ).! !

!methodRemoval: PortfolioTest #test08PortfolioWithMultipleAccountDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 01:33:57'!
test08PortfolioWithMultipleAccountDoesNotHaveRegisteredTransaction

	|portfolio firstAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: firstAccount .
	
	self assert: (portfolio hasRegistered: aDeposit ).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:39:35'!
test10PortfolioWithPortfoliosDetectsRegisteredTransactions

	|portfolio firstIncludedPortfolio secondIncludedPortfolio firstAccount secondAccount firstDeposit secondDeposit|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	firstDeposit := Deposit register: 100 on: firstAccount.
	secondDeposit := Deposit register: 100 on: secondAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio.
	
	self assert: (portfolio hasRegistered: firstDeposit ).
	self assert: (portfolio hasRegistered: firstDeposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:39:53' prior: 50652319!
test10PortfolioWithPortfoliosDetectsRegisteredTransactions

	|portfolio firstIncludedPortfolio secondIncludedPortfolio firstAccount secondAccount firstDeposit secondDeposit|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	firstDeposit := Deposit register: 100 on: firstAccount.
	secondDeposit := Deposit register: 100 on: secondAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio.
	
	self assert: (portfolio hasRegistered: firstDeposit ).
	self assert: (portfolio hasRegistered: secondDeposit ).! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:39:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:39:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:39:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:39:56'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:39:56'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:39:56'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:39:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 01:39:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 01:39:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 01:39:56'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 01:39:56'!
FAILURE!
!Portfolio methodsFor: 'test' stamp: 'h 10/14/2023 01:41:28' prior: 50652191!
hasRegistered: aTransaction
	
	(accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction]) ifTrue: [^true].
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasRegistered: aTransaction]) ifTrue: [^true]
	^false! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:41:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:41:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:41:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:41:30'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:41:30'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:41:30'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:41:30'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 01:41:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 01:41:30'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 01:41:30'!
ERROR!
!Portfolio methodsFor: 'test' stamp: 'h 10/14/2023 01:42:05' prior: 50652420!
hasRegistered: aTransaction
	
	(accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction]) ifTrue: [^true].
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasRegistered: aTransaction]) ifTrue: [^true].
	^false! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:42:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:42:07'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:42:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:42:07'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:42:07'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:42:07'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:42:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 01:42:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 01:42:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 01:42:07'!
PASSED!
!Portfolio methodsFor: 'test' stamp: 'h 10/14/2023 01:46:24' prior: 50652470!
hasRegistered: aTransaction
	
	(accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction]) ifTrue: [^true].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasRegistered: aTransaction]) ifTrue: [^true].
	
	^false! !
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 01:46:39' prior: 50651913!
balance
	
	|currentBalance|
	
	currentBalance := 0.
	currentBalance := portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0].
	
	currentBalance := currentBalance + (accounts sum: [:anAccount | anAccount balance] ifEmpty: [0]).
	
	^currentBalance .! !
!Portfolio methodsFor: 'balance' stamp: 'h 10/14/2023 01:46:49' prior: 50652530!
balance
	
	|currentBalance|
	
	currentBalance := portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0].
	
	currentBalance := currentBalance + (accounts sum: [:anAccount | anAccount balance] ifEmpty: [0]).
	
	^currentBalance .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 01:46:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:47:40' prior: 50652348!
test10PortfolioWithPortfoliosDetectsRegisteredTransactions

	|portfolio firstIncludedPortfolio secondIncludedPortfolio firstAccount secondAccount firstDeposit secondDeposit|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	firstDeposit := Deposit register: 100 on: firstAccount.
	secondDeposit := Deposit register: 100 on: secondAccount .
	
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio.
	
	self assert: (portfolio hasRegistered: firstDeposit ).
	self assert: (portfolio hasRegistered: secondDeposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:52:21'!
test11PortfolioWithOneAccountKnowsItsTransactions

	|portfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	Deposit register: 100 on: anAccount.
	
	self assert: portfolio transactions equals: anAccount transactions.! !

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 01:52:25'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 01:52:37'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 01:52:59' prior: 50652633!
transactions
	
	^accounts first transactions! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:53:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:53:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:53:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:53:02'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:53:02'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:53:02'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:53:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 01:53:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 01:53:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 01:53:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 01:53:02'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 01:53:02'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:53:19' prior: 50652619!
test11PortfolioWithOneAccountKnowsItsTransactions

	|portfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	Deposit register: 100 on: anAccount.
	
	portfolio addAccount: anAccount .
	
	self assert: portfolio transactions equals: anAccount transactions.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:53:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:53:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:53:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:53:21'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:53:21'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:53:21'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:53:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 01:53:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 01:53:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 01:53:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 01:53:21'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 01:54:26'!
test12EmptyPortfolioDoesNotHaveTransactions

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions equals: OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 01:54:46'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 01:54:46'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 01:54:46'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 01:55:24' prior: 50652638!
transactions
	
	accounts ifEmpty: [^OrderedCollection new].
	^accounts first transactions! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 01:55:26'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 01:55:26'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 02:19:46'!
test11PortfolioWithMultipleAccountsKnowsItsTransactions

	|portfolio firstAccount secondAccount firstTransaction secondTransaction|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 100 on: secondAccount .
	
	portfolio addAccount: firstAccount. portfolio addAccount: secondAccount .
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: (portfolio transactions includes: secondTransaction ).
	self assert: portfolio transactions size equals: 2 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 02:19:54'!
test13PortfolioWithMultipleAccountsKnowsItsTransactions

	|portfolio firstAccount secondAccount firstTransaction secondTransaction|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 100 on: secondAccount .
	
	portfolio addAccount: firstAccount. portfolio addAccount: secondAccount .
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: (portfolio transactions includes: secondTransaction ).
	self assert: portfolio transactions size equals: 2 .! !

!methodRemoval: PortfolioTest #test11PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 02:19:54'!
test11PortfolioWithMultipleAccountsKnowsItsTransactions

	|portfolio firstAccount secondAccount firstTransaction secondTransaction|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 100 on: secondAccount .
	
	portfolio addAccount: firstAccount. portfolio addAccount: secondAccount .
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: (portfolio transactions includes: secondTransaction ).
	self assert: portfolio transactions size equals: 2 .!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 02:19:56'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 02:19:56'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 02:19:56'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 02:23:47' prior: 50652803!
transactions

	|transactions|
	
	transactions := OrderedCollection new.
	
	accounts ifEmpty: [^transactions].
	accounts inject: transactions into: [:currentTransactions :anAccount | 
		anAccount transactions do:[:aTransaction | currentTransactions add: aTransaction ]
		].
	
	^transactions ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 02:23:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 02:23:49'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 02:23:49'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 02:25:03'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 02:25:03'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 02:25:03'!
FAILURE!

anAccount transactions!

currentTransactions !

currentTransactions !

transactions!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 02:28:11'!
FAILURE!

secondAccount!

firstAccount!
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 02:30:27' prior: 50652979!
transactions

	|transactions|
	
	transactions := OrderedCollection new.
	
	accounts ifEmpty: [^transactions].
	accounts inject: transactions into: [:currentTransactions :anAccount | 
		anAccount transactions do:[:aTransaction | currentTransactions add: aTransaction ]. currentTransactions
		].
	
	^transactions ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 02:30:30'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 02:30:30'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 02:31:46' prior: 50653108!
transactions

	|transactions|
	
	transactions := OrderedCollection new.
	
	accounts inject: transactions into: [:currentTransactions :anAccount | 
		anAccount transactions do:[:aTransaction | currentTransactions add: aTransaction ]. currentTransactions
		].
	
	^transactions ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 02:31:48'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 02:31:48'!
PASSED!

----QUIT----(14 October 2023 02:34:03) CuisUniversity-5981.image priorSource: 10229703!

----STARTUP---- (14 October 2023 14:55:33) as /home/matias/Escritorio/linux64/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 14:58:24'!
test13PortfolioWithPortfolioKnowsItsTransactions

	|portfolio firstAccount firstIncludedPortfolio firstTransaction|
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self assert: portfolio transactions equals: firstIncludedPortfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 14:58:38' prior: 50653239!
test13PortfolioWithPortfolioKnowsItsTransactions

	|portfolio firstAccount firstIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self assert: portfolio transactions equals: firstIncludedPortfolio transactions.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 14:58:40'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 14:58:40'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 14:58:40'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 14:59:08'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 14:59:08'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 15:01:19' prior: 50653171!
transactions

	|transactions|
	
	transactions := OrderedCollection new.
	
	accounts inject: transactions into: [:currentTransactions :anAccount | 
		anAccount transactions do:[:aTransaction | currentTransactions add: aTransaction;yourself]
		].
	
	portfolios inject: transactions into: [:currentTransactions :aPortfolio | 
		aPortfolio transactions do:[:aTransaction | currentTransactions add: aTransaction;yourself]
		].
	
	^transactions ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:01:21'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:01:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:01:21'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 15:02:40' prior: 50653391!
transactions

	|transactions|
	
	transactions := OrderedCollection new.
	
	accounts inject: transactions into: [:currentTransactions :anAccount | 
		anAccount transactions do:[:aTransaction | currentTransactions add: aTransaction]. currentTransactions 
		].
	
	portfolios inject: transactions into: [:currentTransactions :aPortfolio | 
		aPortfolio transactions do:[:aTransaction | currentTransactions add: aTransaction]. currentTransactions 
		].
	
	^transactions ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:02:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:02:43'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:03:03'!
test14PortfolioWithMultiplePortfoliosKnowsItsTransactions

	|portfolio firstAccount firstIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self assert: portfolio transactions equals: firstIncludedPortfolio transactions.! !

!methodRemoval: PortfolioTest #test13PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:03:03'!
test13PortfolioWithPortfolioKnowsItsTransactions

	|portfolio firstAccount firstIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self assert: portfolio transactions equals: firstIncludedPortfolio transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:09:23' prior: 50653538!
test14PortfolioWithMultiplePortfoliosKnowsItsTransactions

	|portfolio firstAccount secondAccount firstIncludedPortfolio secondIncludedPortfolio firstTransaction secondTransaction|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 50 on: secondAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self assert: portfolio transactions includes: firstTransaction .
	self assert: portfolio transactions includes: secondTransaction .
	self assert: portfolio transactions size equals:2.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:09:24'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithMultiplePortfoliosKnowsItsTransactions stamp: 'h 10/14/2023 15:09:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:12:47'!
test14PortfolioWithPortfoliosAndAccountsKnowsItsTransactions

	|portfolio firstAccount secondAccount thirdAccount firstIncludedPortfolio secondIncludedPortfolio firstTransaction secondTransaction thirdTransaction|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 50 on: secondAccount .
	thirdTransaction := Deposit register: 30 on: thirdAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: portfolio transactions includes: firstTransaction .
	self assert: portfolio transactions includes: secondTransaction .
	self assert: portfolio transactions includes: thirdTransaction .
	self assert: portfolio transactions size equals:3.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:12:51'!
test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions

	|portfolio firstAccount secondAccount thirdAccount firstIncludedPortfolio secondIncludedPortfolio firstTransaction secondTransaction thirdTransaction|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 50 on: secondAccount .
	thirdTransaction := Deposit register: 30 on: thirdAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: portfolio transactions includes: firstTransaction .
	self assert: portfolio transactions includes: secondTransaction .
	self assert: portfolio transactions includes: thirdTransaction .
	self assert: portfolio transactions size equals:3.! !

!methodRemoval: PortfolioTest #test14PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:12:51'!
test14PortfolioWithPortfoliosAndAccountsKnowsItsTransactions

	|portfolio firstAccount secondAccount thirdAccount firstIncludedPortfolio secondIncludedPortfolio firstTransaction secondTransaction thirdTransaction|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 50 on: secondAccount .
	thirdTransaction := Deposit register: 30 on: thirdAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: portfolio transactions includes: firstTransaction .
	self assert: portfolio transactions includes: secondTransaction .
	self assert: portfolio transactions includes: thirdTransaction .
	self assert: portfolio transactions size equals:3.!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithMultiplePortfoliosKnowsItsTransactions stamp: 'h 10/14/2023 15:12:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:12:55'!
PASSED!

----STARTUP---- (14 October 2023 15:29:00) as /home/matias/Escritorio/cuis/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:33:20'!
test13PortfolioWithPortfolioKnowsItsTransactions

	|portfolio firstAccount firstTransaction firstIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	firstIncludedPortfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio . 
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: portfolio transactions size equals: 1 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:33:26'!
test14PortfolioWithPortfolioKnowsItsTransactions

	|portfolio firstAccount firstTransaction firstIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	firstIncludedPortfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio . 
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: portfolio transactions size equals: 1 .! !

!methodRemoval: PortfolioTest #test13PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:33:26'!
test13PortfolioWithPortfolioKnowsItsTransactions

	|portfolio firstAccount firstTransaction firstIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	firstIncludedPortfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio . 
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: portfolio transactions size equals: 1 .!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:33:27'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:33:27'!
FAILURE!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:33:27'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 15:34:09' prior: 50653171!
transactions

	|transactions|
	
	transactions := OrderedCollection new.
	
	accounts inject: transactions into: [:currentTransactions :anAccount | 
		anAccount transactions do:[:aTransaction | currentTransactions add: aTransaction ]. currentTransactions
		].
	
	portfolios first transactions do:[:aTransaction | transactions add: aTransaction ]. 
	
	^transactions ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:34:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:34:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:34:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:34:12'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:34:12'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:34:12'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:34:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:34:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:34:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:34:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:34:12'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:34:12'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:34:12'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:34:12'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 15:34:35' prior: 50653955!
transactions

	|transactions|
	
	transactions := OrderedCollection new.
	
	accounts inject: transactions into: [:currentTransactions :anAccount | 
		anAccount transactions do:[:aTransaction | currentTransactions add: aTransaction ]. currentTransactions
		].
	
	portfolios ifNotEmpty: [portfolios first transactions do:[:aTransaction | transactions add: aTransaction ]]. 
	
	^transactions ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:34:37'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:34:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:40:06'!
test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions

	|portfolio firstAccount secondAccount thirdAccount firstTransaction secondTransaction thirdTransaction firstIncludedPortfolio secondIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.	
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 50 on: secondAccount.
	thirdTransaction := Deposit register: 100 on: thirdAccount.  
	
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio . 
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: (portfolio transactions includes: secondTransaction ).
	self assert: (portfolio transactions includes: thirdTransaction ).
	self assert: portfolio transactions size equals: 3 .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:40:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:40:08'!
FAILURE!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:40:08'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'h 10/14/2023 15:41:23' prior: 50654024!
transactions

	|transactions|
	
	transactions := OrderedCollection new.
	
	accounts inject: transactions into: [:currentTransactions :anAccount | 
		anAccount transactions do:[:aTransaction | currentTransactions add: aTransaction ]. currentTransactions
		].
	
	portfolios inject: transactions into: [:currentTransactions :aPortfolio | 
		aPortfolio transactions do:[:aTransaction | currentTransactions add: aTransaction ]. currentTransactions 
		].
	
	^transactions ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:41:25'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:41:25'!
PASSED!

----SNAPSHOT----(14 October 2023 15:42:41) CuisUniversity-5981.image priorSource: 10290627!

----QUIT----(14 October 2023 15:43:10) CuisUniversity-5981.image priorSource: 10323798!

----STARTUP---- (14 October 2023 15:43:52) as /home/matias/Escritorio/linux64/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:46:22'!
test16

	|portfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!testRun: #PortfolioTest #test16 stamp: 'h 10/14/2023 15:46:26'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'h 10/14/2023 15:46:54'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'h 10/14/2023 15:46:54'!
FAILURE!
!Portfolio class methodsFor: 'no messages' stamp: 'h 10/14/2023 15:47:38'!
errorCannotAddAlreadyAddedAccount

	^'Cannot add an already added account'! !

!testRun: #PortfolioTest #test16 stamp: 'h 10/14/2023 15:48:01'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 15:49:17' prior: 50651252!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self class errorCannotAddAlreadyAddedAccount ].
	
	accounts add: anAccountToAdd ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:49:19'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'h 10/14/2023 15:49:19'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'h 10/14/2023 15:49:19'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'h 10/14/2023 15:49:26'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'h 10/14/2023 15:49:26'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 15:50:15' prior: 50654307!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	accounts add: anAccountToAdd ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:50:17'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'h 10/14/2023 15:50:17'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:50:40'!
test16CannotAddAlreadyAddedAccount

	|portfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!methodRemoval: PortfolioTest #test16 stamp: 'h 10/14/2023 15:50:40'!
test16

	|portfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:53:14'!
test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio

	|portfolio includedPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	includedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	includedPortfolio addAccount: anAccount .
	portfolio addPortfolio: includedPortfolio.
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/14/2023 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 15:53:15'!
FAILURE!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 15:53:15'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:56:29'!
test17PortfolioWithMuktiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount.
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addAccount: secondAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:57:02' prior: 50654564!
test17PortfolioWithMuktiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio firstAccount |
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	secondIncludedPortfolio addAccount: firstAccount.
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 15:57:10'!
test18PortfolioWithMuktiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio firstAccount |
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	secondIncludedPortfolio addAccount: firstAccount.
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!methodRemoval: PortfolioTest #test17PortfolioWithMuktiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 15:57:10'!
test17PortfolioWithMuktiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio firstAccount |
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	secondIncludedPortfolio addAccount: firstAccount.
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/14/2023 15:57:13'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 15:57:13'!
FAILURE!

!testRun: #PortfolioTest #test18PortfolioWithMuktiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 15:57:13'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 15:58:39' prior: 50654382!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	portfolios ifNotEmpty: [(portfolios first includes: anAccountToAdd )ifTrue:[self error: self class errorCannotAddAlreadyAddedAccount  ]].
	
	accounts add: anAccountToAdd ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 15:58:41'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 15:58:41'!
ERROR!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/14/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 15:58:41'!
FAILURE!

!testRun: #PortfolioTest #test18PortfolioWithMuktiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 15:58:41'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 16:01:38' prior: 50654732!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToAdd]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	accounts add: anAccountToAdd ! !
!Portfolio methodsFor: 'test' stamp: 'h 10/14/2023 16:03:13'!
hasAccount: anAccount
	
	(accounts includes: anAccount) ifTrue: [^true].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccount ]) ifTrue: [^true].
	
	^false! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 16:03:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 16:03:16'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMuktiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:03:16'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 16:04:22'!
test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio firstAccount |
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	secondIncludedPortfolio addAccount: firstAccount.
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!methodRemoval: PortfolioTest #test18PortfolioWithMuktiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:04:22'!
test18PortfolioWithMuktiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio firstAccount |
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	secondIncludedPortfolio addAccount: firstAccount.
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 16:25:37'!
test18CannotAddPortfolioAlreadyAdded

	|portfolio firstIncludedPortfolio |
	
	portfolio := Portfolio new.
	firstIncludedPortfolio := Portfolio new.
	
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self should: [portfolio addPortfolio: firstIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedPortfolio ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 16:25:46'!
test19CannotAddPortfolioAlreadyAdded

	|portfolio firstIncludedPortfolio |
	
	portfolio := Portfolio new.
	firstIncludedPortfolio := Portfolio new.
	
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self should: [portfolio addPortfolio: firstIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedPortfolio ]! !

!methodRemoval: PortfolioTest #test18CannotAddPortfolioAlreadyAdded stamp: 'h 10/14/2023 16:25:46'!
test18CannotAddPortfolioAlreadyAdded

	|portfolio firstIncludedPortfolio |
	
	portfolio := Portfolio new.
	firstIncludedPortfolio := Portfolio new.
	
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self should: [portfolio addPortfolio: firstIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedPortfolio ]!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/14/2023 16:25:48'!
FAILURE!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/14/2023 16:25:48'!
FAILURE!
!Portfolio class methodsFor: 'errors' stamp: 'h 10/14/2023 16:26:03'!
errorCannotAddAlreadyAddedPortfolio

	^'Cannot add an already added portfoliot'! !
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 16:26:48' prior: 50651471!
addPortfolio: aPortfolioToBeAdded 

	(portfolios includes: aPortfolioToBeAdded) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	portfolios add: aPortfolioToBeAdded.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:26:50'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/14/2023 16:26:50'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 16:28:12'!
test18PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	firstIncludedPortfolio addPortfolio: secondIncludedPortfolio.
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self should: [portfolio addPortfolio: secondIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:28:13'!
FAILURE!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/14/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:28:13'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 16:29:33' prior: 50655011!
addPortfolio: aPortfolioToBeAdded 

	(portfolios includes: aPortfolioToBeAdded) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToBeAdded ]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	portfolios add: aPortfolioToBeAdded.! !
!Portfolio methodsFor: 'test' stamp: 'h 10/14/2023 16:31:03'!
hasPortfolio: aPortfolioToFind

	(portfolios includes: aPortfolioToFind ) ifTrue: [^true].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToFind ]) ifTrue: [^true].
	
	^false! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:31:06'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/14/2023 16:31:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 16:32:43'!
test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	firstIncludedPortfolio addPortfolio: secondIncludedPortfolio.
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self should: [portfolio addPortfolio: secondIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!methodRemoval: PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:32:43'!
test18PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	firstIncludedPortfolio addPortfolio: secondIncludedPortfolio.
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self should: [portfolio addPortfolio: secondIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 16:33:59' prior: 50655297!
test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio thirdIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	thirdIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	secondIncludedPortfolio addPortfolio: thirdIncludedPortfolio.
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addPortfolio: thirdIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/14/2023 16:34:02'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:34:02'!
PASSED!
!Portfolio methodsFor: 'add' stamp: 'h 10/14/2023 16:34:26' prior: 50655197!
addPortfolio: aPortfolioToBeAdded 

	(portfolios includes: aPortfolioToBeAdded) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToBeAdded ]) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	portfolios add: aPortfolioToBeAdded.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/14/2023 16:34:33'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:34:33'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:34:33'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/14/2023 16:34:44' prior: 50655341!
test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios

	|portfolio firstIncludedPortfolio secondIncludedPortfolio thirdIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	thirdIncludedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	secondIncludedPortfolio addPortfolio: thirdIncludedPortfolio.
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addPortfolio: thirdIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedPortfolio ]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/14/2023 16:34:45'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/14/2023 16:34:45'!
PASSED!

----SNAPSHOT----(14 October 2023 16:35:03) CuisUniversity-5981.image priorSource: 10323891!

----QUIT----(14 October 2023 16:39:27) CuisUniversity-5981.image priorSource: 10367730!

----STARTUP---- (18 October 2023 15:32:09) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 15:37:27'!
test19CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test19CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 15:37:30'!
FAILURE!
!Portfolio class methodsFor: 'errors' stamp: 'h 10/18/2023 15:38:21'!
errorCannotAddAccountOfFatherPortfolio

	^'Cannot add account of some father portfolio'! !
!Portfolio class methodsFor: 'errors' stamp: 'h 10/18/2023 15:38:25' prior: 50655006!
errorCannotAddAlreadyAddedPortfolio

	^'Cannot add an already added portfolio'! !

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 15:38:35'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 15:38:36'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 15:38:36'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 15:38:36'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 15:38:36'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'h 10/18/2023 15:41:49'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios fatherPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 15:41:48' prior: 50654815!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToAdd]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	fatherPortfolio hasAccount: anAccountToAdd .
	
	accounts add: anAccountToAdd ! !
!Portfolio methodsFor: 'initialize' stamp: 'h 10/18/2023 15:42:14' prior: 50651428 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	fatherPortfolio := Portfolio new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 15:44:36'!
test21CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!methodRemoval: PortfolioTest #test19CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 15:44:36'!
test19CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]!

----STARTUP---- (18 October 2023 15:45:35) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 15:37:27'!
test19CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!Portfolio class methodsFor: 'errors' stamp: 'h 10/18/2023 15:38:21'!
errorCannotAddAccountOfFatherPortfolio

	^'Cannot add account of some father portfolio'! !
!Portfolio class methodsFor: 'errors' stamp: 'h 10/18/2023 15:38:25' prior: 50655006!
errorCannotAddAlreadyAddedPortfolio

	^'Cannot add an already added portfolio'! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'h 10/18/2023 15:45:41'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios fatherPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 15:41:48' prior: 50654815!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToAdd]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	fatherPortfolio hasAccount: anAccountToAdd .
	
	accounts add: anAccountToAdd ! !
!Portfolio methodsFor: 'initialize' stamp: 'h 10/18/2023 15:42:14' prior: 50651428 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	fatherPortfolio := Portfolio new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 15:44:36'!
test21CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!methodRemoval: PortfolioTest #test19CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 15:45:41'!
test19CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]!
!Portfolio methodsFor: 'initialize' stamp: 'h 10/18/2023 15:48:09' prior: 50655898 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 15:50:25' prior: 50655443!
addPortfolio: aPortfolioToBeAdded 

	(portfolios includes: aPortfolioToBeAdded) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToBeAdded ]) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	portfolios add: aPortfolioToBeAdded.
	
	aPortfolioToBeAdded addFather: self.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'h 10/18/2023 15:51:25'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios fatherPortfolio fatherPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 15:51:24'!
addFather: aFatherPortfolio

	fatherPortfolios add: aFatherPortfolio.! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios fatherPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'h 10/18/2023 15:51:32'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios fatherPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialize' stamp: 'h 10/18/2023 15:51:44' prior: 50655942 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	fatherPortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 15:52:03' prior: 50655883!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToAdd]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	fatherPortfolios first hasAccount: anAccountToAdd .
	
	accounts add: anAccountToAdd ! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 15:52:34' prior: 50655999!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToAdd]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(fatherPortfolios first hasAccount: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAccountOfFatherPortfolio ].
	
	accounts add: anAccountToAdd ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 15:52:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 15:52:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 15:52:36'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 15:52:36'!
ERROR!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 15:52:36'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 15:52:36'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 15:52:37'!
ERROR!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 15:54:00' prior: 50656014!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToAdd]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	fatherPortfolios ifNotEmpty: [(fatherPortfolios first hasAccount: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAccountOfFatherPortfolio ]].
	
	accounts add: anAccountToAdd .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 15:54:02'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 15:54:03'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 15:54:03'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 15:54:03'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 15:54:03'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 15:54:03'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 15:54:03'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 15:54:03'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 15:56:02'!
test21CannotAddPortfolioThatSomeFatherPortfoliosHave

	|portfolio fatherPortfolio  secondFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	secondFatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 15:56:08'!
test22CannotAddPortfolioThatSomeFatherPortfoliosHave

	|portfolio fatherPortfolio  secondFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	secondFatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!methodRemoval: PortfolioTest #test21CannotAddPortfolioThatSomeFatherPortfoliosHave stamp: 'h 10/18/2023 15:56:08'!
test21CannotAddPortfolioThatSomeFatherPortfoliosHave

	|portfolio fatherPortfolio  secondFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	secondFatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]!

!testRun: #PortfolioTest #test22CannotAddPortfolioThatSomeFatherPortfoliosHave stamp: 'h 10/18/2023 15:56:10'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 15:56:20' prior: 50656234!
test22CannotAddPortfolioThatSomeFatherPortfoliosHave

	|portfolio fatherPortfolio  secondFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test22CannotAddPortfolioThatSomeFatherPortfoliosHave stamp: 'h 10/18/2023 15:56:21'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 15:57:33' prior: 50656112!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToAdd]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	fatherPortfolios do: [:aFatherPortfolio | (aFatherPortfolio hasAccount: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAccountOfFatherPortfolio ]].
	
	accounts add: anAccountToAdd .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 15:57:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 15:57:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 15:57:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 15:57:34'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 15:57:34'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 15:57:34'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 15:57:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 15:57:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 15:57:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 15:57:35'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddPortfolioThatSomeFatherPortfoliosHave stamp: 'h 10/18/2023 15:57:35'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:04:08'!
test23CannotAddAccountOfFatherOfFatherPortfolio

	|portfolio fatherPortfolio  fatherOfFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	fatherOfFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherOfFatherPortfolio addPortfolio: fatherPortfolio .
	
	fatherOfFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test23CannotAddAccountOfFatherOfFatherPortfolio stamp: 'h 10/18/2023 16:04:09'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:06:46' prior: 50656307!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToAdd]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	self checkFatherPortfoliosDoNotHaveAccount: anAccountToAdd.
	
	accounts add: anAccountToAdd .! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:12:02'!
checkIfFatherPortfoliosDoNotHaveAccount: anAccountToCheck

	(fatherPortfolios anySatisfy: [:aFatherPortfolio | aFatherPortfolio findRootFather hasAccount: anAccountToCheck]) ifTrue: [^true].
	
	^false.! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:14:57'!
findRootFather

	fatherPortfolios ifEmpty:[^self].

	^(fatherPortfolios first) findRootFather.! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:15:57' prior: 50656436!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToAdd]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(self checkIfFatherPortfoliosDoNotHaveAccount: anAccountToAdd) ifTrue:[self error: self class errorCannotAddAccountOfFatherPortfolio ].
	
	accounts add: anAccountToAdd .! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:16:02'!
checkIfFatherPortfoliosHaveAccount: anAccountToCheck

	(fatherPortfolios anySatisfy: [:aFatherPortfolio | aFatherPortfolio findRootFather hasAccount: anAccountToCheck]) ifTrue: [^true].
	
	^false.! !

!methodRemoval: Portfolio #checkIfFatherPortfoliosDoNotHaveAccount: stamp: 'h 10/18/2023 16:16:05'!
checkIfFatherPortfoliosDoNotHaveAccount: anAccountToCheck

	(fatherPortfolios anySatisfy: [:aFatherPortfolio | aFatherPortfolio findRootFather hasAccount: anAccountToCheck]) ifTrue: [^true].
	
	^false.!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:16:09' prior: 50656465!
addAccount: anAccountToAdd

	(accounts includes: anAccountToAdd) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToAdd]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(self checkIfFatherPortfoliosHaveAccount: anAccountToAdd) ifTrue:[self error: self class errorCannotAddAccountOfFatherPortfolio ].
	
	accounts add: anAccountToAdd .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:16:14'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 16:16:15'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 16:16:15'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:16:15'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 16:16:15'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:16:15'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:16:15'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddPortfolioThatSomeFatherPortfoliosHave stamp: 'h 10/18/2023 16:16:15'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountOfFatherOfFatherPortfolio stamp: 'h 10/18/2023 16:16:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:18:39'!
test24CannotAddAccountOfTheRootOfPortfoliosTree

	|portfolio fatherPortfolio  rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: portfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test24CannotAddAccountOfTheRootOfPortfoliosTree stamp: 'h 10/18/2023 16:18:40'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 16:18:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 16:18:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:18:42'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddPortfolioThatSomeFatherPortfoliosHave stamp: 'h 10/18/2023 16:18:42'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountOfFatherOfFatherPortfolio stamp: 'h 10/18/2023 16:18:42'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountOfTheRootOfPortfoliosTree stamp: 'h 10/18/2023 16:18:42'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:18:51' prior: 50656607!
test24CannotAddAccountOfTheRootOfPortfoliosTree

	|portfolio fatherPortfolio  rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	
	secondRootPortfolio addPortfolio: portfolio .
	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test24CannotAddAccountOfTheRootOfPortfoliosTree stamp: 'h 10/18/2023 16:18:53'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:21:22' prior: 50656728!
test24CannotAddAccountOfTheRootOfPortfoliosTree

	|portfolio fatherPortfolio secondFatherPortfolio  rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	
	secondFatherPortfolio addPortfolio: portfolio .
	secondRootPortfolio addPortfolio: secondFatherPortfolio .
	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test24CannotAddAccountOfTheRootOfPortfoliosTree stamp: 'h 10/18/2023 16:21:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:21:31' prior: 50656756!
test24CannotAddAccountOfTheRootOfPortfoliosTree

	|portfolio fatherPortfolio secondFatherPortfolio  rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	secondRootPortfolio addPortfolio: secondFatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test24CannotAddAccountOfTheRootOfPortfoliosTree stamp: 'h 10/18/2023 16:21:32'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:25:56'!
test24CannotAddAccountOfOneOfTheRootsOfThePortfoliosTree

	|portfolio fatherPortfolio secondFatherPortfolio  rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	secondRootPortfolio addPortfolio: secondFatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!methodRemoval: PortfolioTest #test24CannotAddAccountOfTheRootOfPortfoliosTree stamp: 'h 10/18/2023 16:25:56'!
test24CannotAddAccountOfTheRootOfPortfoliosTree

	|portfolio fatherPortfolio secondFatherPortfolio  rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	secondRootPortfolio addPortfolio: secondFatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:26:33' prior: 50656820!
test24CannotAddAccountOfOneOfTheRootsOfThePortfoliosTree

	|portfolio fatherPortfolio rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test24CannotAddAccountOfOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:26:34'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:27:57' prior: 50656482!
checkIfFatherPortfoliosHaveAccount: anAccountToCheck

	(fatherPortfolios anySatisfy: [:aFatherPortfolio | aFatherPortfolio findRootFather anySatisfy: [:aRootPortfolio | aRootPortfolio hasAccount: anAccountToCheck]]) ifTrue: [^true].
	
	^false.! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:31:07' prior: 50656459!
findRootFather
	
	|roots|
	
	roots := Set new.

	fatherPortfolios ifEmpty:[^roots add: self;yourself].

	^fatherPortfolios do: [:aFatherPortfolio | roots addAll: aFatherPortfolio findRootFather].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddPortfolioThatSomeFatherPortfoliosHave stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountOfFatherOfFatherPortfolio stamp: 'h 10/18/2023 16:31:10'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountOfOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:31:10'!
PASSED!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:33:49' prior: 50656905!
checkIfFatherPortfoliosHaveAccount: anAccountToCheck

	(fatherPortfolios anySatisfy: [:aFatherPortfolio | 
		aFatherPortfolio findRootFather anySatisfy: [:aRootPortfolio | aRootPortfolio hasAccount: anAccountToCheck]
		]) ifTrue: [^true].
	
	^false.! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:33:57' prior: 50657018!
checkIfFatherPortfoliosHaveAccount: anAccountToCheck

	(fatherPortfolios anySatisfy: [:aFatherPortfolio | 
		aFatherPortfolio findRootFather anySatisfy: [:aRootPortfolio | 
			aRootPortfolio hasAccount: anAccountToCheck]
		]) ifTrue: [^true].
	
	^false.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:38:55'!
test21CannotAddAccountThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!methodRemoval: PortfolioTest #test21CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:38:55'!
test21CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:39:57'!
test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios

	|portfolio fatherPortfolio  secondFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!methodRemoval: PortfolioTest #test22CannotAddPortfolioThatSomeFatherPortfoliosHave stamp: 'h 10/18/2023 16:39:57'!
test22CannotAddPortfolioThatSomeFatherPortfoliosHave

	|portfolio fatherPortfolio  secondFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:40:13'!
test23CannotAddAccountAlreadyAddedInRootPortfolio

	|portfolio fatherPortfolio  fatherOfFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	fatherOfFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherOfFatherPortfolio addPortfolio: fatherPortfolio .
	
	fatherOfFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!methodRemoval: PortfolioTest #test23CannotAddAccountOfFatherOfFatherPortfolio stamp: 'h 10/18/2023 16:40:13'!
test23CannotAddAccountOfFatherOfFatherPortfolio

	|portfolio fatherPortfolio  fatherOfFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	fatherOfFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherOfFatherPortfolio addPortfolio: fatherPortfolio .
	
	fatherOfFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:40:28' prior: 50657120!
test23CannotAddAccountAlreadyAddedInRootPortfolio

	|portfolio fatherPortfolio  rootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	
	rootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:40:30'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountOfOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:40:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:41:03'!
test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree

	|portfolio fatherPortfolio rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!methodRemoval: PortfolioTest #test24CannotAddAccountOfOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:41:03'!
test24CannotAddAccountOfOneOfTheRootsOfThePortfoliosTree

	|portfolio fatherPortfolio rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:43:03'!
test21CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:43:08'!
test25CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!methodRemoval: PortfolioTest #test21CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:43:08'!
test21CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:43:11'!
FAILURE!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:43:11'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:43:23' prior: 50657352!
test25CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|portfolio fatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]! !
!Portfolio class methodsFor: 'errors' stamp: 'h 10/18/2023 16:44:12'!
errorCannotAddPortfolioOfFatherPortfolio

	^'Cannot add an portfolio already added in some father portfolio'! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:45:44' prior: 50655948!
addPortfolio: aPortfolioToBeAdded 

	(portfolios includes: aPortfolioToBeAdded) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToBeAdded ]) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	(self checkIfFatherPortfoliosHavePortfolio: aPortfolioToBeAdded) ifTrue:[self error: self class errorCannotAddPortfolioOfFatherPortfolio].
	
	portfolios add: aPortfolioToBeAdded.
	
	aPortfolioToBeAdded addFather: self.! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:46:32'!
checkIfFatherPortfoliosHavePortfolio: aPortfolioToCheck
	
	^fatherPortfolios first hasPortfolio: aPortfolioToCheck .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 16:46:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 16:46:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 16:46:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 16:46:34'!
ERROR!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 16:46:34'!
ERROR!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 16:46:34'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 16:46:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 16:46:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 16:46:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 16:46:34'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 16:46:34'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 16:46:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:46:34'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 16:46:34'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:46:35'!
ERROR!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 16:46:35'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 16:46:35'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:46:35'!
ERROR!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 16:46:35'!
ERROR!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:46:35'!
ERROR!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:46:35'!
ERROR!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:46:35'!
ERROR!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:46:35'!
ERROR!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:46:35'!
ERROR!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:46:35'!
ERROR!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:48:03' prior: 50657441!
checkIfFatherPortfoliosHavePortfolio: aPortfolioToCheck
	
	fatherPortfolios ifEmpty:[^false].
	
	^fatherPortfolios first hasPortfolio: aPortfolioToCheck .! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 16:48:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 16:48:05'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:48:06'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:48:06'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:48:06'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:48:06'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:48:06'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:48:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:48:29'!
test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios

	|portfolio fatherPortfolio  secondFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:48:37' prior: 50657650!
test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios

	|portfolio fatherPortfolio  secondFatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: anAddedPortfolio .
	
	self should: [portfolio addAccount: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:48:56' prior: 50657673!
test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios

	|portfolio fatherPortfolio  secondFatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:48:58'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:50:11' prior: 50657545!
checkIfFatherPortfoliosHavePortfolio: aPortfolioToCheck
	
	fatherPortfolios ifEmpty:[^false].
	
	^fatherPortfolios anySatisfy: [:aFatherPortfolio | aFatherPortfolio hasPortfolio: aPortfolioToCheck].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 16:50:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:50:13'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:50:14'!
FAILURE!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:50:14'!
FAILURE!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:50:18'!
FAILURE!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:50:18'!
FAILURE!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:50:46'!
FAILURE!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:50:46'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:51:54' prior: 50657029!
checkIfFatherPortfoliosHaveAccount: anAccountToCheck

	^fatherPortfolios anySatisfy: [:aFatherPortfolio | 
		aFatherPortfolio findRootFather anySatisfy: [:aRootPortfolio | 
			aRootPortfolio hasAccount: anAccountToCheck]
		]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 16:51:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 16:51:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 16:51:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 16:51:56'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 16:51:56'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 16:51:56'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 16:51:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 16:51:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 16:51:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 16:51:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:51:57'!
PASSED!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:51:57'!
FAILURE!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:51:57'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:52:41' prior: 50657696!
test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios

	|portfolio fatherPortfolio  secondFatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 16:52:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 16:52:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 16:52:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 16:52:42'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:52:43'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:52:44'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:52:44'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:52:44'!
PASSED!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:52:44'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:53:26'!
test27CannotAddPortfolioAlreadyAddedInRootPortfolio

	|portfolio fatherPortfolio  rootPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	
	rootPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test27CannotAddPortfolioAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:53:28'!
FAILURE!

!testRun: #PortfolioTest #test27CannotAddPortfolioAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:53:28'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 16:55:04' prior: 50657723!
checkIfFatherPortfoliosHavePortfolio: aPortfolioToCheck
	
	^fatherPortfolios anySatisfy: [:aFatherPortfolio | 
		aFatherPortfolio findRootFather anySatisfy: [:aRootPortfolio | 
			aRootPortfolio hasPortfolio: aPortfolioToCheck 
			]
		]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 16:55:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 16:55:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 16:55:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 16:55:06'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 16:55:06'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 16:55:06'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 16:55:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 16:55:07'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:55:08'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:55:08'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:55:08'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:55:08'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 16:55:08'!
PASSED!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 16:55:08'!
PASSED!

!testRun: #PortfolioTest #test27CannotAddPortfolioAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:55:08'!
PASSED!

!methodRemoval: PortfolioTest #test27CannotAddPortfolioAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 16:55:17'!
test27CannotAddPortfolioAlreadyAddedInRootPortfolio

	|portfolio fatherPortfolio  rootPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	
	rootPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:55:33'!
test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree

	|portfolio fatherPortfolio rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:55:41' prior: 50658264!
test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree

	|portfolio fatherPortfolio rootPortfolio secondRootPortfolio anAddedPortfolio|
	
	anAddedPortfolio := ReceptiveAccount new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: anAddedPortfolio .
	
	self should: [portfolio addAccount: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'h 10/18/2023 16:56:09' prior: 50658290!
test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree

	|portfolio fatherPortfolio rootPortfolio secondRootPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	portfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 16:56:12'!
PASSED!

----SNAPSHOT----(18 October 2023 16:58:33) CuisUniversity-5981.image priorSource: 10367823!

----QUIT----(18 October 2023 16:58:37) CuisUniversity-5981.image priorSource: 10454246!

----STARTUP---- (18 October 2023 17:02:30) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 17:02:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 17:02:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 17:02:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 17:02:35'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 17:02:36'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 17:02:36'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 17:02:36'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 17:02:36'!
PASSED!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 17:02:36'!
PASSED!

!testRun: #PortfolioTest #test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 17:02:36'!
PASSED!

----STARTUP---- (18 October 2023 17:02:52) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!

!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:04:36'!
assertFathersDoNotHavePortfolio: aPortfolioToCheck

	^ (self checkIfFatherPortfoliosHavePortfolio: aPortfolioToCheck) ifTrue:[self error: self class errorCannotAddPortfolioOfFatherPortfolio]! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:04:36' prior: 50657422!
addPortfolio: aPortfolioToBeAdded 

	(portfolios includes: aPortfolioToBeAdded) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToBeAdded ]) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	self assertFathersDoNotHavePortfolio: aPortfolioToBeAdded.
	
	portfolios add: aPortfolioToBeAdded.
	
	aPortfolioToBeAdded addFather: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 17:04:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 17:04:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 17:04:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 17:04:44'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 17:04:44'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 17:04:44'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 17:04:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 17:04:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 17:04:45'!
PASSED!

!testRun: #PortfolioTest #test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 17:04:45'!
PASSED!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:05:36'!
keyword1: aPortfolioToBeAdded

	^ (portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToBeAdded ]) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ]! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:05:36' prior: 50658473!
addPortfolio: aPortfolioToBeAdded 

	(portfolios includes: aPortfolioToBeAdded) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	self keyword1: aPortfolioToBeAdded.
	
	self assertFathersDoNotHavePortfolio: aPortfolioToBeAdded.
	
	portfolios add: aPortfolioToBeAdded.
	
	aPortfolioToBeAdded addFather: self.! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:05:53' prior: 50658605!
addPortfolio: aPortfolioToBeAdded 

	(portfolios includes: aPortfolioToBeAdded) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToBeAdded ]) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	self assertFathersDoNotHavePortfolio: aPortfolioToBeAdded.
	
	portfolios add: aPortfolioToBeAdded.
	
	aPortfolioToBeAdded addFather: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'h 10/18/2023 17:05:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'h 10/18/2023 17:05:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'h 10/18/2023 17:05:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'h 10/18/2023 17:05:55'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 17:05:56'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'h 10/18/2023 17:05:56'!
PASSED!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'h 10/18/2023 17:05:56'!
PASSED!

!testRun: #PortfolioTest #test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'h 10/18/2023 17:05:56'!
PASSED!

!methodRemoval: Portfolio #keyword1: stamp: 'h 10/18/2023 17:05:59'!
keyword1: aPortfolioToBeAdded

	^ (portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToBeAdded ]) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ]!
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:06:57'!
assertPortfolioIsNotDuplicated: aPortfolioToCheck

	(portfolios includes: aPortfolioToCheck) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToCheck ]) ifTrue: [self error: self class errorCannotAddAlreadyAddedPortfolio ]! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:06:58' prior: 50658618!
addPortfolio: aPortfolioToBeAdded 

	self assertPortfolioIsNotDuplicated: aPortfolioToBeAdded.
	
	self assertFathersDoNotHavePortfolio: aPortfolioToBeAdded.
	
	portfolios add: aPortfolioToBeAdded.
	
	aPortfolioToBeAdded addFather: self.! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:07:35'!
assertAccountIsNotADuplicate: anAccountToCheck

	(accounts includes: anAccountToCheck) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ].
	
	(portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: anAccountToCheck]) ifTrue: [self error: self class errorCannotAddAlreadyAddedAccount ]! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:07:35' prior: 50656501!
addAccount: anAccountToAdd

	self assertAccountIsNotADuplicate: anAccountToAdd.
	
	(self checkIfFatherPortfoliosHaveAccount: anAccountToAdd) ifTrue:[self error: self class errorCannotAddAccountOfFatherPortfolio ].
	
	accounts add: anAccountToAdd .! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:07:59'!
assertFathersDoNotHaveAccount: anAccountToCheck

	^ (self checkIfFatherPortfoliosHaveAccount: anAccountToCheck) ifTrue:[self error: self class errorCannotAddAccountOfFatherPortfolio ]! !
!Portfolio methodsFor: 'add' stamp: 'h 10/18/2023 17:07:59' prior: 50658785!
addAccount: anAccountToAdd

	self assertAccountIsNotADuplicate: anAccountToAdd.
	
	self assertFathersDoNotHaveAccount: anAccountToAdd.
	
	accounts add: anAccountToAdd .! !

----SNAPSHOT----(18 October 2023 17:09:43) CuisUniversity-5981.image priorSource: 10454339!

----QUIT----(18 October 2023 17:09:45) CuisUniversity-5981.image priorSource: 10469163!

----STARTUP---- (19 October 2023 14:21:41) as C:\Users\Manuel Urkovich\Facu\Inge1\windows64\CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:22:20' overrides: 16961394!
setUp! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'manu urko 10/19/2023 14:23:38'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolioToReplace'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:23:37' prior: 50658823 overrides: 16961394!
setUp
	portfolioToReplace := Portfolio new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:23:50' prior: 50651173!
test01EmptyPortfolioBalanceEqualsZero
	self assert: portfolioToReplace balance equals: 0.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'manu urko 10/19/2023 14:23:51'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:24:22' prior: 50651233!
test02PortfolioWithOneAccountBalanceEqualsAccountBalance

	|firstAccount|
	
	firstAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: firstAccount .
	portfolioToReplace addAccount: firstAccount.
	
	self assert: portfolioToReplace balance equals: firstAccount balance.! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'manu urko 10/19/2023 14:24:23'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:24:34' prior: 50651282!
test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances

	|firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 50 on: secondAccount .
	portfolioToReplace addAccount: firstAccount.
	portfolioToReplace addAccount: secondAccount.
	
	self assert: portfolioToReplace balance equals: firstAccount balance + secondAccount balance.! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:24:52' prior: 50651335!
test04PortfolioWithOnePortfolioHaveSameBalance

	|firstIncludedPortfolio firstAccount|
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	portfolioToReplace addPortfolio: firstIncludedPortfolio .
	
	self assert: portfolioToReplace balance equals: firstIncludedPortfolio balance.! !

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'manu urko 10/19/2023 14:24:53'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:25:03' prior: 50651546!
test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances

	|firstIncludedPortfolio secondIncludedPortfolio secondAccount firstAccount|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 200 on: secondAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolioToReplace addPortfolio: firstIncludedPortfolio .
	portfolioToReplace addPortfolio: secondIncludedPortfolio .
	
	self assert: portfolioToReplace balance equals: firstIncludedPortfolio balance + secondIncludedPortfolio balance.! !

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'manu urko 10/19/2023 14:25:05'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:25:15' prior: 50651694!
test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances

	|firstIncludedPortfolio secondIncludedPortfolio secondAccount firstAccount thirdAccount|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 200 on: secondAccount .
	Deposit register: 100 on: thirdAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolioToReplace addPortfolio: firstIncludedPortfolio .
	portfolioToReplace addPortfolio: secondIncludedPortfolio .
	portfolioToReplace addAccount: thirdAccount .
	
	self assert: portfolioToReplace balance equals: 400.! !

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'manu urko 10/19/2023 14:25:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:25:24' prior: 50651972!
test07EmptyPortfolioDoesNotHaveRegisteredTransactions

	|anAccount aDeposit|
	
	anAccount := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: anAccount.
	
	self deny: (portfolioToReplace hasRegistered: aDeposit ).! !

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'manu urko 10/19/2023 14:25:25'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:25:37' prior: 50652292!
test08PortfolioWithOneAccounthasRegisteredTransaction

	|firstAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolioToReplace addAccount: firstAccount .
	
	self assert: (portfolioToReplace hasRegistered: aDeposit ).! !

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'manu urko 10/19/2023 14:25:38'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:25:48' prior: 50652263!
test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction

	|firstAccount secondAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolioToReplace addAccount: secondAccount .
	
	self deny: (portfolioToReplace hasRegistered: aDeposit ).! !

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'manu urko 10/19/2023 14:25:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:26:02' prior: 50652591!
test10PortfolioWithPortfoliosDetectsRegisteredTransactions

	|firstIncludedPortfolio secondIncludedPortfolio firstAccount secondAccount firstDeposit secondDeposit|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	firstDeposit := Deposit register: 100 on: firstAccount.
	secondDeposit := Deposit register: 100 on: secondAccount .
	
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolioToReplace addPortfolio: firstIncludedPortfolio.
	portfolioToReplace addPortfolio: secondIncludedPortfolio.
	
	self assert: (portfolioToReplace hasRegistered: firstDeposit ).
	self assert: (portfolioToReplace hasRegistered: secondDeposit ).! !

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'manu urko 10/19/2023 14:26:04'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:26:15' prior: 50652690!
test11PortfolioWithOneAccountKnowsItsTransactions

	|anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	portfolioToReplace addAccount: anAccount .
	
	self assert: portfolioToReplace transactions equals: anAccount transactions.! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:26:24' prior: 50652745!
test12EmptyPortfolioDoesNotHaveTransactions
	self assert: portfolioToReplace transactions equals: OrderedCollection new.! !

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'manu urko 10/19/2023 14:26:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:26:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'manu urko 10/19/2023 14:26:28'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:26:29'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:26:43' prior: 50652878!
test13PortfolioWithMultipleAccountsKnowsItsTransactions

	|firstAccount secondAccount firstTransaction secondTransaction|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 100 on: secondAccount .
	
	portfolioToReplace addAccount: firstAccount. portfolioToReplace addAccount: secondAccount .
	
	self assert: (portfolioToReplace transactions includes: firstTransaction ).
	self assert: (portfolioToReplace transactions includes: secondTransaction ).
	self assert: portfolioToReplace transactions size equals: 2 .! !

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:26:45'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:26:54' prior: 50653858!
test14PortfolioWithPortfolioKnowsItsTransactions

	|firstAccount firstTransaction firstIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	
	portfolioToReplace addPortfolio: firstIncludedPortfolio . 
	
	self assert: (portfolioToReplace transactions includes: firstTransaction ).
	self assert: portfolioToReplace transactions size equals: 1 .! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:27:10' prior: 50654093!
test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions

	|firstAccount secondAccount thirdAccount firstTransaction secondTransaction thirdTransaction firstIncludedPortfolio secondIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.	
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 50 on: secondAccount.
	thirdTransaction := Deposit register: 100 on: thirdAccount.  
	
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolioToReplace addPortfolio: firstIncludedPortfolio . 
	portfolioToReplace addPortfolio: secondIncludedPortfolio .
	portfolioToReplace addAccount: thirdAccount .
	
	self assert: (portfolioToReplace transactions includes: firstTransaction ).
	self assert: (portfolioToReplace transactions includes: secondTransaction ).
	self assert: (portfolioToReplace transactions includes: thirdTransaction ).
	self assert: portfolioToReplace transactions size equals: 3 .! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:27:19' prior: 50654451!
test16CannotAddAlreadyAddedAccount

	|anAccount|
	
	anAccount := ReceptiveAccount new.
	
	portfolioToReplace addAccount: anAccount .
	
	self should: [portfolioToReplace addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'manu urko 10/19/2023 14:27:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:27:30' prior: 50654477!
test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio

	|includedPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	includedPortfolio := Portfolio new.
	
	includedPortfolio addAccount: anAccount .
	portfolioToReplace addPortfolio: includedPortfolio.
	
	self should: [portfolioToReplace addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'manu urko 10/19/2023 14:27:31'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:27:41' prior: 50654906!
test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios

	|firstIncludedPortfolio secondIncludedPortfolio firstAccount |
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	secondIncludedPortfolio addAccount: firstAccount.
	portfolioToReplace addPortfolio: firstIncludedPortfolio.
	portfolioToReplace addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolioToReplace addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'manu urko 10/19/2023 14:27:42'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:28:11' prior: 50654969!
test19CannotAddPortfolioAlreadyAdded

	|firstIncludedPortfolio |
	
	firstIncludedPortfolio := Portfolio new.
	
	portfolioToReplace addPortfolio: firstIncludedPortfolio .
	
	self should: [portfolioToReplace addPortfolio: firstIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedPortfolio ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:28:49' prior: 50655540!
test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios

	|firstIncludedPortfolio secondIncludedPortfolio thirdIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	thirdIncludedPortfolio := Portfolio new.
	
	secondIncludedPortfolio addPortfolio: thirdIncludedPortfolio.
	portfolioToReplace addPortfolio: firstIncludedPortfolio .
	portfolioToReplace addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolioToReplace addPortfolio: thirdIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedPortfolio ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:28:58' prior: 50657040!
test21CannotAddAccountThatFatherPortfolioAlreadyHas

	|fatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolioToReplace .
	fatherPortfolio addAccount: anAccount .
	
	self should: [portfolioToReplace addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'manu urko 10/19/2023 14:29:00'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:29:11' prior: 50657076!
test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios

	|fatherPortfolio  secondFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolioToReplace .
	secondFatherPortfolio addPortfolio: portfolioToReplace .
	
	secondFatherPortfolio addAccount: anAccount .
	
	self should: [portfolioToReplace addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'manu urko 10/19/2023 14:29:13'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:29:22' prior: 50657165!
test23CannotAddAccountAlreadyAddedInRootPortfolio

	|fatherPortfolio  rootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolioToReplace .
	rootPortfolio addPortfolio: fatherPortfolio .
	
	rootPortfolio addAccount: anAccount .
	
	self should: [portfolioToReplace addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'manu urko 10/19/2023 14:29:24'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:29:33' prior: 50657283!
test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree

	|fatherPortfolio rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolioToReplace .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolioToReplace addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'manu urko 10/19/2023 14:29:36'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:29:46' prior: 50657398!
test25CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|fatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolioToReplace .
	fatherPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolioToReplace addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'manu urko 10/19/2023 14:29:47'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:29:57' prior: 50657972!
test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios

	|fatherPortfolio  secondFatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolioToReplace .
	secondFatherPortfolio addPortfolio: portfolioToReplace .
	
	secondFatherPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolioToReplace addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'manu urko 10/19/2023 14:29:59'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:30:28' prior: 50658316!
test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree

	|fatherPortfolio rootPortfolio secondRootPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolioToReplace .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolioToReplace addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'manu urko 10/19/2023 14:30:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'manu urko 10/19/2023 14:30:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'manu urko 10/19/2023 14:30:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'manu urko 10/19/2023 14:30:30'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'manu urko 10/19/2023 14:30:30'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'manu urko 10/19/2023 14:30:30'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'manu urko 10/19/2023 14:30:31'!
PASSED!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'manu urko 10/19/2023 14:32:30'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:30' prior: 50659257!
test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios

	|firstIncludedPortfolio secondIncludedPortfolio thirdIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	thirdIncludedPortfolio := Portfolio new.
	
	secondIncludedPortfolio addPortfolio: thirdIncludedPortfolio.
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addPortfolio: thirdIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedPortfolio ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:30' prior: 50658867!
test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances

	|firstAccount secondAccount|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 50 on: secondAccount .
	portfolio addAccount: firstAccount.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: firstAccount balance + secondAccount balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:30' prior: 50659088!
test13PortfolioWithMultipleAccountsKnowsItsTransactions

	|firstAccount secondAccount firstTransaction secondTransaction|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 100 on: secondAccount .
	
	portfolio addAccount: firstAccount. portfolio addAccount: secondAccount .
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: (portfolio transactions includes: secondTransaction ).
	self assert: portfolio transactions size equals: 2 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:30' prior: 50659282!
test21CannotAddAccountThatFatherPortfolioAlreadyHas

	|fatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:30' prior: 50658836 overrides: 16961394!
setUp
	portfolio := Portfolio new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:30' prior: 50659404!
test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios

	|fatherPortfolio  secondFatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659065!
test12EmptyPortfolioDoesNotHaveTransactions
	self assert: portfolio transactions equals: OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659053!
test11PortfolioWithOneAccountKnowsItsTransactions

	|anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	portfolio addAccount: anAccount .
	
	self assert: portfolio transactions equals: anAccount transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50658841!
test01EmptyPortfolioBalanceEqualsZero
	self assert: portfolio balance equals: 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659431!
test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree

	|fatherPortfolio rootPortfolio secondRootPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659329!
test23CannotAddAccountAlreadyAddedInRootPortfolio

	|fatherPortfolio  rootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	
	rootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659382!
test25CannotAddPortfolioThatFatherPortfolioAlreadyHas

	|fatherPortfolio anAddedPortfolio|
	
	anAddedPortfolio := Portfolio new.
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addPortfolio: anAddedPortfolio .
	
	self should: [portfolio addPortfolio: anAddedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddPortfolioOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659192!
test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio

	|includedPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	includedPortfolio := Portfolio new.
	
	includedPortfolio addAccount: anAccount .
	portfolio addPortfolio: includedPortfolio.
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659135!
test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions

	|firstAccount secondAccount thirdAccount firstTransaction secondTransaction thirdTransaction firstIncludedPortfolio secondIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.	
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 50 on: secondAccount.
	thirdTransaction := Deposit register: 100 on: thirdAccount.  
	
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio . 
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: (portfolio transactions includes: secondTransaction ).
	self assert: (portfolio transactions includes: thirdTransaction ).
	self assert: portfolio transactions size equals: 3 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659002!
test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction

	|firstAccount secondAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: secondAccount .
	
	self deny: (portfolio hasRegistered: aDeposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659242!
test19CannotAddPortfolioAlreadyAdded

	|firstIncludedPortfolio |
	
	firstIncludedPortfolio := Portfolio new.
	
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self should: [portfolio addPortfolio: firstIncludedPortfolio ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedPortfolio ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50658905!
test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances

	|firstIncludedPortfolio secondIncludedPortfolio secondAccount firstAccount|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 200 on: secondAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self assert: portfolio balance equals: firstIncludedPortfolio balance + secondIncludedPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50658937!
test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances

	|firstIncludedPortfolio secondIncludedPortfolio secondAccount firstAccount thirdAccount|
	
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 200 on: secondAccount .
	Deposit register: 100 on: thirdAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: portfolio balance equals: 400.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659175!
test16CannotAddAlreadyAddedAccount

	|anAccount|
	
	anAccount := ReceptiveAccount new.
	
	portfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659214!
test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios

	|firstIncludedPortfolio secondIncludedPortfolio firstAccount |
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	secondIncludedPortfolio addAccount: firstAccount.
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659020!
test10PortfolioWithPortfoliosDetectsRegisteredTransactions

	|firstIncludedPortfolio secondIncludedPortfolio firstAccount secondAccount firstDeposit secondDeposit|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	firstDeposit := Deposit register: 100 on: firstAccount.
	secondDeposit := Deposit register: 100 on: secondAccount .
	
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio.
	
	self assert: (portfolio hasRegistered: firstDeposit ).
	self assert: (portfolio hasRegistered: secondDeposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659353!
test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree

	|fatherPortfolio rootPortfolio secondRootPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50658885!
test04PortfolioWithOnePortfolioHaveSameBalance

	|firstIncludedPortfolio firstAccount|
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self assert: portfolio balance equals: firstIncludedPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659116!
test14PortfolioWithPortfolioKnowsItsTransactions

	|firstAccount firstTransaction firstIncludedPortfolio|
	
	firstAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio . 
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: portfolio transactions size equals: 1 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50658971!
test07EmptyPortfolioDoesNotHaveRegisteredTransactions

	|anAccount aDeposit|
	
	anAccount := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: anAccount.
	
	self deny: (portfolio hasRegistered: aDeposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50658851!
test02PortfolioWithOneAccountBalanceEqualsAccountBalance

	|firstAccount|
	
	firstAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: firstAccount .
	portfolio addAccount: firstAccount.
	
	self assert: portfolio balance equals: firstAccount balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50658986!
test08PortfolioWithOneAccounthasRegisteredTransaction

	|firstAccount aDeposit|
	
	firstAccount := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: firstAccount .
	
	self assert: (portfolio hasRegistered: aDeposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:32:31' prior: 50659303!
test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios

	|fatherPortfolio  secondFatherPortfolio anAccount|
	
	anAccount := ReceptiveAccount new.
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: anAccount .
	
	self should: [portfolio addAccount: anAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'manu urko 10/19/2023 14:32:33'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'manu urko 10/19/2023 14:32:34'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'manu urko 10/19/2023 14:32:34'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'manu urko 10/19/2023 14:32:34'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'manu urko 10/19/2023 14:32:34'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'manu urko 10/19/2023 14:32:34'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'manu urko 10/19/2023 14:32:34'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'manu urko 10/19/2023 14:32:34'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'manu urko 10/19/2023 14:32:34'!
PASSED!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'manu urko 10/19/2023 14:32:34'!
PASSED!

!testRun: #PortfolioTest #test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'manu urko 10/19/2023 14:32:34'!
PASSED!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'manu urko 10/19/2023 14:33:18'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio accountToReplace'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setup' stamp: 'manu urko 10/19/2023 14:33:16' prior: 50659660 overrides: 16961394!
setUp
	portfolio := Portfolio new.
	accountToReplace := ReceptiveAccount new.! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:33:35' prior: 50660048!
test02PortfolioWithOneAccountBalanceEqualsAccountBalance
	Deposit register: 100 on: accountToReplace .
	portfolio addAccount: accountToReplace.
	
	self assert: portfolio balance equals: accountToReplace balance.! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'manu urko 10/19/2023 14:33:37'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:34:00' prior: 50659602!
test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances
	|secondAccount|
	
	secondAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: accountToReplace .
	Deposit register: 50 on: secondAccount .
	portfolio addAccount: accountToReplace.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: accountToReplace balance + secondAccount balance.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'manu urko 10/19/2023 14:34:02'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:34:20' prior: 50660002!
test04PortfolioWithOnePortfolioHaveSameBalance
	|firstIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: accountToReplace .
	firstIncludedPortfolio addAccount: accountToReplace .
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self assert: portfolio balance equals: firstIncludedPortfolio balance.! !

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'manu urko 10/19/2023 14:34:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:34:31' prior: 50659859!
test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances

	|firstIncludedPortfolio secondIncludedPortfolio secondAccount|
	
	secondAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: accountToReplace .
	Deposit register: 200 on: secondAccount .
	firstIncludedPortfolio addAccount: accountToReplace .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self assert: portfolio balance equals: firstIncludedPortfolio balance + secondIncludedPortfolio balance.! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:34:40' prior: 50659885!
test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances

	|firstIncludedPortfolio secondIncludedPortfolio secondAccount thirdAccount|
	
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: accountToReplace .
	Deposit register: 200 on: secondAccount .
	Deposit register: 100 on: thirdAccount .
	firstIncludedPortfolio addAccount: accountToReplace .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: portfolio balance equals: 400.! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:34:47' prior: 50660037!
test07EmptyPortfolioDoesNotHaveRegisteredTransactions

	|aDeposit|
	
	aDeposit := Deposit register: 100 on: accountToReplace.
	
	self deny: (portfolio hasRegistered: aDeposit ).! !

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'manu urko 10/19/2023 14:34:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:35:04' prior: 50660060!
test08PortfolioWithOneAccounthasRegisteredTransaction

	|aDeposit|
	
	aDeposit := Deposit register: 100 on: accountToReplace.
	portfolio addAccount: accountToReplace .
	
	self assert: (portfolio hasRegistered: aDeposit ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:35:10' prior: 50659830!
test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction

	|secondAccount aDeposit|
	
	secondAccount := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: accountToReplace.
	portfolio addAccount: secondAccount .
	
	self deny: (portfolio hasRegistered: aDeposit ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:35:18' prior: 50659949!
test10PortfolioWithPortfoliosDetectsRegisteredTransactions

	|firstIncludedPortfolio secondIncludedPortfolio secondAccount firstDeposit secondDeposit|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	
	firstDeposit := Deposit register: 100 on: accountToReplace.
	secondDeposit := Deposit register: 100 on: secondAccount .
	
	firstIncludedPortfolio addAccount: accountToReplace .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio.
	
	self assert: (portfolio hasRegistered: firstDeposit ).
	self assert: (portfolio hasRegistered: secondDeposit ).! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:35:28' prior: 50659694!
test11PortfolioWithOneAccountKnowsItsTransactions
	Deposit register: 100 on: accountToReplace.
	
	portfolio addAccount: accountToReplace .
	
	self assert: portfolio transactions equals: accountToReplace transactions.! !

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:35:29'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:35:40' prior: 50659619!
test13PortfolioWithMultipleAccountsKnowsItsTransactions

	|secondAccount firstTransaction secondTransaction|
	
	secondAccount := ReceptiveAccount new.
	
	firstTransaction := Deposit register: 100 on: accountToReplace. 
	secondTransaction := Deposit register: 100 on: secondAccount .
	
	portfolio addAccount: accountToReplace. portfolio addAccount: secondAccount .
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: (portfolio transactions includes: secondTransaction ).
	self assert: portfolio transactions size equals: 2 .! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:35:52' prior: 50660018!
test14PortfolioWithPortfolioKnowsItsTransactions

	|firstTransaction firstIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: accountToReplace. 
	firstIncludedPortfolio addAccount: accountToReplace .
	
	portfolio addPortfolio: firstIncludedPortfolio . 
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: portfolio transactions size equals: 1 .! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:36:02' prior: 50659792!
test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions

	|secondAccount thirdAccount firstTransaction secondTransaction thirdTransaction firstIncludedPortfolio secondIncludedPortfolio|
	
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.	
	
	firstTransaction := Deposit register: 100 on: accountToReplace. 
	secondTransaction := Deposit register: 50 on: secondAccount.
	thirdTransaction := Deposit register: 100 on: thirdAccount.  
	
	firstIncludedPortfolio addAccount: accountToReplace .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio . 
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: (portfolio transactions includes: secondTransaction ).
	self assert: (portfolio transactions includes: thirdTransaction ).
	self assert: portfolio transactions size equals: 3 .! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:36:10' prior: 50659913!
test16CannotAddAlreadyAddedAccount
	portfolio addAccount: accountToReplace .
	
	self should: [portfolio addAccount: accountToReplace ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:36:19' prior: 50659775!
test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio

	|includedPortfolio|

	includedPortfolio := Portfolio new.
	
	includedPortfolio addAccount: accountToReplace .
	portfolio addPortfolio: includedPortfolio.
	
	self should: [portfolio addAccount: accountToReplace ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:36:36' prior: 50659926!
test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios

	|firstIncludedPortfolio secondIncludedPortfolio |
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	secondIncludedPortfolio addAccount: accountToReplace.
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addAccount: accountToReplace ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:36:59' prior: 50659642!
test21CannotAddAccountThatFatherPortfolioAlreadyHas

	|fatherPortfolio|
	
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: accountToReplace .
	
	self should: [portfolio addAccount: accountToReplace ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:37:32' prior: 50660072!
test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios

	|fatherPortfolio  secondFatherPortfolio |
	
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: accountToReplace .
	
	self should: [portfolio addAccount: accountToReplace ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'manu urko 10/19/2023 14:37:33'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:37:42' prior: 50659737!
test23CannotAddAccountAlreadyAddedInRootPortfolio

	|fatherPortfolio  rootPortfolio|
	
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	
	rootPortfolio addAccount: accountToReplace .
	
	self should: [portfolio addAccount: accountToReplace ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'manu urko 10/19/2023 14:37:46'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'manu urko 10/19/2023 14:37:56' prior: 50659977!
test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree

	|fatherPortfolio rootPortfolio secondRootPortfolio|
	
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: accountToReplace .
	
	self should: [portfolio addAccount: accountToReplace ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'manu urko 10/19/2023 14:37:58'!
PASSED!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'manu urko 10/19/2023 14:38:19'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio firstAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:19' prior: 50660273!
test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances

	|firstIncludedPortfolio secondIncludedPortfolio secondAccount|
	
	secondAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 200 on: secondAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self assert: portfolio balance equals: firstIncludedPortfolio balance + secondIncludedPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660221!
test02PortfolioWithOneAccountBalanceEqualsAccountBalance
	Deposit register: 100 on: firstAccount .
	portfolio addAccount: firstAccount.
	
	self assert: portfolio balance equals: firstAccount balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660524!
test21CannotAddAccountThatFatherPortfolioAlreadyHas

	|fatherPortfolio|
	
	fatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	fatherPortfolio addAccount: firstAccount .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660298!
test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances

	|firstIncludedPortfolio secondIncludedPortfolio secondAccount thirdAccount|
	
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 200 on: secondAccount .
	Deposit register: 100 on: thirdAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: portfolio balance equals: 400.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660487!
test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio

	|includedPortfolio|

	includedPortfolio := Portfolio new.
	
	includedPortfolio addAccount: firstAccount .
	portfolio addPortfolio: includedPortfolio.
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660421!
test14PortfolioWithPortfolioKnowsItsTransactions

	|firstTransaction firstIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	firstIncludedPortfolio addAccount: firstAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio . 
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: portfolio transactions size equals: 1 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660325!
test07EmptyPortfolioDoesNotHaveRegisteredTransactions

	|aDeposit|
	
	aDeposit := Deposit register: 100 on: firstAccount.
	
	self deny: (portfolio hasRegistered: aDeposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660235!
test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances
	|secondAccount|
	
	secondAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: firstAccount .
	Deposit register: 50 on: secondAccount .
	portfolio addAccount: firstAccount.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: firstAccount balance + secondAccount balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660565!
test23CannotAddAccountAlreadyAddedInRootPortfolio

	|fatherPortfolio  rootPortfolio|
	
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	
	rootPortfolio addAccount: firstAccount .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660503!
test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios

	|firstIncludedPortfolio secondIncludedPortfolio |
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	
	secondIncludedPortfolio addAccount: firstAccount.
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660540!
test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios

	|fatherPortfolio  secondFatherPortfolio |
	
	fatherPortfolio := Portfolio new.
	secondFatherPortfolio := Portfolio new.
	
	fatherPortfolio addPortfolio: portfolio .
	secondFatherPortfolio addPortfolio: portfolio .
	
	secondFatherPortfolio addAccount: firstAccount .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660338!
test08PortfolioWithOneAccounthasRegisteredTransaction

	|aDeposit|
	
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: firstAccount .
	
	self assert: (portfolio hasRegistered: aDeposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660400!
test13PortfolioWithMultipleAccountsKnowsItsTransactions

	|secondAccount firstTransaction secondTransaction|
	
	secondAccount := ReceptiveAccount new.
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 100 on: secondAccount .
	
	portfolio addAccount: firstAccount. portfolio addAccount: secondAccount .
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: (portfolio transactions includes: secondTransaction ).
	self assert: portfolio transactions size equals: 2 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660588!
test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree

	|fatherPortfolio rootPortfolio secondRootPortfolio|
	
	fatherPortfolio := Portfolio new.
	rootPortfolio := Portfolio new.
	secondRootPortfolio := Portfolio new.
	

	fatherPortfolio addPortfolio: portfolio .
	rootPortfolio addPortfolio: fatherPortfolio .
	secondRootPortfolio addPortfolio: fatherPortfolio .
	
	secondRootPortfolio addAccount: firstAccount .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio errorCannotAddAccountOfFatherPortfolio 
			]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660255!
test04PortfolioWithOnePortfolioHaveSameBalance
	|firstIncludedPortfolio|
	
	firstIncludedPortfolio := Portfolio new.
	
	Deposit register: 100 on: firstAccount .
	firstIncludedPortfolio addAccount: firstAccount .
	portfolio addPortfolio: firstIncludedPortfolio .
	
	self assert: portfolio balance equals: firstIncludedPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660438!
test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions

	|secondAccount thirdAccount firstTransaction secondTransaction thirdTransaction firstIncludedPortfolio secondIncludedPortfolio|
	
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.	
	
	firstTransaction := Deposit register: 100 on: firstAccount. 
	secondTransaction := Deposit register: 50 on: secondAccount.
	thirdTransaction := Deposit register: 100 on: thirdAccount.  
	
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio . 
	portfolio addPortfolio: secondIncludedPortfolio .
	portfolio addAccount: thirdAccount .
	
	self assert: (portfolio transactions includes: firstTransaction ).
	self assert: (portfolio transactions includes: secondTransaction ).
	self assert: (portfolio transactions includes: thirdTransaction ).
	self assert: portfolio transactions size equals: 3 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660360!
test10PortfolioWithPortfoliosDetectsRegisteredTransactions

	|firstIncludedPortfolio secondIncludedPortfolio secondAccount firstDeposit secondDeposit|
	
	firstIncludedPortfolio := Portfolio new.
	secondIncludedPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	
	firstDeposit := Deposit register: 100 on: firstAccount.
	secondDeposit := Deposit register: 100 on: secondAccount .
	
	firstIncludedPortfolio addAccount: firstAccount .
	secondIncludedPortfolio addAccount: secondAccount .
	
	portfolio addPortfolio: firstIncludedPortfolio.
	portfolio addPortfolio: secondIncludedPortfolio.
	
	self assert: (portfolio hasRegistered: firstDeposit ).
	self assert: (portfolio hasRegistered: secondDeposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660215 overrides: 16961394!
setUp
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660386!
test11PortfolioWithOneAccountKnowsItsTransactions
	Deposit register: 100 on: firstAccount.
	
	portfolio addAccount: firstAccount .
	
	self assert: portfolio transactions equals: firstAccount transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660475!
test16CannotAddAlreadyAddedAccount
	portfolio addAccount: firstAccount .
	
	self should: [portfolio addAccount: firstAccount ]
		raise: Error
		withExceptionDo: [:anError | self assert: anError messageText = Portfolio errorCannotAddAlreadyAddedAccount ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'manu urko 10/19/2023 14:38:20' prior: 50660348!
test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction

	|secondAccount aDeposit|
	
	secondAccount := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: firstAccount.
	portfolio addAccount: secondAccount .
	
	self deny: (portfolio hasRegistered: aDeposit ).! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceEqualsZero stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMultipleAccountsIsTheSumOfTheAccountsBalances stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithOnePortfolioHaveSameBalance stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test05BalanceOfPortfolioWithMultiplePortfoliosIsTheSumOfThePortfoliosBalances stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test06BalanceOfPortfolioWithAccountsAndPortfoliosIsTheSumOfTheBalances stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveRegisteredTransactions stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccounthasRegisteredTransaction stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithAccountsDoesNotHaveRegisteredTransaction stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithPortfoliosDetectsRegisteredTransactions stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOneAccountKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test12EmptyPortfolioDoesNotHaveTransactions stamp: 'manu urko 10/19/2023 14:38:22'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioWithMultipleAccountsKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithPortfolioKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithPortfoliosAndAccountsKnowsItsTransactions stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAlreadyAddedAccount stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCannotAddAccountIncludedInAnIncludedPortfolio stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithMultiplePortfoliosCannotAddAccountIncludedInOneOfThosePortfolios stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test19CannotAddPortfolioAlreadyAdded stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioWithMultiplePortfoliosCannotAddPortfolioIncludedInOneOfThosePortfolios stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test21CannotAddAccountThatFatherPortfolioAlreadyHas stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test22CannotAddAccountAlreadyAddedOnOneOfMultipleFatherPortfolios stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test23CannotAddAccountAlreadyAddedInRootPortfolio stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test24CannotAddAccountAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test25CannotAddPortfolioThatFatherPortfolioAlreadyHas stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test26CannotAddPortfolioAlreadyAddedInOneOfMultipleFatherPortfolios stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

!testRun: #PortfolioTest #test27CannotAddPortfolioAlreadyAddedInOneOfTheRootsOfThePortfoliosTree stamp: 'manu urko 10/19/2023 14:38:23'!
PASSED!

----SNAPSHOT----(19 October 2023 14:40:45) CuisUniversity-5981.image priorSource: 10469256!