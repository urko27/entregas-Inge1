

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (19 November 2023 18:23:46) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


----End fileIn of C:\Users\Intekio\Desktop\cuis\CustomerImporter-1.st----!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:25:33'!
keyword1: line

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:25:33' prior: 50650628 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self keyword1: line) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!methodRemoval: CustomerImporter #keyword1: stamp: 'h 11/19/2023 18:25:58'!
keyword1: line

	^ line beginsWith: 'C'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:25:58' prior: 50650844 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		( line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'h 11/19/2023 18:26:22' prior: 50650881 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		( line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'h 11/19/2023 18:26:22'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'h 11/19/2023 18:26:50' prior: 50650914 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		( line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'h 11/19/2023 18:26:50'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:27:01' prior: 50650955 overrides: 16902254!
value

	"
	self importCustomers
	"

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		( line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:27:39' prior: 50650996 overrides: 16902254!
value

	"
	self importCustomers
	"

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		( line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:27:45' prior: 50651028 overrides: 16902254!
value

	"
	self importCustomers
	"

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		( line beginsWith: 'C') ifTrue: [ | record |
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:27:52' prior: 50651060 overrides: 16902254!
value

	"
	self importCustomers
	"

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		( line beginsWith: 'C') ifTrue: [ | record |
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | record newAddress |
			record := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:28:30' prior: 50651091 overrides: 16902254!
value

	"
	self importCustomers
	"

	line := readStream nextLine.
	[ line notNil ] whileTrue: [| record |
		record := line findTokens: $,.
		
		( line beginsWith: 'C') ifTrue: [ 
	
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:28:32'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:28:58' prior: 50651121 overrides: 16902254!
value

	"
	self importCustomers
	"
	| record |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := line findTokens: $,.
		
		( line beginsWith: 'C') ifTrue: [ 
	
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'h 11/19/2023 18:29:18' prior: 50651152 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := line findTokens: $,.
		
		( line beginsWith: 'C') ifTrue: [ 
	
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'h 11/19/2023 18:29:18'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:29:35'!
getRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:29:35' prior: 50651181 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self getRecord.
		
		( line beginsWith: 'C') ifTrue: [ 
	
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:29:52'!
importCustomer

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:29:52' prior: 50651222 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self getRecord.
		
		( line beginsWith: 'C') ifTrue: [ 
	
			self importCustomer ].

		(line beginsWith: 'A') ifTrue: [ |newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:30:17' prior: 50651261 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self getRecord.
		
		( line beginsWith: 'C') ifTrue: [ 
	
			self importCustomer ].

		(line beginsWith: 'A') ifTrue: [ 
			self importAddress ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:30:35'!
importAddress

	|newAddress |
	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:30:45' prior: 50651282 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self getRecord.
		
		( line beginsWith: 'C') ifTrue: [ self importCustomer ].

		(line beginsWith: 'A') ifTrue: [ self importAddress ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:31:10'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:31:45' prior: 50651307 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self getRecord.
		
		( line beginsWith: 'C') ifTrue: [ self importCustomer ].
		(line beginsWith: 'A') ifTrue: [ self importAddress ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:31:57' prior: 50651322 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self getRecord.
		
		self importRecord.

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:32:09'!
importRecord

	( line beginsWith: 'C') ifTrue: [ self importCustomer ].
	(line beginsWith: 'A') ifTrue: [ self importAddress ].
	
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:32:34' prior: 50651335 overrides: 16902254!
value

	"
	self importCustomers
	"
	
	[ line := readStream nextLine.  line notNil ] whileTrue: [
		self getRecord.
		
		self importRecord.].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:32:42'!
readNextLine

	line := readStream nextLine.  line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:32:43' prior: 50651351 overrides: 16902254!
value

	"
	self importCustomers
	"
	
	[ self readNextLine ] whileTrue: [
		self getRecord.
		
		self importRecord.].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:32:49' prior: 50651364 overrides: 16902254!
value

	"
	self importCustomers
	"
	
	[ self readNextLine ] whileTrue: [
		self getRecord.
		self importRecord.
		].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:33:13'!
isCustomerRecord

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:33:13' prior: 50651343!
importRecord

	( self isCustomerRecord) ifTrue: [ self importCustomer ].
	(line beginsWith: 'A') ifTrue: [ self importAddress ].
	
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:33:20'!
isAddressRecord

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:33:20' prior: 50651384!
importRecord

	( self isCustomerRecord) ifTrue: [ self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'h 11/19/2023 18:33:49'!
test02CannoImportCustomerRecordWithLessThan5Records

	self should: [CustomerImporter valueFrom: self dataWithInvalidCustomer into: session]
		raise: Error
		withExceptionDo: [:anError| 
			anError messageText = CustomerImporter customerRecordWithout5FieldsError .
			self assert: (session selectAllOfType: Customer) size equals: 0. ]! !
!ImportTest methodsFor: 'test data' stamp: 'h 11/19/2023 18:34:21'!
dataWithCustomerRecordWith4Fields

	^ ReadStream on:
'C,Pepe,Sanchez,D
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'h 11/19/2023 18:34:29' prior: 50651403!
test02CannoImportCustomerRecordWithLessThan5Records

	self should: [CustomerImporter valueFrom: self dataWithCustomerRecordWith4Fields into: session]
		raise: Error
		withExceptionDo: [:anError| 
			anError messageText = CustomerImporter customerRecordWithout5FieldsError .
			self assert: (session selectAllOfType: Customer) size equals: 0. ]! !
!CustomerImporter class methodsFor: 'errors' stamp: 'h 11/19/2023 18:34:49'!
customerRecordWithout5FieldsError

	^'Customer record should have 5 fields'! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:34:54'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:34:54'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:34:54'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:35:01'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:35:03'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:35:03'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:35:23' prior: 50651358!
readNextLine

	line := readStream nextLine.  
	^line notNil! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:35:25'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:35:25'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/19/2023 18:35:44'!
test03CannotImportCustomerRecordWithMoreThan5Records

	self should: [CustomerImporter valueFrom: self dataWithCustomerWith6Fields into: session]
		raise: Error
		withExceptionDo: [:anError| 
			anError messageText = CustomerImporter customerRecordWithout5FieldsError .
			self assert: (session selectAllOfType: Customer) size equals: 0. ]! !
!ImportTest methodsFor: 'test data' stamp: 'h 11/19/2023 18:35:54'!
dataWithCustomerWith6Fields

	^ ReadStream on:
'C,Pepe,Sanchez,D,1,x
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:35:57'!
FAILURE!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:35:57'!
FAILURE!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:36:08'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:39:12' prior: 50651249!
importCustomer

	record size = 5 ifFalse: [ self error: self class customerRecordWithout5FieldsError ].
	
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer! !

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:39:19'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:39:21'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/19/2023 18:39:35'!
test04CannotImportAddressRecordWithMoreThan6Records

	self should: [CustomerImporter valueFrom: self dataWithAddressWith7Fields into: session]
		raise: Error
		withExceptionDo: [:anError| 
			anError messageText = CustomerImporter addressRecordWithout6FieldsError .
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
			].! !
!ImportTest methodsFor: 'test data' stamp: 'h 11/19/2023 18:39:47'!
dataWithAddressWith7Fields

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,x
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'h 11/19/2023 18:39:53'!
dataWithAddressWith5Fields

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!CustomerImporter class methodsFor: 'errors' stamp: 'h 11/19/2023 18:40:12'!
addressRecordWithout6FieldsError

	^'Address record should have 6 fields'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:40:38' prior: 50651294!
importAddress

	|newAddress |
	
	record size > 6 ifFalse: [ self error: self class addressRecordWithout6FieldsError ].
	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:40:39'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:40:39'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:40:39'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:40:39'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:40:53' prior: 50651565!
importAddress

	|newAddress |
	
	record size < 6 ifFalse: [ self error: self class addressRecordWithout6FieldsError ].
	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:40:54'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:40:55'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:40:55'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:40:55'!
ERROR!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:41:17'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:41:19'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:41:19'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:41:19'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:41:19'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:41:20'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:42:07' prior: 50651594!
importAddress

	|newAddress |
	
	record size > 6 ifTrue: [ self error: self class addressRecordWithout6FieldsError ].
	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:42:08'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:42:08'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:42:09'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:42:09'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/19/2023 18:42:25'!
test05CannotImportAddressRecordWithLessThan6Records

	self should: [CustomerImporter valueFrom: self dataWithAddressWith5Fields into: session]
		raise: Error
		withExceptionDo: [:anError| 
			anError messageText = CustomerImporter addressRecordWithout6FieldsError .
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
			].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:42:34' prior: 50651644!
importAddress

	|newAddress |
	
	record size = 6 ifFalse: [ self error: self class addressRecordWithout6FieldsError ].
	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:42:36'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:42:36'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:42:36'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:42:36'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 18:42:36'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/19/2023 18:46:07'!
test06CannotImportInvalidRecord
	self
		should: [CustomerImporter valueFrom: self dataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].! !
!ImportTest methodsFor: 'test data' stamp: 'h 11/19/2023 18:46:27'!
dataWithInvalidRecord

	^ ReadStream on: 'F,Pepe,Sanchez,D,22333444
C,Juan,Perez,C,23-25666777-9'.! !
!CustomerImporter class methodsFor: 'errors' stamp: 'h 11/19/2023 18:46:41'!
invalidRecordError
	^ 'Record is not a customer nor an address'.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:47:08' prior: 50651396!
importRecord

	( self isCustomerRecord) ifTrue: [ self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	
	self error: self class invalidRecordError.! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:47:10'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:47:10'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:47:10'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:47:10'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 18:47:10'!
PASSED!

!testRun: #ImportTest #test06CannotImportInvalidRecord stamp: 'h 11/19/2023 18:47:11'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:47:11'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:47:56' prior: 50651742!
importRecord

	( self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ ^self importAddress ].
	
	self error: self class invalidRecordError.! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:48:02'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:48:02'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:48:02'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:48:03'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 18:48:03'!
PASSED!

!testRun: #ImportTest #test06CannotImportInvalidRecord stamp: 'h 11/19/2023 18:48:03'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/19/2023 18:50:17'!
test06CannotImportRecordWhichIsNotACustomerNorAnAddress
	self
		should: [CustomerImporter valueFrom: self dataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].! !

!methodRemoval: ImportTest #test06CannotImportInvalidRecord stamp: 'h 11/19/2023 18:50:17'!
test06CannotImportInvalidRecord
	self
		should: [CustomerImporter valueFrom: self dataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].!
!ImportTest methodsFor: 'tests' stamp: 'h 11/19/2023 18:52:37' prior: 50651801!
test06CannotImportRecordWhichIsNotACustomerNorAnAddress

	self
		should: [CustomerImporter valueFrom: self dataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].
	
	self
		should: [CustomerImporter valueFrom: self moreDataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].! !
!ImportTest methodsFor: 'test data' stamp: 'h 11/19/2023 18:52:55'!
moreDataWithInvalidRecord

	^ ReadStream on: 'Casa,Pepe,Sanchez,D,22333444
C,Juan,Perez,C,23-25666777-9'.! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:53:09'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:53:09'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:53:10'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:53:10'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 18:53:10'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 18:53:10'!
FAILURE!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 18:53:11'!
FAILURE!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 18:53:21'!
FAILURE!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 18:53:21'!
FAILURE!

----SNAPSHOT----(19 November 2023 18:53:32) CuisUniversity-5981.image priorSource: 10197292!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:54:24' prior: 50651379!
isCustomerRecord

	^ line first = 'C'! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:54:26'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:54:26'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:54:26'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:54:26'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 18:54:27'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 18:54:27'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:54:27'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:54:58'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:54:59'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:54:59'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:54:59'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 18:54:59'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 18:54:59'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:54:59'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:55:13'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:33:13' prior: 50651891!
isCustomerRecord

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:56:07' prior: 50651944!
isCustomerRecord

	^ (line beginsWith: 'C') and: [line size = 1]! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:56:08'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:56:08'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:56:08'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:56:08'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 18:56:08'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 18:56:09'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:56:09'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:57:11'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:57:11'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:57:11'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:57:11'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 18:57:11'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 18:57:11'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:57:11'!
ERROR!

line beginsWith: 'C'!

line size = 1!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 18:58:39' prior: 50651949!
isCustomerRecord

	^ (line beginsWith: 'C') and: [line first size = 1]! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:58:41'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:58:41'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:58:41'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:58:41'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 18:58:41'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 18:58:42'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:58:42'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:59:30'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 18:59:31'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 18:59:31'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 18:59:31'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 18:59:31'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 18:59:31'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 18:59:31'!
ERROR!

line!

----End fileIn of C:\Users\Intekio\Desktop\cuis\Packages\TerseGuide.pck.st----!

line!

self size
!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 19:02:19' prior: 50652002!
isCustomerRecord

	^ (line beginsWith: 'C') and: [record first size = 1]! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 19:02:21'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 19:02:21'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 19:02:21'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 19:02:21'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 19:02:22'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 19:02:22'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/19/2023 19:03:47' prior: 50651827!
test06CannotImportRecordWhichIsNotACustomerNorAnAddress

	self
		should: [CustomerImporter valueFrom: self dataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].
	
	self
		should: [CustomerImporter valueFrom: self moreDataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].
			
	self
		should: [CustomerImporter valueFrom: self evenMoreDataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].! !
!ImportTest methodsFor: 'tests' stamp: 'h 11/19/2023 19:04:27' prior: 50655000!
test06CannotImportRecordWhichIsNotACustomerNorAnAddress

	self
		should: [CustomerImporter valueFrom: self dataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].
	
	self
		should: [CustomerImporter valueFrom: self moreDataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].
			
	self
		should: [CustomerImporter valueFrom: self evenMoreDataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
				].! !
!ImportTest methodsFor: 'test data' stamp: 'h 11/19/2023 19:04:58'!
evenMoreDataWithInvalidRecord

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
Address,San Martin,3322,Olivos,1636,BsAs'.! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 19:05:01'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 19:05:02'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 19:05:02'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 19:05:02'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 19:05:02'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 19:05:03'!
FAILURE!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 19:05:03'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/19/2023 19:05:19' prior: 50651391!
isAddressRecord

	^ (line beginsWith: 'A') and: [record first size = 1]! !

!testRun: #ImportTest #test01Import stamp: 'h 11/19/2023 19:05:25'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/19/2023 19:05:25'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/19/2023 19:05:25'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/19/2023 19:05:25'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/19/2023 19:05:25'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/19/2023 19:05:26'!
PASSED!

----SNAPSHOT----(19 November 2023 19:05:30) CuisUniversity-5981.image priorSource: 10247566!

----QUIT----(19 November 2023 19:05:33) CuisUniversity-5981.image priorSource: 10351040!

----STARTUP---- (20 November 2023 03:43:35) as C:\Users\Intekio\Desktop\cuis\CuisUniversity-5981.image!


!testRun: #ImportTest #test01Import stamp: 'h 11/20/2023 03:44:51'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/20/2023 03:44:51'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/20/2023 03:44:51'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/20/2023 03:44:52'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/20/2023 03:44:52'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/20/2023 03:44:52'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:47:45'!
test07CannotImportAddressRecordWithNoCustomer

			
	self
		should: [CustomerImporter valueFrom: self addressWithNoCustomer into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self assert: (session selectAllOfType: Customer) size
				equals: 0.
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
				].! !
!ImportTest methodsFor: 'test data' stamp: 'h 11/20/2023 03:48:09'!
addressWithNoCustomer

	^ ReadStream on:
'A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9'! !

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'h 11/20/2023 03:48:19'!
PASSED!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'h 11/20/2023 03:48:54'!
PASSED!

newCustomer !
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:50:39' prior: 50655150!
test07CannotImportAddressRecordWithNoCustomer

			
	self
		should: [CustomerImporter valueFrom: self addressWithNoCustomer into: session ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self assert: (session selectAllOfType: Customer) size
				equals: 0.
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
				].! !

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'h 11/20/2023 03:50:40'!
ERROR!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'h 11/20/2023 03:50:40'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/20/2023 03:53:33' prior: 50651687!
importAddress

	|newAddress |
	
	record size = 6 ifFalse: [ self error: self class addressRecordWithout6FieldsError ].
	
	newAddress := Address new.
	newCustomer ifNotNil: [newCustomer addAddress: newAddress] ifNil: [self error: self class addressWithNoCustomerError].
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter class methodsFor: 'errors' stamp: 'h 11/20/2023 03:54:44'!
addressWithNoCustomerError

	^'Address does not belong to a customer'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'h 11/20/2023 03:55:06' prior: 50655206!
importAddress

	|newAddress |
	
	record size = 6 ifFalse: [ self error: self class addressRecordWithout6FieldsError ].
	
	newAddress := Address new.
	newCustomer ifNotNil: [newCustomer addAddress: newAddress] 
				ifNil: [self error: self class addressWithNoCustomerError].
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01Import stamp: 'h 11/20/2023 03:55:11'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/20/2023 03:55:11'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/20/2023 03:55:11'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/20/2023 03:55:11'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/20/2023 03:55:12'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/20/2023 03:55:12'!
PASSED!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'h 11/20/2023 03:55:12'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:55:29' prior: 50655181!
test07CannotImportAddressRecordWithNoCustomer

			
	self
		should: [CustomerImporter valueFrom: self addressWithNoCustomer into: session ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter addressWithNoCustomerError .
			self assert: (session selectAllOfType: Customer) size
				equals: 0.
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
				].! !

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'h 11/20/2023 03:55:30'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:50:39' prior: 50655272!
test07CannotImportAddressRecordWithNoCustomer

			
	self
		should: [CustomerImporter valueFrom: self addressWithNoCustomer into: session ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self assert: (session selectAllOfType: Customer) size
				equals: 0.
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
				].! !

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'h 11/20/2023 03:57:28'!
PASSED!

anError!

CustomerImporter invalidRecordError!

anError messageText = CustomerImporter invalidRecordError!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:58:34' prior: 50651425!
test02CannoImportCustomerRecordWithLessThan5Records

	self should: [CustomerImporter valueFrom: self dataWithCustomerRecordWith4Fields into: session]
		raise: Error
		withExceptionDo: [:anError| 
			self assert: anError messageText = CustomerImporter customerRecordWithout5FieldsError .
			self assert: (session selectAllOfType: Customer) size equals: 0. ]! !

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'h 11/20/2023 03:58:35'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:58:40' prior: 50651472!
test03CannotImportCustomerRecordWithMoreThan5Records

	self should: [CustomerImporter valueFrom: self dataWithCustomerWith6Fields into: session]
		raise: Error
		withExceptionDo: [:anError| 
			self assert: anError messageText = CustomerImporter customerRecordWithout5FieldsError .
			self assert: (session selectAllOfType: Customer) size equals: 0. ]! !

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'h 11/20/2023 03:58:41'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:58:45' prior: 50651526!
test04CannotImportAddressRecordWithMoreThan6Records

	self should: [CustomerImporter valueFrom: self dataWithAddressWith7Fields into: session]
		raise: Error
		withExceptionDo: [:anError| 
			self assert: anError messageText = CustomerImporter addressRecordWithout6FieldsError .
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
			].! !

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'h 11/20/2023 03:58:46'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:58:50' prior: 50651672!
test05CannotImportAddressRecordWithLessThan6Records

	self should: [CustomerImporter valueFrom: self dataWithAddressWith5Fields into: session]
		raise: Error
		withExceptionDo: [:anError| 
			self assert: anError messageText = CustomerImporter addressRecordWithout6FieldsError .
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
			].! !

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'h 11/20/2023 03:58:51'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:58:56' prior: 50655031!
test06CannotImportRecordWhichIsNotACustomerNorAnAddress

	self
		should: [CustomerImporter valueFrom: self dataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].
	
	self
		should: [CustomerImporter valueFrom: self moreDataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].
			
	self
		should: [CustomerImporter valueFrom: self evenMoreDataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
				].! !
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:59:01' prior: 50655391!
test06CannotImportRecordWhichIsNotACustomerNorAnAddress

	self
		should: [CustomerImporter valueFrom: self dataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].
	
	self
		should: [CustomerImporter valueFrom: self moreDataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].
			
	self
		should: [CustomerImporter valueFrom: self evenMoreDataWithInvalidRecord into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CustomerImporter invalidRecordError.
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
				].! !

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'h 11/20/2023 03:59:03'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:59:07' prior: 50655293!
test07CannotImportAddressRecordWithNoCustomer

			
	self
		should: [CustomerImporter valueFrom: self addressWithNoCustomer into: session ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = CustomerImporter invalidRecordError.
			self assert: (session selectAllOfType: Customer) size
				equals: 0.
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
				].! !

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'h 11/20/2023 03:59:08'!
FAILURE!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'h 11/20/2023 03:59:08'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 03:59:16' prior: 50655462!
test07CannotImportAddressRecordWithNoCustomer

			
	self
		should: [CustomerImporter valueFrom: self addressWithNoCustomer into: session ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = CustomerImporter addressWithNoCustomerError .
			self assert: (session selectAllOfType: Customer) size
				equals: 0.
			self deny: ((session selectAllOfType: Customer) anySatisfy: [:aCustomer | 
				aCustomer addresses size > 0]) 
				].! !

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'h 11/20/2023 03:59:17'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'h 11/20/2023 04:05:20'!
test08CannotImportRecordWithTrailingBlanksInOneOfTheRecordFields
	self
		should: [
			CustomerImporter
				valueFrom: self trailingBlanksImportData
				into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].! !
!ImportTest methodsFor: 'test data' stamp: 'h 11/20/2023 04:05:31'!
trailingBlanksImportData

	^ ReadStream on:
'C,Pepe     ,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test08CannotImportRecordWithTrailingBlanksInOneOfTheRecordFields stamp: 'h 11/20/2023 04:05:33'!
FAILURE!

!testRun: #ImportTest #test08CannotImportRecordWithTrailingBlanksInOneOfTheRecordFields stamp: 'h 11/20/2023 04:05:33'!
FAILURE!

!methodRemoval: ImportTest #test08CannotImportRecordWithTrailingBlanksInOneOfTheRecordFields stamp: 'h 11/20/2023 04:06:17'!
test08CannotImportRecordWithTrailingBlanksInOneOfTheRecordFields
	self
		should: [
			CustomerImporter
				valueFrom: self trailingBlanksImportData
				into: session ]
		raise: Error
		withExceptionDo: [ :anError |
			anError messageText = CustomerImporter invalidRecordError.
			self
				assert: (session selectAllOfType: Customer) size
				equals: 0 ].!

----SNAPSHOT----(20 November 2023 04:06:20) CuisUniversity-5981.image priorSource: 10351134!

----QUIT----(20 November 2023 04:06:40) CuisUniversity-5981.image priorSource: 10364918!

----STARTUP---- (22 November 2023 17:22:28) as C:\Users\Manuel Urkovich\Facu\Inge1\customerImporter\windows64\CuisUniversity-5981.image!


!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 17:32:39'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'mm uu 11/22/2023 17:32:39'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'mm uu 11/22/2023 17:32:39'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'mm uu 11/22/2023 17:32:40'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'mm uu 11/22/2023 17:32:40'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'mm uu 11/22/2023 17:32:40'!
PASSED!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'mm uu 11/22/2023 17:32:40'!
PASSED!

Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id inTransaction closed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'mm uu 11/22/2023 17:47:48'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id inTransaction closed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'mm uu 11/22/2023 17:54:34' prior: 50651506!
importCustomer

	record size = 5 ifFalse: [ self error: self class customerRecordWithout5FieldsError ].
	
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'mm uu 11/22/2023 17:56:05'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record customerSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'mm uu 11/22/2023 17:56:03' prior: 50655606!
importCustomer

	record size = 5 ifFalse: [ self error: self class customerRecordWithout5FieldsError ].
	
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	customerSystem add: newCustomer.! !
!ImportTest methodsFor: 'tests' stamp: 'mm uu 11/22/2023 17:56:45' prior: 50650377!
test01Import

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/22/2023 17:57:42' prior: 50650459 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
	session beginTransaction.
! !
!ImportTest methodsFor: 'customer' stamp: 'mm uu 11/22/2023 18:08:51' prior: 50650470!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (session customerWithIdType: anIdType idNumber: anIdNumber).
		"select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne"! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/22/2023 18:09:45' prior: 50655654 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
"	session beginTransaction."
! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:10:01'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:10:07'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'mm uu 11/22/2023 18:10:24' prior: 50655629!
importCustomer

	record size = 5 ifFalse: [ self error: self class customerRecordWithout5FieldsError ].
	
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session add: newCustomer.! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:10:39'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:10:41'!
ERROR!
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:10:56'!
add: aNewCustomer 
	self shouldBeImplemented.! !

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'mm uu 11/22/2023 18:12:02'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id inTransaction closed session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:12:00' overrides: 16920235!
initialize
	session := DataBaseSession! !
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:13:18' prior: 50655718 overrides: 16920235!
initialize
	session := DataBaseSession new.
	session beginTransaction ! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/22/2023 18:14:12' prior: 50655673 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
"	session beginTransaction."
! !
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:14:57' prior: 50655724 overrides: 16920235!
initialize
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction ! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:15:50'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:15:52'!
ERROR!
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:18:16' prior: 50655703!
add: aNewCustomer 
	session persist: aNewCustomer .! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:25:40'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:25:41'!
ERROR!
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:26:09'!
selectAllOfType: Customer 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:26:26' prior: 50655759!
selectAllOfType: aType 
	^session selectAllOfType: aType! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/22/2023 18:26:40' prior: 50650466 overrides: 16961402!
tearDown

	
	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/22/2023 18:26:51' prior: 50655770 overrides: 16961402!
tearDown

	"session commit.
	session close."
	! !
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:27:24'!
close
	session commit.
	session close! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/22/2023 18:27:31' prior: 50655775 overrides: 16961402!
tearDown
	session close
	"session commit.
	session close."
	! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:27:35'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:27:35'!
ERROR!
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:27:51'!
customerWithIdType: anIdType idNumber: anIdNumber 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:28:47' prior: 50655795!
customerWithIdType: anIdType idNumber: anIdNumber 
	(session 
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:28:51'!
ERROR!
!PersistentCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 18:29:18' prior: 50655801!
customerWithIdType: anIdType idNumber: anIdNumber 
	^(session 
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:29:26'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 18:29:31'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'mm uu 11/22/2023 18:29:31'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'mm uu 11/22/2023 18:29:31'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'mm uu 11/22/2023 18:29:32'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'mm uu 11/22/2023 18:29:32'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'mm uu 11/22/2023 18:29:32'!
PASSED!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'mm uu 11/22/2023 18:29:32'!
PASSED!

Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'mm uu 11/22/2023 18:29:43'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 19:26:24'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'mm uu 11/22/2023 19:26:24'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'mm uu 11/22/2023 19:26:25'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'mm uu 11/22/2023 19:26:25'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'mm uu 11/22/2023 19:26:25'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'mm uu 11/22/2023 19:26:26'!
PASSED!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'mm uu 11/22/2023 19:26:26'!
PASSED!

Object subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'mm uu 11/22/2023 19:26:43'!
Object subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #CustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerSystem category: 'CustomerImporter' stamp: 'mm uu 11/22/2023 19:26:53'!
Object subclass: #CustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerSystem category: 'CustomerImporter' stamp: 'mm uu 11/22/2023 19:27:08'!
Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'mm uu 11/22/2023 19:27:12'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'mm uu 11/22/2023 19:27:14'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TransientCustomerSystem methodsFor: 'no messages' stamp: 'mm uu 11/22/2023 19:27:56' overrides: 16920235!
initialize
	session := OrderedCollection new! !
!TransientCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 19:29:47'!
add: aNewCustomer
	session add: aNewCustomer! !
!TransientCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 19:31:15'!
close! !
!TransientCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 19:32:34'!
customerWithIdType: anIdType idNumber: anIdNumber 
	^session select: [:aCustomer | 
		aCustomer identificationType = anIdType and: 
		[aCustomer identificationNumber = anIdNumber ]] ! !
!TransientCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 19:32:56' prior: 50655972!
customerWithIdType: anIdType idNumber: anIdNumber 
	^session copy! !
!TransientCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 19:32:34' prior: 50655981!
customerWithIdType: anIdType idNumber: anIdNumber 
	^session select: [:aCustomer | 
		aCustomer identificationType = anIdType and: 
		[aCustomer identificationNumber = anIdNumber ]] ! !
!TransientCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 19:33:25'!
selectAllOfType: aType 
	^session copy! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/22/2023 19:33:37' prior: 50655730 overrides: 16961394!
setUp

	session := TransientCustomerSystem new.
"	session beginTransaction."
! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 19:33:43'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 19:33:43'!
ERROR!
!TransientCustomerSystem methodsFor: 'operations' stamp: 'mm uu 11/22/2023 19:34:44' prior: 50655987!
customerWithIdType: anIdType idNumber: anIdNumber 
	^(session select: [:aCustomer | 
		aCustomer identificationType = anIdType and: 
		[aCustomer identificationNumber = anIdNumber ]] ) first! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/22/2023 19:34:47'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'mm uu 11/22/2023 19:34:47'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'mm uu 11/22/2023 19:34:47'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'mm uu 11/22/2023 19:34:47'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'mm uu 11/22/2023 19:34:47'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'mm uu 11/22/2023 19:34:47'!
PASSED!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'mm uu 11/22/2023 19:34:47'!
PASSED!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/22/2023 19:39:17' prior: 50656001 overrides: 16961394!
setUp

	session := TransientCustomerSystem new.
! !

----SNAPSHOT----(22 November 2023 19:40:04) CuisUniversity-5981.image priorSource: 10365012!

----SNAPSHOT----(22 November 2023 19:40:06) CuisUniversity-5981.image priorSource: 10380819!

----STARTUP---- (23 November 2023 16:07:24) as C:\Users\Manuel Urkovich\Facu\Inge1\customerImporter\windows64\CuisUniversity-5981.image!


!testRun: #ImportTest #test01Import stamp: 'mm uu 11/23/2023 16:07:37'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'mm uu 11/23/2023 16:07:37'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'mm uu 11/23/2023 16:07:37'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'mm uu 11/23/2023 16:07:37'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'mm uu 11/23/2023 16:07:37'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'mm uu 11/23/2023 16:07:37'!
PASSED!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'mm uu 11/23/2023 16:07:37'!
PASSED!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/23/2023 16:08:01' prior: 50656047 overrides: 16961394!
setUp

	session := self buildEnv
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/23/2023 16:08:46'!
buildEnv
	self env = 'dev' ifTrue: [^8].
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/23/2023 16:08:53'!
env
	'dev'
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/23/2023 16:09:12' prior: 50656092!
buildEnv
	self env = 'dev' ifTrue: [^TransientCustomerSystem new.].
! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/23/2023 16:09:17'!
ERROR!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'mm uu 11/23/2023 16:09:17'!
ERROR!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'mm uu 11/23/2023 16:09:17'!
ERROR!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'mm uu 11/23/2023 16:09:17'!
FAILURE!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'mm uu 11/23/2023 16:09:17'!
FAILURE!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'mm uu 11/23/2023 16:09:17'!
ERROR!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'mm uu 11/23/2023 16:09:17'!
ERROR!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/23/2023 16:09:39' prior: 50656096!
env
	^'dev'
! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/23/2023 16:09:41'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'mm uu 11/23/2023 16:09:41'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'mm uu 11/23/2023 16:09:41'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'mm uu 11/23/2023 16:09:41'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'mm uu 11/23/2023 16:09:41'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'mm uu 11/23/2023 16:09:41'!
PASSED!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'mm uu 11/23/2023 16:09:41'!
PASSED!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/23/2023 16:09:57' prior: 50656100!
buildEnv
	self env = 'dev' ifTrue: [^TransientCustomerSystem new.].
	self env = 'prod' ifTrue: [].
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/23/2023 16:10:13' prior: 50656160!
buildEnv
	self env = 'dev' ifTrue: [^TransientCustomerSystem new.].
	self env = 'prod' ifTrue: [^PersistentCustomerSystem new].
! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/23/2023 16:10:15'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'mm uu 11/23/2023 16:10:15'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'mm uu 11/23/2023 16:10:15'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'mm uu 11/23/2023 16:10:15'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'mm uu 11/23/2023 16:10:15'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'mm uu 11/23/2023 16:10:15'!
PASSED!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'mm uu 11/23/2023 16:10:15'!
PASSED!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'mm uu 11/23/2023 16:10:18' prior: 50656131!
env
	^'prod'
! !

!testRun: #ImportTest #test01Import stamp: 'mm uu 11/23/2023 16:10:20'!
PASSED!

!testRun: #ImportTest #test02CannoImportCustomerRecordWithLessThan5Records stamp: 'mm uu 11/23/2023 16:10:20'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerRecordWithMoreThan5Records stamp: 'mm uu 11/23/2023 16:10:20'!
PASSED!

!testRun: #ImportTest #test04CannotImportAddressRecordWithMoreThan6Records stamp: 'mm uu 11/23/2023 16:10:21'!
PASSED!

!testRun: #ImportTest #test05CannotImportAddressRecordWithLessThan6Records stamp: 'mm uu 11/23/2023 16:10:21'!
PASSED!

!testRun: #ImportTest #test06CannotImportRecordWhichIsNotACustomerNorAnAddress stamp: 'mm uu 11/23/2023 16:10:21'!
PASSED!

!testRun: #ImportTest #test07CannotImportAddressRecordWithNoCustomer stamp: 'mm uu 11/23/2023 16:10:21'!
PASSED!

----SNAPSHOT----(23 November 2023 16:10:24) CuisUniversity-5981.image priorSource: 10380913!