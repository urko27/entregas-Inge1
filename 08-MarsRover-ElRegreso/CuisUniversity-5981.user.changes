

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (26 October 2023 20:21:28) as C:\Users\Manuel Urkovich\Facu\Inge1\MarsRover\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\Manuel Urkovich\Facu\Inge1\MarsRover\windows64\MarsRover-WithHeading.st----!

TestCase subclass: #LogsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogsTest category: 'MarsRover-WithHeading' stamp: 'mm uu 10/26/2023 20:39:33'!
TestCase subclass: #LogsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogsTest methodsFor: 'no messages' stamp: 'mm uu 10/26/2023 20:40:32'!
holiwi! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 20:40:52' prior: 50650825!
holiwi
	self assert: ':)' equals: ':)'! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 20:40:58'!
test01
	self assert: ':)' equals: ':)'! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 20:40:59'!
PASSED!

!methodRemoval: LogsTest #holiwi stamp: 'mm uu 10/26/2023 20:41:02'!
holiwi
	self assert: ':)' equals: ':)'!

	TranscriptWindow openTranscript !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 20:42:48' prior: 50650833!
test01
	self assert: ':)' equals: ':)'.
	TranscriptWindow printOn: 'asd'! !

	TranscriptWindow printOn: 'asd'!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 20:42:59' prior: 50650845!
test01
	self assert: ':)' equals: ':)'.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 20:43:03'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 20:43:03'!
PASSED!

!classDefinition: #Logger category: 'MarsRover-WithHeading' stamp: 'mm uu 10/26/2023 21:07:32'!
Object subclass: #Logger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 21:07:26' prior: 50650852!
test01
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: MarsRover.
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:07:38'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:07:38'!
ERROR!
!Logger class methodsFor: 'instance creation' stamp: 'mm uu 10/26/2023 21:07:45'!
for: MarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: MarsRover ! !
!Logger class methodsFor: 'instance creation' stamp: 'mm uu 10/26/2023 21:07:51' prior: 50650883!
for: MarsRover
	^self new initializeFor: MarsRover ! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:07:55'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:07:55'!
ERROR!

!classDefinition: #Logger category: 'MarsRover-WithHeading' stamp: 'mm uu 10/26/2023 21:08:02'!
Object subclass: #Logger
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Logger methodsFor: 'initialization' stamp: 'mm uu 10/26/2023 21:08:02'!
initializeFor: MarsRover 
	self shouldBeImplemented.
	marsRover := MarsRover.! !
!Logger methodsFor: 'initialization' stamp: 'mm uu 10/26/2023 21:08:04' prior: 50650907!
initializeFor: MarsRover 
	marsRover := MarsRover.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:08:11'!
ERROR!
!Logger methodsFor: 'logs' stamp: 'mm uu 10/26/2023 21:08:19'!
showLogs
	self shouldBeImplemented.! !
!Logger methodsFor: 'logs' stamp: 'mm uu 10/26/2023 21:08:24' prior: 50650919!
showLogs
	^OrderedCollection new.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:08:28'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:08:28'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 21:09:02'!
test02
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: MarsRover.
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:09:04'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:09:04'!
ERROR!
!Logger methodsFor: 'initialization' stamp: 'mm uu 10/26/2023 21:09:31' prior: 50650913!
initializeFor: MarsRover 
	marsRover := MarsRover.
	MarsRover attach: self.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:09:36'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:09:36'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:09:37'!
ERROR!
!MarsRover class methodsFor: 'observers' stamp: 'mm uu 10/26/2023 21:09:46'!
attach: aLogger 
	self shouldBeImplemented.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'mm uu 10/26/2023 21:10:02'!
MarsRover class
	instanceVariableNames: 'headings observers'!
!MarsRover class methodsFor: 'observers' stamp: 'mm uu 10/26/2023 21:10:00' prior: 50650960!
attach: aLogger 
	observers add: aLogger! !
!MarsRover methodsFor: 'initialization' stamp: 'mm uu 10/26/2023 21:10:32' prior: 50650515!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:10:54'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:10:55'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:10:56'!
ERROR!

!methodRemoval: MarsRover class #attach: stamp: 'mm uu 10/26/2023 21:11:48'!
attach: aLogger 
	observers add: aLogger!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'mm uu 10/26/2023 21:11:56'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'mm uu 10/26/2023 21:11:55'!
attach: aLogger 
	observers add: aLogger! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:12:01'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:12:01'!
ERROR!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 21:12:14' prior: 50650869!
test01
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 21:12:17' prior: 50650932!
test02
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:12:19'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:12:19'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'mm uu 10/26/2023 21:12:48' prior: 50650975!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	observers := OrderedCollection new.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:12:52'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:12:52'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:12:52'!
ERROR!
!MarsRover methodsFor: 'command processing' stamp: 'mm uu 10/26/2023 21:14:21' prior: 50650591!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand. self notify: aCommand]
! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:14:33'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:14:48'!
ERROR!
!MarsRover methodsFor: 'command processing' stamp: 'mm uu 10/26/2023 21:15:11' prior: 50651050!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand. self notifyObservers: aCommand]
! !

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:15:14'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:15:14'!
ERROR!
!MarsRover methodsFor: 'observers' stamp: 'mm uu 10/26/2023 21:15:24'!
notifyObservers: aCommand 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'observers' stamp: 'mm uu 10/26/2023 21:17:57' prior: 50651074!
notifyObservers: aCommand 
	observers do: [:anObserver | anObserver update]! !

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:18:01'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:18:01'!
ERROR!
!Logger methodsFor: 'logs' stamp: 'mm uu 10/26/2023 21:18:06'!
update
	self shouldBeImplemented.! !
!Logger methodsFor: 'logs' stamp: 'mm uu 10/26/2023 21:18:15' prior: 50651088!
update
	! !

!classDefinition: #Logger category: 'MarsRover-WithHeading' stamp: 'mm uu 10/26/2023 21:19:24'!
Object subclass: #Logger
	instanceVariableNames: 'marsRover logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Logger methodsFor: 'logs' stamp: 'mm uu 10/26/2023 21:19:23' prior: 50651092!
update
	logs add: marsRover position! !
!Logger methodsFor: 'logs' stamp: 'mm uu 10/26/2023 21:19:31' prior: 50650923!
showLogs
	^logs! !
!Logger methodsFor: 'initialization' stamp: 'mm uu 10/26/2023 21:19:40' prior: 50650948!
initializeFor: MarsRover 
	marsRover := MarsRover.
	logs := OrderedCollection new.
	MarsRover attach: self.! !

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:19:45'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:19:46'!
ERROR!
!MarsRover methodsFor: 'position' stamp: 'mm uu 10/26/2023 21:20:01'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'position' stamp: 'mm uu 10/26/2023 21:20:03' prior: 50651122!
position
	^position! !

!testRun: #LogsTest #test02 stamp: 'mm uu 10/26/2023 21:20:06'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/26/2023 21:20:10'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/26/2023 21:29:30'!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test03 stamp: 'mm uu 10/26/2023 21:29:32'!
FAILURE!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/26/2023 21:29:32'!
FAILURE!

----SNAPSHOT----(26 October 2023 21:54:29) CuisUniversity-5981.image priorSource: 10197292!

----SNAPSHOT----(26 October 2023 21:57:47) CuisUniversity-5981.image priorSource: 10223985!

----STARTUP---- (29 October 2023 17:59:17) as C:\Users\Manuel Urkovich\Facu\Inge1\MarsRover\windows64\CuisUniversity-5981.image!


!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 17:59:26'!
FAILURE!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 17:59:26'!
FAILURE!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 17:59:36'!
PASSED!

Object subclass: #Position
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Position category: 'MarsRover-WithHeading' stamp: 'mm uu 10/29/2023 18:03:48'!
Object subclass: #Position
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'mm uu 10/29/2023 18:04:21' prior: 50651035!
initializeAt: aPosition heading: aHeadingType

	position := Position for: aPosition.
	head := aHeadingType for: self .
	
	observers := OrderedCollection new.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:04:24'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:04:26'!
ERROR!
!Position class methodsFor: 'instance creation' stamp: 'mm uu 10/29/2023 18:04:30'!
for: aPosition 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aPosition ! !
!Position class methodsFor: 'instance creation' stamp: 'mm uu 10/29/2023 18:04:36' prior: 50651247!
for: aPosition 
	^self new initializeFor: aPosition ! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:04:41'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:04:41'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:04:41'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:04:41'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:04:41'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:04:41'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:04:43'!
ERROR!
!Position methodsFor: 'initialization' stamp: 'mm uu 10/29/2023 18:04:50'!
initializeFor: aPosition 
	self shouldBeImplemented.
	position := aPosition.! !
!Position methodsFor: 'initialization' stamp: 'mm uu 10/29/2023 18:04:54' prior: 50651318!
initializeFor: aPosition 
	position := aPosition.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:05:34'!
FAILURE!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:05:34'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:05:34'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:05:34'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:05:34'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:05:34'!
FAILURE!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:05:34'!
FAILURE!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:05:34'!
FAILURE!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:05:34'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:05:34'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:05:34'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:05:34'!
FAILURE!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:05:34'!
FAILURE!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:05:34'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:05:34'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:05:37'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'mm uu 10/29/2023 18:06:12' prior: 50650545!
isAt: aPosition heading: aHeadingType

	^position = aPosition value and: [ head isHeading: aHeadingType ]! !
!Position methodsFor: 'initialization' stamp: 'mm uu 10/29/2023 18:06:21' overrides: 16902254!
value
	^position! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:06:26'!
FAILURE!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:06:26'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:06:26'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:06:26'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:06:26'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:06:26'!
FAILURE!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:06:26'!
FAILURE!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:06:27'!
FAILURE!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:06:27'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:06:27'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:06:27'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:06:27'!
FAILURE!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:06:27'!
FAILURE!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:06:27'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:06:27'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:06:28'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'mm uu 10/29/2023 18:07:20' prior: 50651388!
isAt: aPosition heading: aHeadingType

	^position = (aPosition value) and: [ head isHeading: aHeadingType ]! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:07:25'!
FAILURE!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:07:25'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:07:25'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:07:25'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:07:25'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:07:25'!
FAILURE!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:07:25'!
FAILURE!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:07:25'!
FAILURE!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:07:25'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:07:25'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:07:25'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:07:25'!
FAILURE!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:07:25'!
FAILURE!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:07:25'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:07:25'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:07:28'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:07:37'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:07:42'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'mm uu 10/29/2023 18:10:06' prior: 50651458!
isAt: aPosition heading: aHeadingType

	^position value = aPosition and: [ head isHeading: aHeadingType ]! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:10:08'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:10:08'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:10:08'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:10:08'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:10:08'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:10:08'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:10:08'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:10:08'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:10:08'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:10:08'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:10:08'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:10:08'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:10:08'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:10:08'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:10:08'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:10:13'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 18:11:36' prior: 50650579!
moveNorth
	
	"position := position + (0@1)."
	position updateValueWith: (position value) + 0@1! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:11:41'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:11:41'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:11:41'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:11:41'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:11:41'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:11:41'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:11:41'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:11:41'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:11:41'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:11:41'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:11:41'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:11:41'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:11:41'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:11:41'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:11:41'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:11:42'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 18:12:08' prior: 50651596!
moveNorth
	
	"position := position + (0@1)."
	position updateValueWith: (position value) + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 18:12:20' prior: 50651662!
moveNorth
	
	"position := position + (0@1)."
	position updateValueWith: ((position value) + 0@1)! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:12:22'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:12:22'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:12:22'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:12:22'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:12:22'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:12:22'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:12:22'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:12:22'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:12:22'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:12:22'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:12:22'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:12:22'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:12:22'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:12:22'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:12:22'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:12:23'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 18:12:47' prior: 50651668!
moveNorth
	
	"position := position + (0@1)."
	position updateValueWith: ((position value) + (0@1))! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:12:50'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:12:50'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:12:50'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:12:50'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:12:50'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:12:50'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:12:50'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:12:50'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:12:50'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:12:50'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:12:50'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:12:50'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:12:50'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:12:50'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:12:50'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:12:51'!
ERROR!
!Position methodsFor: 'update' stamp: 'mm uu 10/29/2023 18:13:00'!
updateValueWith: aRenameMe1 
	self shouldBeImplemented.! !
!Position methodsFor: 'update' stamp: 'mm uu 10/29/2023 18:13:21' prior: 50651799!
updateValueWith: aValue 
	position := aValue! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:13:27'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:13:27'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:13:27'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:13:27'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:13:27'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:13:27'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:13:27'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:13:27'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:13:27'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:13:27'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:13:27'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:13:27'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:13:27'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:13:27'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:13:27'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:13:28'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 18:13:40' prior: 50651734!
moveNorth
	position updateValueWith: ((position value) + (0@1))! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:13:42'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:13:42'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:13:42'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:13:42'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:13:42'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:13:42'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:13:42'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:13:42'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:13:42'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:13:42'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:13:42'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:13:42'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:13:42'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:13:42'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:13:42'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 18:13:47' prior: 50651868!
moveNorth
	position updateValueWith: (position value) + (0@1)! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:13:49'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:13:49'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:13:49'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:13:49'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:13:49'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:13:49'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:13:49'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:13:49'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:13:49'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:13:49'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:13:49'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:13:49'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:13:49'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:13:49'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:13:49'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 18:14:10' prior: 50650583!
moveSouth
	position updateValueWith: (position value) + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 18:14:29' prior: 50650587!
moveWest
	position updateValueWith: (position value) + (-1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 18:14:44' prior: 50650571!
moveEast
	position updateValueWith: (position value) + (1@0)! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:14:45'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:14:45'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:14:45'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:14:45'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:14:45'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:14:45'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:14:46'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:14:46'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:14:46'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:14:46'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:14:46'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:14:46'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:14:46'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:14:46'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:14:46'!
PASSED!
!Position methodsFor: 'update' stamp: 'mm uu 10/29/2023 18:15:28' prior: 50651804!
updateValueWith: aValue 
	position := aValue.
	self notifyAll.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:15:40'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:15:40'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:15:40'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:15:40'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:15:40'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:15:40'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:15:40'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:15:40'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:15:40'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:15:40'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:15:40'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:15:40'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:15:40'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:15:40'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:15:40'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:15:42'!
ERROR!
!Position methodsFor: 'notify' stamp: 'mm uu 10/29/2023 18:15:48'!
notifyAll
	self shouldBeImplemented.! !

!classDefinition: #Position category: 'MarsRover-WithHeading' stamp: 'mm uu 10/29/2023 18:16:41'!
Object subclass: #Position
	instanceVariableNames: 'position observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Position methodsFor: 'notify' stamp: 'mm uu 10/29/2023 18:16:39' prior: 50652125!
notifyAll
	observers do: [:observer | observer notify ].! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 18:40:21' prior: 50651009!
test01
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger trackPositionChanges.
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:40:27'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:40:27'!
ERROR!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:40:27'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:40:29'!
ERROR!
!Logger methodsFor: 'logs' stamp: 'mm uu 10/29/2023 18:40:32'!
trackPositionChanges
	self shouldBeImplemented.! !
!Logger methodsFor: 'logs' stamp: 'mm uu 10/29/2023 18:41:31' prior: 50652161!
trackPositionChanges
	marsRover subscribeTo: #position with: [:aPosition | self update: aPosition]! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:41:39'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:41:39'!
ERROR!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:41:39'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:41:40'!
ERROR!
!MarsRover methodsFor: 'observers' stamp: 'mm uu 10/29/2023 18:41:49'!
subscribeTo: aRenameMe1 with: aRenameMe2 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'observers' stamp: 'mm uu 10/29/2023 18:43:37' prior: 50652181!
subscribeTo: instanceVariableName with: aBlock
	(self instVarNamed: instanceVariableName) addObserverWith: aBlock! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:43:48'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:43:48'!
ERROR!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:43:48'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:43:49'!
ERROR!
!Position methodsFor: 'update' stamp: 'mm uu 10/29/2023 18:43:55'!
addObserverWith: aBlock 
	self shouldBeImplemented.! !
!Position methodsFor: 'update' stamp: 'mm uu 10/29/2023 18:44:02' prior: 50652201!
addObserverWith: aBlock 
	observers add: aBlock.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:44:10'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:44:10'!
ERROR!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:44:10'!
ERROR!
!Position methodsFor: 'initialization' stamp: 'mm uu 10/29/2023 18:44:24' prior: 50651324!
initializeFor: aPosition 
	position := aPosition.
	observers := OrderedCollection new.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:44:28'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:44:28'!
FAILURE!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:44:28'!
FAILURE!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:44:30'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 18:44:58' prior: 50651019!
test02
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger trackPositionChanges.
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:45:01'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:45:01'!
ERROR!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:45:01'!
FAILURE!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:45:02'!
ERROR!
!Position methodsFor: 'notify' stamp: 'mm uu 10/29/2023 18:46:07' prior: 50652137!
notifyAll
	observers do: [:observerBlock | ].! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:46:11'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:46:11'!
FAILURE!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:46:11'!
FAILURE!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:46:15'!
FAILURE!
!Position methodsFor: 'notify' stamp: 'mm uu 10/29/2023 18:47:17' prior: 50652255!
notifyAll
	observers do: [:observerBlock | observerBlock value].! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:47:22'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:47:22'!
ERROR!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:47:22'!
FAILURE!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:47:24'!
ERROR!
!Position methodsFor: 'notify' stamp: 'mm uu 10/29/2023 18:47:58' prior: 50652269!
notifyAll
	observers do: [:observerBlock | observerBlock value: position].! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:48:08'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:48:08'!
FAILURE!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:48:08'!
FAILURE!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:48:11'!
FAILURE!
!MarsRover methodsFor: 'command processing' stamp: 'mm uu 10/29/2023 18:49:28' prior: 50651062!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand]
! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:49:35'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:49:35'!
ERROR!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:49:35'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:49:37'!
ERROR!
!Logger methodsFor: 'logs' stamp: 'mm uu 10/29/2023 18:50:58'!
testttt
	logs add: marsRover position! !
!Logger methodsFor: 'logs' stamp: 'mm uu 10/29/2023 18:51:07' prior: 50652166!
trackPositionChanges
	marsRover subscribeTo: #position with: [:aPosition | self testttt: aPosition]! !
!Logger methodsFor: 'logs' stamp: 'mm uu 10/29/2023 18:51:24'!
testttt: aPosition
	logs add: aPosition ! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:51:29'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:51:29'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:51:29'!
ERROR!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:51:29'!
ERROR!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 18:51:41' prior: 50651135!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger trackPositionChanges .
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:51:47'!
PASSED!

!methodRemoval: Logger #testttt: stamp: 'mm uu 10/29/2023 18:52:01'!
testttt: aPosition
	logs add: aPosition !

!methodRemoval: Logger #testttt stamp: 'mm uu 10/29/2023 18:52:01'!
testttt
	logs add: marsRover position!
!Logger methodsFor: 'logs' stamp: 'mm uu 10/29/2023 18:52:09' overrides: 16903929!
update: aPosition
	logs add: aPosition ! !

!methodRemoval: Logger #update stamp: 'mm uu 10/29/2023 18:52:13'!
update
	logs add: marsRover position!
!Logger methodsFor: 'logs' stamp: 'mm uu 10/29/2023 18:52:19' prior: 50652317!
trackPositionChanges
	marsRover subscribeTo: #position with: [:aPosition | self update: aPosition]! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:52:22'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:52:22'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:52:22'!
PASSED!
!Logger methodsFor: 'logs' stamp: 'mm uu 10/29/2023 18:56:45'!
trackChangesFor: aVariableToObserve
	marsRover subscribeTo: aVariableToObserve with: [:aPosition | self update: aPosition]! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 18:57:06' prior: 50652142!
test01
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger trackChangesFor: #position.
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:57:08'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 18:57:15' prior: 50652234!
test02
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger trackChangesFor: #position.
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 18:57:21' prior: 50652337!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger trackChangesFor: #position.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 18:57:28'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 18:57:30'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 18:57:30'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 18:57:30'!
PASSED!
!Logger methodsFor: 'initialization' stamp: 'mm uu 10/29/2023 19:04:58' prior: 50651111!
initializeFor: MarsRover 
	marsRover := MarsRover.
	logs := OrderedCollection new.! !
!Logger methodsFor: 'logs' stamp: 'mm uu 10/29/2023 19:05:28'!
observeChangesFor: aVariableToObserve
	marsRover subscribeTo: aVariableToObserve with: [:aPosition | self update: aPosition]! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:05:28' prior: 50652385!
test01
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:05:28' prior: 50652398!
test02
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:05:28' prior: 50652411!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!methodRemoval: Logger #trackChangesFor: stamp: 'mm uu 10/29/2023 19:05:28'!
trackChangesFor: aVariableToObserve
	marsRover subscribeTo: aVariableToObserve with: [:aPosition | self update: aPosition]!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:05:41'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:05:45'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:05:45'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:05:45'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:06:43' prior: 50652578!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #direction.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:06:53' prior: 50652660!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:06:56'!
test04
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #direction.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:08:43' prior: 50652686!
test04
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #direction.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs seconds equals: 'MarsRoverHeadingNorth'.
	self assert: logger showLogs size equals: 2.! !

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:08:44'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:08:44'!
ERROR!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:09:03' prior: 50652700!
test04
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs seconds equals: 'MarsRoverHeadingNorth'.
	self assert: logger showLogs size equals: 2.! !

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:09:04'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:09:04'!
ERROR!

Object subclass: #MarsRoverHeadingProxy
	instanceVariableNames: 'observers head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingProxy category: 'MarsRover-WithHeading' stamp: 'mm uu 10/29/2023 19:10:12'!
Object subclass: #MarsRoverHeadingProxy
	instanceVariableNames: 'observers head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingProxy methodsFor: 'no messages' stamp: 'mm uu 10/29/2023 19:10:37' overrides: 16902254!
value
	^head! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:10:42'!
PASSED!

!methodRemoval: MarsRover #notifyObservers: stamp: 'mm uu 10/29/2023 19:11:15'!
notifyObservers: aCommand 
	observers do: [:anObserver | anObserver update]!
!MarsRover methodsFor: 'initialization' stamp: 'mm uu 10/29/2023 19:12:38' prior: 50651180!
initializeAt: aPosition heading: aHeadingType

	position := Position for: aPosition.
	head := MarsRoverHeadingProxy for: (aHeadingType for: self) .
	
	observers := OrderedCollection new.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:12:42'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:12:43'!
ERROR!
!MarsRoverHeadingProxy class methodsFor: 'instance creation' stamp: 'mm uu 10/29/2023 19:12:49'!
for: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aRenameMe1 ! !
!MarsRoverHeadingProxy class methodsFor: 'instance creation' stamp: 'mm uu 10/29/2023 19:12:58' prior: 50652888!
for: aHead
	^self new initializeFor: aHead! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:13:00'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:13:02'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'initialization' stamp: 'mm uu 10/29/2023 19:13:06'!
initializeFor: aHead 
	self shouldBeImplemented.
	head := aHead.! !
!MarsRoverHeadingProxy methodsFor: 'initialization' stamp: 'mm uu 10/29/2023 19:13:10' prior: 50652960!
initializeFor: aHead 
	head := aHead.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:13:15'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:13:15'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:13:17'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'mm uu 10/29/2023 19:13:31' prior: 50651530!
isAt: aPosition heading: aHeadingType

	^position value = aPosition and: [ head value isHeading: aHeadingType ]! !

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:13:34'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:13:34'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:13:34'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:13:35'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:14:02'!
moveForward
	self shouldBeImplemented.! !
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:14:10' prior: 50653096!
moveForward
	head moveForward ! !

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:14:13'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:14:13'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:14:13'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:14:13'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:13'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:13'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:13'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:14:13'!
ERROR!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:14:13'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:14:13'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:14:13'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:14:13'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:14:13'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:14:13'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:14:13'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:15'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:14:18'!
moveBackward
	self shouldBeImplemented.! !
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:14:23' prior: 50653165!
moveBackward
	head moveBackward ! !

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:25'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:14:25'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:14:25'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:14:25'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:14:25'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:14:25'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:27'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:14:33'!
rotateRight
	self shouldBeImplemented.! !
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:14:39' prior: 50653234!
rotateRight
	head rotateRight ! !

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:14:42'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:14:42'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:14:42'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:14:42'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:14:42'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:14:44'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:15:02'!
rotateLeft
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:15:40' prior: 50650567!
moveBackward
	
	head value moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:15:46' prior: 50650575!
moveForward
	
	head value moveForward! !
!MarsRover methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:15:58' prior: 50650537!
rotateLeft
	
	head value rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:16:02' prior: 50650541!
rotateRight
	
	head value rotateRight! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:16:28'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:16:37'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:16:39'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:16:40'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:16:41'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:16:41'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:16:49'!
addObserverWith: aBlock 
	self shouldBeImplemented.! !
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:17:09' prior: 50653392!
addObserverWith: aBlock 
	observers add: aBlock! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:19:28'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:19:28'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:19:28'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:19:28'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:19:28'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'initialization' stamp: 'mm uu 10/29/2023 19:19:51' prior: 50652966!
initializeFor: aHead 
	head := aHead.
	observers := OrderedCollection new! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:19:53'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:19:53'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:19:53'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:19:53'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:19:53'!
ERROR!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:20:01' prior: 50652721!
test04
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'MarsRoverHeadingNorth'.
	self assert: logger showLogs size equals: 2.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:20:08'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:20:08'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:20:08'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:20:08'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:20:08'!
ERROR!

!methodRemoval: MarsRoverHeadingProxy #moveBackward stamp: 'mm uu 10/29/2023 19:20:30'!
moveBackward
	head moveBackward !

!methodRemoval: MarsRoverHeadingProxy #moveForward stamp: 'mm uu 10/29/2023 19:20:31'!
moveForward
	head moveForward !

!methodRemoval: MarsRoverHeadingProxy #rotateRight stamp: 'mm uu 10/29/2023 19:20:33'!
rotateRight
	head rotateRight !

!methodRemoval: MarsRoverHeadingProxy #rotateLeft stamp: 'mm uu 10/29/2023 19:20:35'!
rotateLeft
	self shouldBeImplemented.!
!MarsRover methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:21:46' prior: 50650521!
headEast
	
	head := MarsRoverHeadingProxy for: (MarsRoverHeadingEast for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:22:03' prior: 50650525!
headNorth
	
	head := MarsRoverHeadingProxy for: (MarsRoverHeadingNorth for: self )! !
!MarsRover methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:22:11' prior: 50650529!
headSouth
	
	head := MarsRoverHeadingProxy for: (MarsRoverHeadingSouth for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:22:23' prior: 50650533!
headWest
	
	head := MarsRoverHeadingProxy for: (MarsRoverHeadingWest for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:22:52' prior: 50653474!
headEast
	head updateHeadTo: (MarsRoverHeadingEast for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:23:03' prior: 50653480!
headNorth
	
	head updateHeadTo: (MarsRoverHeadingNorth for: self )! !
!MarsRover methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:23:08' prior: 50653486!
headSouth
	
	head updateHeadTo: (MarsRoverHeadingSouth for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:23:12' prior: 50653492!
headWest
	
	head updateHeadTo: (MarsRoverHeadingWest for: self)! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:24:46'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:24:46'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:24:46'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:24:46'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:24:46'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:24:46'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:24:46'!
ERROR!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:24:46'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:24:46'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:24:46'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:24:46'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:24:46'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:24:46'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:24:46'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:24:46'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:24:48'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:24:53'!
updateHeadTo: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:25:06' prior: 50653578!
updateHeadTo: aHeadValue 
	head := aHeadValue ! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:25:11'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:25:12'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:25:12'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:25:14'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:25:19'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:25:19'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:25:19'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:25:19'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:25:19'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:25:42' prior: 50653584!
updateHeadTo: aHeadValue 
	head := aHeadValue.
	self notifyAll! !
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:26:26'!
notifyAll
	observers do: [:anObserver | anObserver value: head].! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:26:44'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:26:47'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:26:47'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:26:47'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:26:47'!
FAILURE!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:26:48'!
FAILURE!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:27:57' prior: 50653718!
notifyAll
	observers do: [:anObserver | anObserver value: (head directionName)].! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:28:02'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:28:02'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:28:02'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:28:02'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:28:02'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:28:02'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:28:02'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:28:02'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:28:03'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:28:03'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:28:03'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:28:03'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:28:03'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:28:03'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:28:03'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:28:08'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:28:08'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:28:08'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:28:08'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:28:08'!
ERROR!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:28:16'!
directionName
	self shouldBeImplemented.! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:28:21' prior: 50653864!
directionName
	'East'! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:28:30' prior: 50653432!
test04
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs size equals: 2.! !

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:28:32'!
FAILURE!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:28:32'!
FAILURE!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:30:02' prior: 50653791!
notifyAll
	|test|
	test := head directionName .
	observers do: [:anObserver | anObserver value: test].! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:30:04'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:30:04'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:30:04'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:30:04'!
FAILURE!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:30:04'!
FAILURE!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:31:28' prior: 50653869!
directionName
	^'East'! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:31:54'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:31:54'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:31:54'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:31:54'!
PASSED!

----SNAPSHOT----(29 October 2023 19:31:59) CuisUniversity-5981.image priorSource: 10224078!

----SNAPSHOT----(29 October 2023 19:32:01) CuisUniversity-5981.image priorSource: 10312733!

----SNAPSHOT----(29 October 2023 19:32:22) CuisUniversity-5981.image priorSource: 10312826!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:36:18' prior: 50653873!
test04
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'frll'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs third equals: 'North'.
	self assert: logger showLogs fourth equals: 'West'.
	self assert: logger showLogs size equals: 4.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:36:18' prior: 50653933!
test04
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'frll'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs third equals: 'North'.
	self assert: logger showLogs fourth equals: 'West'.
	self assert: logger showLogs size equals: 4.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:28:30' prior: 50653952!
test04
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs size equals: 2.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:36:49'!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'frll'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs third equals: 'North'.
	self assert: logger showLogs fourth equals: 'West'.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:36:50'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:36:52'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:36:53'!
ERROR!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:36:53'!
ERROR!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:36:59'!
directionName
	self shouldBeImplemented.! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:37:02' prior: 50654013!
directionName
	'North'! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:37:07' prior: 50654018!
directionName
	^'North'! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:37:11'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:37:11'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:37:11'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:37:11'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:37:11'!
ERROR!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:37:11'!
ERROR!
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:37:15'!
directionName
	self shouldBeImplemented.! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'mm uu 10/29/2023 19:37:21' prior: 50654039!
directionName
	^'West'! !

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:37:24'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:37:47' prior: 50653986!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'frlll'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs third equals: 'North'.
	self assert: logger showLogs fourth equals: 'West'.
	self assert: logger showLogs fifth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:37:49'!
ERROR!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:37:49'!
ERROR!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:37:53'!
directionName
	self shouldBeImplemented.! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:37:56' prior: 50654075!
directionName
	'South'! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'mm uu 10/29/2023 19:38:00' prior: 50654080!
directionName
	^'South'! !

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:38:02'!
FAILURE!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:38:02'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:38:07' prior: 50654051!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'frlll'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs third equals: 'North'.
	self assert: logger showLogs fourth equals: 'West'.
	self assert: logger showLogs fifth equals: 'South'.
	self assert: logger showLogs size equals: 5.! !

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:38:09'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:38:38'!
test06
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'frlll'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs third equals: 'North'.
	self assert: logger showLogs fourth equals: 'West'.
	self assert: logger showLogs fifth equals: 'South'.
	self assert: logger showLogs size equals: 5.! !

!methodRemoval: LogsTest #test05 stamp: 'mm uu 10/29/2023 19:38:38'!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'frlll'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs third equals: 'North'.
	self assert: logger showLogs fourth equals: 'West'.
	self assert: logger showLogs fifth equals: 'South'.
	self assert: logger showLogs size equals: 5.!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:38:43'!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs size equals: 2.! !

!methodRemoval: LogsTest #test04 stamp: 'mm uu 10/29/2023 19:38:43'!
test04
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs second equals: 'East'.
	self assert: logger showLogs size equals: 2.!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/29/2023 19:38:45'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/29/2023 19:38:45'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/29/2023 19:38:46'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/29/2023 19:38:46'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'mm uu 10/29/2023 19:38:46'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'mm uu 10/29/2023 19:38:49'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:41:14'!
test04
	|marsRover logger logs|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	
	marsRover process: 'frffrb'.
	
	logs := logger showLogs .
	
	self assert: logs first equals: 0@1.
	self assert: logs second equals: 1@1.
	self assert: logs second equals: 2@1.
	self assert: logs second equals: 2@2.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:41:16'!
FAILURE!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:41:16'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/29/2023 19:41:32' prior: 50654250!
test04
	|marsRover logger logs|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	
	marsRover process: 'frffrb'.
	
	logs := logger showLogs .
	
	self assert: logs first equals: 0@1.
	self assert: logs second equals: 1@1.
	self assert: logs third equals: 2@1.
	self assert: logs fourth equals: 2@2.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test04 stamp: 'mm uu 10/29/2023 19:41:33'!
PASSED!

----SNAPSHOT----(29 October 2023 19:41:51) CuisUniversity-5981.image priorSource: 10312919!

----SNAPSHOT----(29 October 2023 19:41:57) CuisUniversity-5981.image priorSource: 10324475!

----STARTUP---- (30 October 2023 01:37:29) as C:\Users\Intekio\Desktop\windows64\CuisUniversity-5981.image!

!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 01:38:25' prior: 50654154!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head.
	
	marsRover process: 'r'.
	
	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 01:38:27'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 01:39:03' prior: 50654115!
test06
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head.
	
	marsRover process: 'rlll'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 01:39:04'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 01:39:51'!
test07
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head.
	
	marsRover process: 'rlllf'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 01:39:52'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 01:41:51'!
test08
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head.
	
	marsRover process: 'rllfb'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: -1@0.
	self assert: logger showLogs fifth equals: 0@0.
	self assert: logger showLogs size equals: 5.! !

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 01:41:52'!
PASSED!

----SNAPSHOT----(30 October 2023 01:43:10) CuisUniversity-5981.image priorSource: 10324568!
!MarsRover methodsFor: 'initialization' stamp: 'h 10/30/2023 01:44:50' prior: 50652820!
initializeAt: aPosition heading: aHeadingType

	position := Position for: aPosition.
	head := MarsRoverHeadingProxy for: (aHeadingType for: self) .! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'h 10/30/2023 01:44:54'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 01:44:56'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 01:44:56'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 01:44:56'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 01:44:56'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 01:44:56'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 01:44:56'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 01:44:56'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 01:44:56'!
PASSED!
!MarsRover methodsFor: 'position' stamp: 'h 10/30/2023 01:46:15' prior: 50651127!
position
	"^position"! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 01:46:17'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 01:46:17'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 01:46:18'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 01:46:18'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 01:46:18'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 01:46:18'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 01:46:18'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 01:46:18'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'h 10/30/2023 01:46:22'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'h 10/30/2023 01:46:22'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'h 10/30/2023 01:46:22'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'h 10/30/2023 01:46:22'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'h 10/30/2023 01:46:22'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'h 10/30/2023 01:46:22'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'h 10/30/2023 01:46:22'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'h 10/30/2023 01:46:22'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'h 10/30/2023 01:46:23'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'h 10/30/2023 01:46:23'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'h 10/30/2023 01:46:23'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'h 10/30/2023 01:46:23'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'h 10/30/2023 01:46:23'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'h 10/30/2023 01:46:23'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'h 10/30/2023 01:46:23'!
PASSED!
!MarsRover methodsFor: 'position' stamp: 'h 10/30/2023 01:46:29' prior: 50654416!
position
	^position! !
!Logger class methodsFor: 'instance creation' stamp: 'h 10/30/2023 02:01:55'!
for: MarsRover observing: colaboratorToObserve with: blocksForUpdates

	|logger|
	logger := self new initializeFor: MarsRover .
	
	(1 to: colaboratorToObserve size) do: [:index |
		logger observeChangesFor: (colaboratorToObserve at:index ) with: (blocksForUpdates at: index)
		].
	
	^logger.
	! !
!Logger methodsFor: 'logs' stamp: 'h 10/30/2023 02:03:22'!
observeChangesFor: aColaborator with: aBlockForUpdates

	marsRover subscribeTo: aColaborator with: aBlockForUpdates .! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:08:06' prior: 50652554!
test01
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #position;yourself.
	blocksForUpdates := OrderedCollection new add: [:aPosition | self update: aPosition ].
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:08:06'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:08:06'!
ERROR!
!Logger class methodsFor: 'instance creation' stamp: 'h 10/30/2023 02:08:31' prior: 50654495!
for: MarsRover observing: colaboratorToObserve with: blocksForUpdates

	|logger|
	logger := self new initializeFor: MarsRover .
	
	(0 to: colaboratorToObserve size-1) do: [:index |
		logger observeChangesFor: (colaboratorToObserve at:index ) with: (blocksForUpdates at: index)
		].
	
	^logger.
	! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:08:36'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:08:36'!
ERROR!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:09:17' prior: 50654514!
test01
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #position;yourself.
	blocksForUpdates := OrderedCollection new add: [:aPosition | self update: aPosition ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:09:19'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:09:19'!
ERROR!
!Logger class methodsFor: 'instance creation' stamp: 'h 10/30/2023 02:09:34' prior: 50654536!
for: MarsRover observing: colaboratorToObserve with: blocksForUpdates

	|logger|
	logger := self new initializeFor: MarsRover .
	
	(1 to: colaboratorToObserve size) do: [:index |
		logger observeChangesFor: (colaboratorToObserve at:index ) with: (blocksForUpdates at: index)
		].
	
	^logger.
	! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:09:36'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:09:36'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:09:36'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:09:37'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:09:37'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:09:37'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:09:37'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:09:37'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:09:40'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:11:32' prior: 50652565!
test02
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #position;yourself.
	blocksForUpdates := OrderedCollection new add: [:aPosition | self update: aPosition ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:11:34'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:11:34'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:11:39'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:11:39'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:12:03'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:12:41'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:12:41'!
ERROR!

observerBlock!

----STARTUP---- (30 October 2023 02:16:29) as C:\Users\Intekio\Desktop\windows64\CuisUniversity-5981.image!


Object subclass: #MarsRover
	instanceVariableNames: 'position head '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'h 10/30/2023 02:16:36'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'h 10/30/2023 02:16:42' prior: 50652820!
initializeAt: aPosition heading: aHeadingType

	position := Position for: aPosition.
	head := MarsRoverHeadingProxy for: (aHeadingType for: self) .! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:16:43'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:16:43'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:16:43'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:16:43'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:16:43'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:16:43'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:16:43'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:16:43'!
PASSED!
!Logger methodsFor: 'logs' stamp: 'h 10/30/2023 02:17:37'!
observeChangesFor: aVariableToObserve with: aBlockForUpdates
	marsRover subscribeTo: aVariableToObserve with: aBlockForUpdates ! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:18:15' prior: 50652554!
test01
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position with: [:aPosition | logger update: aPosition ].
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:18:17'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:18:29' prior: 50652565!
test02
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position with: [:aPosition | logger update: aPosition ].
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:18:30'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:18:33' prior: 50652674!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position with: [:aPosition | logger update: aPosition ].
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:18:38' prior: 50654272!
test04
	|marsRover logger logs|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position with: [:aPosition | logger update: aPosition ].
	
	marsRover process: 'frffrb'.
	
	logs := logger showLogs .
	
	self assert: logs first equals: 0@1.
	self assert: logs second equals: 1@1.
	self assert: logs third equals: 2@1.
	self assert: logs fourth equals: 2@2.
	self assert: logger showLogs size equals: 4.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:18:41' prior: 50654300!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head with: [:aPosition | logger update: aPosition ].
	
	marsRover process: 'r'.
	
	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs size equals: 1.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:18:52' prior: 50654752!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head.
	
	marsRover process: 'r'.
	
	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:18:54'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:18:54'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:18:54'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:18:54'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:18:54'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:18:54'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:18:54'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:18:54'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:20:14' prior: 50654766!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head with: [:aHead | logger update: aHead directionName].
	
	marsRover process: 'r'.
	
	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:20:16'!
ERROR!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:20:17'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:20:52' prior: 50653893!
notifyAll
	observers do: [:observerBlock | observerBlock value: head].! !

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:20:56'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:21:07' prior: 50654315!
test06
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head with: [:aHead | logger update: aHead directionName].
	
	marsRover process: 'rlll'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:21:08'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:21:12' prior: 50654334!
test07
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head with: [:aHead | logger update: aHead directionName].
	
	marsRover process: 'rlllf'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:21:13'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:21:18' prior: 50654353!
test08
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position.
	logger observeChangesFor: #head with: [:aHead | logger update: aHead directionName].
	
	marsRover process: 'rllfb'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: -1@0.
	self assert: logger showLogs fifth equals: 0@0.
	self assert: logger showLogs size equals: 5.! !

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:21:19'!
PASSED!

----STARTUP---- (30 October 2023 02:25:04) as C:\Users\Intekio\Desktop\windows64\CuisUniversity-5981.image!

!Logger class methodsFor: 'instance creation' stamp: 'h 10/30/2023 02:26:52'!
for: marsRover observing: colaboratorsToObserve with: blocksForUpdates

	|logger|
	
	logger := self new initializeFor: marsRover .
	
	logger observeChangesFor: colaboratorsToObserve with: blocksForUpdates .
	
	^logger.! !
!Logger methodsFor: 'logs' stamp: 'h 10/30/2023 02:28:06'!
observeChangesFor: aColaboratorToObserve with: blockForUpdates

	marsRover subscribeTo: aColaboratorToObserve with: blockForUpdates .! !
!Logger class methodsFor: 'instance creation' stamp: 'h 10/30/2023 02:28:57' prior: 50654892!
for: marsRover observing: colaboratorsToObserve with: blocksForUpdates

	|logger|
	
	logger := self new initializeFor: marsRover .
	
	(1 to: colaboratorsToObserve size) do:[:index |
		logger observeChangesFor: (colaboratorsToObserve at: index) with: (blocksForUpdates at:index)
		]
	
	^logger.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:30:39' prior: 50652554!
test01
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #position;yourself.
	blocksForUpdates := OrderedCollection new add: [:aPosition | logger update: aPosition ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	logger observeChangesFor: #position.
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:30:47'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:30:47'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:30:55'!
ERROR!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:30:55'!
ERROR!
!Logger class methodsFor: 'instance creation' stamp: 'h 10/30/2023 02:31:00' prior: 50654909!
for: marsRover observing: colaboratorsToObserve with: blocksForUpdates

	|logger|
	
	logger := self new initializeFor: marsRover .
	
	(1 to: colaboratorsToObserve size) do:[:index |
		logger observeChangesFor: (colaboratorsToObserve at: index) with: (blocksForUpdates at:index)
		].
	
	^logger.! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:31:03'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:31:09' prior: 50654922!
test01
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #position;yourself.
	blocksForUpdates := OrderedCollection new add: [:aPosition | logger update: aPosition ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:31:20'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:31:44' prior: 50652565!
test02
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #position;yourself.
	blocksForUpdates := OrderedCollection new add: [:aPosition | logger update: aPosition ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:31:46'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:31:50' prior: 50652674!
test03
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #position;yourself.
	blocksForUpdates := OrderedCollection new add: [:aPosition | logger update: aPosition ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:31:53'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:32:06' prior: 50654272!
test04
	|marsRover logger colaboratorsToObserve blocksForUpdates logs|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #position;yourself.
	blocksForUpdates := OrderedCollection new add: [:aPosition | logger update: aPosition ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: 'frffrb'.
	
	logs := logger showLogs .
	
	self assert: logs first equals: 0@1.
	self assert: logs second equals: 1@1.
	self assert: logs third equals: 2@1.
	self assert: logs fourth equals: 2@2.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:32:09'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:33:04' prior: 50654300!
test05
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #head;yourself.
	blocksForUpdates := OrderedCollection new add: [:aHead | logger update: aHead ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: 'r'.
	
	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs size equals: 1.! !
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:33:28' prior: 50653893!
notifyAll
	observers do: [:observerBlock | observerBlock value: head].! !

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:33:35'!
FAILURE!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:33:35'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:33:47' prior: 50655055!
test05
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #head;yourself.
	blocksForUpdates := OrderedCollection new add: [:aHead | logger update: aHead directionName ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: 'r'.
	
	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:33:49'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:33:57' prior: 50654315!
test06
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #head;yourself.
	blocksForUpdates := OrderedCollection new add: [:aHead | logger update: aHead directionName ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: 'rlll'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:33:58'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:34:03' prior: 50654334!
test07
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #head;yourself.
	blocksForUpdates := OrderedCollection new add: [:aHead | logger update: aHead directionName ];yourself.
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: 'rlllf'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:35:49' prior: 50654353!
test08
	|marsRover logger colaboratorsToObserve blocksForUpdates|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	colaboratorsToObserve := OrderedCollection new add: #head;yourself.
	colaboratorsToObserve add: #position.
	blocksForUpdates := OrderedCollection new .
	blocksForUpdates add: [:aHead | logger update: aHead directionName ].
	blocksForUpdates add: [:aPosition | logger update: aPosition ].
	logger := Logger for: marsRover observing: colaboratorsToObserve with: blocksForUpdates .
	
	marsRover process: 'rllfb'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: -1@0.
	self assert: logger showLogs fifth equals: 0@0.
	self assert: logger showLogs size equals: 5.! !

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:35:53'!
PASSED!

----STARTUP---- (30 October 2023 02:38:32) as C:\Users\Intekio\Desktop\windows64\CuisUniversity-5981.image!

!Logger methodsFor: 'logs' stamp: 'h 10/30/2023 02:39:05'!
observeChangesFor: aVariableToObserve with: blockForUpdates
	marsRover subscribeTo: aVariableToObserve with: blockForUpdates .! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:39:45' prior: 50652554!
test01
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position with: [:aPosition | logger update: aPosition ].
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:39:46'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:40:00' prior: 50652565!
test02
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position with: [:aPosition | logger update: aPosition ].
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:40:01'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:40:05' prior: 50652674!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position  with: [:aPosition | logger update: aPosition ].
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:40:09' prior: 50654272!
test04
	|marsRover logger logs|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position  with: [:aPosition | logger update: aPosition ].
	
	marsRover process: 'frffrb'.
	
	logs := logger showLogs .
	
	self assert: logs first equals: 0@1.
	self assert: logs second equals: 1@1.
	self assert: logs third equals: 2@1.
	self assert: logs fourth equals: 2@2.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:40:10'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:40:11'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:40:11'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:40:11'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:40:11'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:40:11'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:40:11'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:40:11'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:40:33' prior: 50654300!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head with: [:aHead | logger update: aHead directionName ].
	
	marsRover process: 'r'.
	
	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:40:35'!
ERROR!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:40:35'!
ERROR!
!MarsRoverHeadingProxy methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:40:52' prior: 50653893!
notifyAll
	observers do: [:observerBlock | observerBlock value: head].! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:41:00' prior: 50654315!
test06
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head with: [:aHead | logger update: aHead directionName ].
	
	marsRover process: 'rlll'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:41:04' prior: 50654334!
test07
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #head with: [:aHead | logger update: aHead directionName ].
	
	marsRover process: 'rlllf'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 02:41:23' prior: 50654353!
test08
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesFor: #position with: [:aPosition| logger update: aPosition ].
	logger observeChangesFor: #head with: [:aHead | logger update: aHead directionName ].
	
	marsRover process: 'rllfb'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: -1@0.
	self assert: logger showLogs fifth equals: 0@0.
	self assert: logger showLogs size equals: 5.! !

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:41:24'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:41:25'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:41:25'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:41:25'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:41:25'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:41:25'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:41:26'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:41:26'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:41:26'!
PASSED!

Object subclass: #SubscriptableColaborator
	instanceVariableNames: 'colaborator observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #SubscriptableColaborator category: 'MarsRover-WithHeading' stamp: 'h 10/30/2023 02:43:37'!
Object subclass: #SubscriptableColaborator
	instanceVariableNames: 'colaborator observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

SubscriptableColaborator subclass: #Position
	instanceVariableNames: 'position observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

SubscriptableColaborator subclass: #Position
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Position category: 'MarsRover-WithHeading' stamp: 'h 10/30/2023 02:43:48'!
SubscriptableColaborator subclass: #Position
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!SubscriptableColaborator methodsFor: 'update' stamp: 'h 10/30/2023 02:43:57'!
addObserverWith: aBlock 
	observers add: aBlock.! !

!methodRemoval: Position #addObserverWith: stamp: 'h 10/30/2023 02:43:58'!
addObserverWith: aBlock 
	observers add: aBlock.!
!SubscriptableColaborator methodsFor: 'initialization' stamp: 'h 10/30/2023 02:44:00'!
initializeFor: aPosition 
	position := aPosition.
	observers := OrderedCollection new.! !

!methodRemoval: Position #initializeFor: stamp: 'h 10/30/2023 02:44:00'!
initializeFor: aPosition 
	position := aPosition.
	observers := OrderedCollection new.!
!SubscriptableColaborator methodsFor: 'notify' stamp: 'h 10/30/2023 02:44:03'!
notifyAll
	observers do: [:observerBlock | observerBlock value: position].! !

!methodRemoval: Position #notifyAll stamp: 'h 10/30/2023 02:44:03'!
notifyAll
	observers do: [:observerBlock | observerBlock value: position].!
!SubscriptableColaborator methodsFor: 'update' stamp: 'h 10/30/2023 02:44:06'!
updateValueWith: aValue 
	position := aValue.
	self notifyAll.! !

!methodRemoval: Position #updateValueWith: stamp: 'h 10/30/2023 02:44:06'!
updateValueWith: aValue 
	position := aValue.
	self notifyAll.!
!SubscriptableColaborator methodsFor: 'initialization' stamp: 'h 10/30/2023 02:44:09' overrides: 16902254!
value
	^position! !

!methodRemoval: Position #value stamp: 'h 10/30/2023 02:44:09'!
value
	^position!
!SubscriptableColaborator class methodsFor: 'instance creation' stamp: 'h 10/30/2023 02:44:13'!
for: aPosition 
	^self new initializeFor: aPosition ! !

!methodRemoval: Position class #for: stamp: 'h 10/30/2023 02:44:13'!
for: aPosition 
	^self new initializeFor: aPosition !
!MarsRover methodsFor: 'initialization' stamp: 'h 10/30/2023 02:44:29' prior: 50652820!
initializeAt: aPosition heading: aHeadingType

	position := SubscriptableColaborator for: aPosition.
	head := SubscriptableColaborator for: (aHeadingType for: self) .
	
	observers := OrderedCollection new.! !
!MarsRover methodsFor: 'initialization' stamp: 'h 10/30/2023 02:44:33' prior: 50655173!
initializeAt: aPosition heading: aHeadingType

	position := SubscriptableColaborator for: aPosition.
	head := SubscriptableColaborator for: (aHeadingType for: self) .! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'h 10/30/2023 02:44:37'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:44:39'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:44:39'!
ERROR!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:44:39'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:44:39'!
ERROR!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:44:39'!
ERROR!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:44:39'!
ERROR!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:44:39'!
ERROR!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:44:39'!
ERROR!
!SubscriptableColaborator methodsFor: 'initialization' stamp: 'h 10/30/2023 02:45:09' prior: 50655157 overrides: 16902254!
value
	^colaborator! !
!SubscriptableColaborator methodsFor: 'initialization' stamp: 'h 10/30/2023 02:45:14' prior: 50655126!
initializeFor: aPosition 
	colaborator := aPosition.
	observers := OrderedCollection new.! !
!SubscriptableColaborator methodsFor: 'update' stamp: 'h 10/30/2023 02:45:22' prior: 50655147!
updateValueWith: aValue 
	colaborator = aValue.
	self notifyAll.! !
!SubscriptableColaborator methodsFor: 'notify' stamp: 'h 10/30/2023 02:45:28' prior: 50655137!
notifyAll
	observers do: [:observerBlock | observerBlock value: colaborator ].! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:45:30'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:45:30'!
FAILURE!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:45:30'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:45:30'!
ERROR!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:45:30'!
ERROR!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:45:30'!
ERROR!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:45:30'!
ERROR!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:45:30'!
ERROR!
!SubscriptableColaborator class methodsFor: 'instance creation' stamp: 'h 10/30/2023 02:45:46' prior: 50655164!
for: aColaborato
	^self new initializeFor: aColaborato ! !
!SubscriptableColaborator methodsFor: 'update' stamp: 'h 10/30/2023 02:45:53' prior: 50655232!
updateValueWith: aValue 
	colaborator := aValue.
	self notifyAll.! !
!SubscriptableColaborator methodsFor: 'initialization' stamp: 'h 10/30/2023 02:46:11' prior: 50655226!
initializeFor: aColaborator 
	colaborator := aColaborator .
	observers := OrderedCollection new.! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:46:12'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:46:12'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:46:12'!
ERROR!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:46:13'!
ERROR!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:46:13'!
ERROR!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:46:13'!
ERROR!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:46:13'!
ERROR!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:46:13'!
ERROR!
!SubscriptableColaborator class methodsFor: 'instance creation' stamp: 'h 10/30/2023 02:46:30' prior: 50655262!
for: aColaborator
	^self new initializeFor: aColaborator ! !
!SubscriptableColaborator methodsFor: 'update' stamp: 'h 10/30/2023 02:48:07'!
updateWith: aValue 
	colaborator := aValue.
	self notifyAll.! !

!methodRemoval: SubscriptableColaborator #updateValueWith: stamp: 'h 10/30/2023 02:48:10'!
updateValueWith: aValue 
	colaborator := aValue.
	self notifyAll.!
!MarsRover methodsFor: 'heading' stamp: 'h 10/30/2023 02:48:20' prior: 50653498!
headEast
	head updateWith: (MarsRoverHeadingEast for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'h 10/30/2023 02:48:26' prior: 50653503!
headNorth
	
	head updateWith: (MarsRoverHeadingNorth for: self )! !
!MarsRover methodsFor: 'heading' stamp: 'h 10/30/2023 02:48:30' prior: 50653508!
headSouth
	
	head updateWith: (MarsRoverHeadingSouth for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'h 10/30/2023 02:48:33' prior: 50653513!
headWest
	
	head updateWith: (MarsRoverHeadingWest for: self)! !
!MarsRover methodsFor: 'moving' stamp: 'h 10/30/2023 02:48:43' prior: 50652000!
moveEast
	position updateWith: (position value) + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'h 10/30/2023 02:48:48' prior: 50651929!
moveNorth
	position updateWith: (position value) + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'h 10/30/2023 02:48:51' prior: 50651990!
moveSouth
	position updateWith: (position value) + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'h 10/30/2023 02:48:54' prior: 50651995!
moveWest
	position updateWith: (position value) + (-1@0)! !

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:48:56'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:48:56'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:48:56'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:48:56'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:48:56'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:48:56'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:48:56'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:48:56'!
PASSED!

!classRemoval: #Position stamp: 'h 10/30/2023 02:49:05'!
SubscriptableColaborator subclass: #Position
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingProxy stamp: 'h 10/30/2023 02:49:07'!
Object subclass: #MarsRoverHeadingProxy
	instanceVariableNames: 'observers head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:49:08'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:49:08'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:49:08'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:49:08'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:49:09'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:49:09'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:49:09'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:49:09'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'h 10/30/2023 02:49:10'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'h 10/30/2023 02:49:10'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'h 10/30/2023 02:49:10'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'h 10/30/2023 02:49:11'!
PASSED!

!methodRemoval: MarsRover #position stamp: 'h 10/30/2023 02:49:26'!
position
	^position!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'h 10/30/2023 02:49:28'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'h 10/30/2023 02:49:29'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'h 10/30/2023 02:49:29'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'h 10/30/2023 02:49:29'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'h 10/30/2023 02:49:31'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'h 10/30/2023 02:49:32'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'h 10/30/2023 02:49:32'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 02:49:33'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 02:49:33'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 02:49:33'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 02:49:33'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 02:49:34'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 02:49:34'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 02:49:34'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 02:49:34'!
PASSED!

----SNAPSHOT----(30 October 2023 02:52:09) CuisUniversity-5981.image priorSource: 10327165!

----QUIT----(30 October 2023 02:52:14) CuisUniversity-5981.image priorSource: 10365815!

----STARTUP---- (30 October 2023 03:01:31) as C:\Users\Intekio\Desktop\windows64\CuisUniversity-5981.image!

!SubscriptableColaborator methodsFor: 'update' stamp: 'h 10/30/2023 03:02:37' prior: 50655302!
updateWith: newColaborator 
	colaborator := newColaborator .
	self notifyAll.! !

TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'h 10/30/2023 03:04:31'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowLog category: 'MarsRover-WithHeading' stamp: 'h 10/30/2023 03:13:40'!
Object subclass: #WindowLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!WindowTest methodsFor: 'no messages' stamp: 'h 10/30/2023 03:13:35'!
test01

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #position with: [:aPosition | windowLog update: aPosition].
	
	self assert: windowLog showWindow size equals: 0.! !

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:13:43'!
ERROR!

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:13:43'!
ERROR!
!WindowLog class methodsFor: 'no messages' stamp: 'h 10/30/2023 03:14:02'!
for: MarsRover
	^self new initializeFor: MarsRover ! !

!classDefinition: #WindowLog category: 'MarsRover-WithHeading' stamp: 'h 10/30/2023 03:15:17'!
Object subclass: #WindowLog
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowLog category: 'MarsRover-WithHeading' stamp: 'h 10/30/2023 03:15:19'!
Object subclass: #WindowLog
	instanceVariableNames: 'marsRover window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!WindowLog methodsFor: 'initialization' stamp: 'h 10/30/2023 03:15:16'!
initializeFor: MarsRover 
	marsRover := MarsRover.
	window := OrderedCollection new.! !

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:15:29'!
ERROR!

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:15:29'!
ERROR!
!WindowLog methodsFor: 'logs' stamp: 'h 10/30/2023 03:15:34'!
observeChangesFor: aRenameMe1 with: aRenameMe2 
	self shouldBeImplemented.! !
!WindowLog methodsFor: 'logs' stamp: 'h 10/30/2023 03:16:13' prior: 50655662!
observeChangesFor: aColaboratorName with: blockForUpdates
	
	marsRover subscribeTo: aColaboratorName with: blockForUpdates ! !
!Logger methodsFor: 'logs' stamp: 'h 10/30/2023 03:16:43' prior: 50654891!
observeChangesFor: aColaboratorToObserve with: blockForUpdates
	marsRover subscribeTo: aColaboratorToObserve with: blockForUpdates .! !
!WindowLog methodsFor: 'logs' stamp: 'h 10/30/2023 03:17:19' prior: 50655667!
observeChangesFor: nameOfColaboratorToObserve with: blockForUpdates
	
	marsRover subscribeTo: nameOfColaboratorToObserve with: blockForUpdates ! !
!Logger methodsFor: 'logs' stamp: 'h 10/30/2023 03:17:32' prior: 50655674!
observeChangesFor: nameOfColaboratorToObserve with: blockForUpdates
	marsRover subscribeTo: nameOfColaboratorToObserve with: blockForUpdates .! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:31:47' prior: 50655616!
test01

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #position with: [:aPosition | windowLog updatePosition: aPosition].
	
	self assert: windowLog showWindow size equals: 0.! !
!WindowLog methodsFor: 'logs' stamp: 'h 10/30/2023 03:32:24'!
updatePosition: aPosition! !
!WindowLog methodsFor: 'logs' stamp: 'h 10/30/2023 03:35:25'!
showWindow

	^window ! !

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:35:27'!
PASSED!

1@0 asString!

(1@0) asString!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:37:18'!
test02

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #position with: [:aPosition | windowLog updatePosition: aPosition].
	
	rover process: 'f'.
	
	self assert: windowLog showWindow first equals: '1@0'.
	self assert: windowLog showWindow second equals: ''.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:37:27' prior: 50655696!
test01

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #position with: [:aPosition | windowLog updatePosition: aPosition].
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: ''.! !

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:37:29'!
ERROR!

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:37:29'!
ERROR!
!WindowLog methodsFor: 'initialization' stamp: 'h 10/30/2023 03:37:41' prior: 50655652!
initializeFor: MarsRover 
	marsRover := MarsRover.
	window := OrderedCollection new.
	window add: ''. window add: ''.! !

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:37:44'!
PASSED!
!WindowLog methodsFor: 'logs' stamp: 'h 10/30/2023 03:39:59' prior: 50655707!
updatePosition: aPosition

	window at: 1 put: aPosition asString! !

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:40:00'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'h 10/30/2023 03:40:00'!
FAILURE!

!testRun: #WindowTest #test02 stamp: 'h 10/30/2023 03:40:00'!
FAILURE!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:40:09' prior: 50655717!
test02

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #position with: [:aPosition | windowLog updatePosition: aPosition].
	
	rover process: 'f'.
	
	self assert: windowLog showWindow first equals: '0@1'.
	self assert: windowLog showWindow second equals: ''.! !

!testRun: #WindowTest #test02 stamp: 'h 10/30/2023 03:40:09'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:41:24' prior: 50655732!
test01

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #position with: [:aPosition | (windowLog instVarNamed: #window) at: 1 put: aPosition].
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: ''.! !

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:41:26'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'h 10/30/2023 03:41:36'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:41:41' prior: 50655771!
test02

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #position with: [:aPosition | (windowLog instVarNamed: #window) at: 1 put: aPosition].
	
	rover process: 'f'.
	
	self assert: windowLog showWindow first equals: '0@1'.
	self assert: windowLog showWindow second equals: ''.! !

!testRun: #WindowTest #test02 stamp: 'h 10/30/2023 03:41:42'!
FAILURE!

!testRun: #WindowTest #test02 stamp: 'h 10/30/2023 03:41:42'!
FAILURE!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:41:54' prior: 50655807!
test02

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #position with: [:aPosition | (windowLog instVarNamed: #window) at: 1 put: aPosition asString].
	
	rover process: 'f'.
	
	self assert: windowLog showWindow first equals: '0@1'.
	self assert: windowLog showWindow second equals: ''.! !

!testRun: #WindowTest #test02 stamp: 'h 10/30/2023 03:41:55'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 03:41:55'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'h 10/30/2023 03:41:55'!
PASSED!

!methodRemoval: WindowLog #updatePosition: stamp: 'h 10/30/2023 03:42:22'!
updatePosition: aPosition

	window at: 1 put: aPosition asString!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:43:42'!
test03

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #position with: [:aPosition | (windowLog instVarNamed: #window) at: 1 put: aPosition asString].
	
	rover process: 'fb'.
	
	self assert: windowLog showWindow first equals: '0@0'.
	self assert: windowLog showWindow second equals: ''.! !

!testRun: #WindowTest #test03 stamp: 'h 10/30/2023 03:43:43'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:45:50' prior: 50655853!
test03

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #head with: [:aHead | (windowLog instVarNamed: #window) at: 2 put: 'Advancing towards ',aHead directionName].
	
	rover process: 'r'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.! !

!testRun: #WindowTest #test03 stamp: 'h 10/30/2023 03:45:51'!
FAILURE!

!testRun: #WindowTest #test03 stamp: 'h 10/30/2023 03:45:51'!
FAILURE!

!testRun: #WindowTest #test03 stamp: 'h 10/30/2023 03:46:06'!
FAILURE!

!testRun: #WindowTest #test03 stamp: 'h 10/30/2023 03:46:06'!
FAILURE!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:46:34' prior: 50655871!
test03

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #head with: [:aHead | (windowLog instVarNamed: #window) at: 2 put: 'Advancing towards ',aHead directionName].
	
	rover process: 'r'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!testRun: #WindowTest #test03 stamp: 'h 10/30/2023 03:46:34'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:47:35'!
test04

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #head with: [:aHead | (windowLog instVarNamed: #window) at: 2 put: 'Advancing towards ',aHead directionName].
	windowLog observeChangesFor: #position with: [:aPosition | (windowLog instVarNamed: #window) at: 1 put: aPosition asString].
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: '0@1'.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!testRun: #WindowTest #test04 stamp: 'h 10/30/2023 03:47:36'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:48:34'!
test05

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #head with: [:aHead | (windowLog instVarNamed: #window) at: 2 put: 'Advancing towards ',aHead directionName].
	windowLog observeChangesFor: #position with: [:aPosition | (windowLog instVarNamed: #window) at: 1 put: aPosition asString].
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: '0@0'.
	self assert: windowLog showWindow second equals: 'Advancing towards Norht'.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 03:48:37' prior: 50655937!
test05

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #head with: [:aHead | (windowLog instVarNamed: #window) at: 2 put: 'Advancing towards ',aHead directionName].
	windowLog observeChangesFor: #position with: [:aPosition | (windowLog instVarNamed: #window) at: 1 put: aPosition asString].
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: '0@0'.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.! !

!testRun: #WindowTest #test05 stamp: 'h 10/30/2023 03:48:37'!
PASSED!

----SNAPSHOT----(30 October 2023 03:49:03) CuisUniversity-5981.image priorSource: 10365908!

!methodRemoval: Logger #trackPositionChanges stamp: 'h 10/30/2023 03:49:05'!
trackPositionChanges
	marsRover subscribeTo: #position with: [:aPosition | self update: aPosition]!

!testRun: #LogsTest #test01 stamp: 'h 10/30/2023 03:49:08'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'h 10/30/2023 03:49:08'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 03:49:08'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 03:49:08'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 03:49:08'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 03:49:08'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 03:49:08'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 03:49:08'!
PASSED!

----QUIT----(30 October 2023 03:49:50) CuisUniversity-5981.image priorSource: 10378546!

----STARTUP---- (30 October 2023 03:49:57) as C:\Users\Intekio\Desktop\windows64\CuisUniversity-5981.image!


----QUIT----(30 October 2023 03:50:36) CuisUniversity-5981.image priorSource: 10379369!

----STARTUP---- (30 October 2023 12:55:56) as C:\Users\Manuel Urkovich\Facu\Inge1\MarsRover\windows64\CuisUniversity-5981.image!


!methodRemoval: Logger #observeChangesFor: stamp: 'mm uu 10/30/2023 12:59:20'!
observeChangesFor: aVariableToObserve
	marsRover subscribeTo: aVariableToObserve with: [:aPosition | self update: aPosition]!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/30/2023 12:59:24'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/30/2023 12:59:24'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/30/2023 12:59:24'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/30/2023 12:59:24'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/30/2023 12:59:24'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'mm uu 10/30/2023 12:59:24'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'mm uu 10/30/2023 12:59:24'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'mm uu 10/30/2023 12:59:24'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'mm uu 10/30/2023 12:59:26'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'mm uu 10/30/2023 12:59:26'!
PASSED!

!testRun: #WindowTest #test03 stamp: 'mm uu 10/30/2023 12:59:26'!
PASSED!

!testRun: #WindowTest #test04 stamp: 'mm uu 10/30/2023 12:59:26'!
PASSED!

!testRun: #WindowTest #test05 stamp: 'mm uu 10/30/2023 12:59:26'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:23:51' prior: 50654898!
test01
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition.
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/30/2023 13:23:55'!
ERROR!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/30/2023 13:23:55'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/30/2023 13:23:55'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/30/2023 13:23:55'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/30/2023 13:23:55'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'mm uu 10/30/2023 13:23:55'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'mm uu 10/30/2023 13:23:55'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'mm uu 10/30/2023 13:23:55'!
PASSED!

!testRun: #LogsTest #test01 stamp: 'mm uu 10/30/2023 13:23:55'!
ERROR!
!Logger methodsFor: 'logs' stamp: 'mm uu 10/30/2023 13:23:59'!
observeChangesForPosition
	self shouldBeImplemented.! !
!Logger methodsFor: 'logs' stamp: 'mm uu 10/30/2023 13:25:11' prior: 50656086!
observeChangesForPosition
	marsRover subscribeTo: #position with: [:aPosition | logs add: aPosition ] .! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/30/2023 13:25:15'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:25:25' prior: 50654913!
test02
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test02 stamp: 'mm uu 10/30/2023 13:25:27'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:25:32' prior: 50654929!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition 
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:25:33' prior: 50656115!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test03 stamp: 'mm uu 10/30/2023 13:26:46'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:26:51' prior: 50654943!
test04
	|marsRover logger logs|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	
	marsRover process: 'frffrb'.
	
	logs := logger showLogs .
	
	self assert: logs first equals: 0@1.
	self assert: logs second equals: 1@1.
	self assert: logs third equals: 2@1.
	self assert: logs fourth equals: 2@2.
	self assert: logger showLogs size equals: 4.! !

!testRun: #LogsTest #test04 stamp: 'mm uu 10/30/2023 13:26:55'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:27:04' prior: 50654979!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForHead.
	
	marsRover process: 'r'.
	
	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs size equals: 1.! !

!testRun: #LogsTest #test05 stamp: 'mm uu 10/30/2023 13:27:09'!
ERROR!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/30/2023 13:27:09'!
ERROR!
!Logger methodsFor: 'logs' stamp: 'mm uu 10/30/2023 13:27:13'!
observeChangesForHead
	self shouldBeImplemented.! !
!Logger methodsFor: 'logs' stamp: 'mm uu 10/30/2023 13:27:43' prior: 50656178!
observeChangesForHead
	marsRover subscribeTo: #head with: [:aHead | logs add: aHead directionName ]! !

!testRun: #LogsTest #test05 stamp: 'mm uu 10/30/2023 13:27:46'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:28:09' prior: 50655004!
test06
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForHead .
	
	marsRover process: 'rlll'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:28:12' prior: 50655023!
test07
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForHead .
	
	marsRover process: 'rlllf'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:28:19' prior: 50655042!
test08
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	logger observeChangesForHead .
	
	marsRover process: 'rllfb'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: -1@0.
	self assert: logger showLogs fifth equals: 0@0.
	self assert: logger showLogs size equals: 5.! !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/30/2023 13:28:21'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/30/2023 13:28:21'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/30/2023 13:28:21'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/30/2023 13:28:21'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/30/2023 13:28:21'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'mm uu 10/30/2023 13:28:21'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'mm uu 10/30/2023 13:28:21'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'mm uu 10/30/2023 13:28:21'!
PASSED!

!methodRemoval: Logger #update: stamp: 'mm uu 10/30/2023 13:28:29'!
update: aPosition
	logs add: aPosition !

!testRun: #LogsTest #test01 stamp: 'mm uu 10/30/2023 13:28:32'!
PASSED!

!testRun: #LogsTest #test02 stamp: 'mm uu 10/30/2023 13:28:32'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'mm uu 10/30/2023 13:28:32'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'mm uu 10/30/2023 13:28:32'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'mm uu 10/30/2023 13:28:32'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'mm uu 10/30/2023 13:28:32'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'mm uu 10/30/2023 13:28:32'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'mm uu 10/30/2023 13:28:32'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:30:02' prior: 50655788!
test01

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForPosition.	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: ''.! !

!testRun: #WindowTest #test01 stamp: 'mm uu 10/30/2023 13:30:04'!
ERROR!

!testRun: #WindowTest #test01 stamp: 'mm uu 10/30/2023 13:30:04'!
ERROR!
!WindowLog methodsFor: 'logs' stamp: 'mm uu 10/30/2023 13:30:07'!
observeChangesForPosition
	self shouldBeImplemented.! !
!WindowLog methodsFor: 'logs' stamp: 'mm uu 10/30/2023 13:30:13' prior: 50656304!
observeChangesForPosition
	! !
!WindowLog methodsFor: 'logs' stamp: 'mm uu 10/30/2023 13:30:59' prior: 50656309!
observeChangesForPosition
	marsRover subscribeTo: #position with: [:aPosition | window at: 1 put: aPosition].! !

!testRun: #WindowTest #test01 stamp: 'mm uu 10/30/2023 13:31:04'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:31:10' prior: 50655827!
test02

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForPosition .
	
	rover process: 'f'.
	
	self assert: windowLog showWindow first equals: '0@1'.
	self assert: windowLog showWindow second equals: ''.! !

!testRun: #WindowTest #test02 stamp: 'mm uu 10/30/2023 13:31:11'!
FAILURE!

!testRun: #WindowTest #test02 stamp: 'mm uu 10/30/2023 13:31:11'!
FAILURE!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:32:16' prior: 50655915!
test04

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #head with: [:aHead | (windowLog instVarNamed: #window) at: 2 put: 'Advancing towards ',aHead directionName].
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: '0@1'.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!testRun: #WindowTest #test04 stamp: 'mm uu 10/30/2023 13:32:19'!
FAILURE!

!testRun: #WindowTest #test04 stamp: 'mm uu 10/30/2023 13:32:19'!
FAILURE!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:32:26' prior: 50655958!
test05

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #head with: [:aHead | (windowLog instVarNamed: #window) at: 2 put: 'Advancing towards ',aHead directionName].
	windowLog observeChangesForPosition .
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: '0@0'.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.! !

!testRun: #WindowTest #test05 stamp: 'mm uu 10/30/2023 13:32:29'!
FAILURE!

!testRun: #WindowTest #test05 stamp: 'mm uu 10/30/2023 13:32:29'!
FAILURE!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:32:33' prior: 50656363!
test05

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #head with: [:aHead | (windowLog instVarNamed: #window) at: 2 put: 'Advancing towards ',aHead directionName].
	windowLog observeChangesForPosition .
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: 0@0.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.! !

!testRun: #WindowTest #test05 stamp: 'mm uu 10/30/2023 13:32:40'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:32:46' prior: 50656322!
test02

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForPosition .
	
	rover process: 'f'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: ''.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:32:53' prior: 50656340!
test04

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesFor: #head with: [:aHead | (windowLog instVarNamed: #window) at: 2 put: 'Advancing towards ',aHead directionName].
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!testRun: #WindowTest #test01 stamp: 'mm uu 10/30/2023 13:32:57'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'mm uu 10/30/2023 13:32:57'!
PASSED!

!testRun: #WindowTest #test03 stamp: 'mm uu 10/30/2023 13:32:57'!
PASSED!

!testRun: #WindowTest #test04 stamp: 'mm uu 10/30/2023 13:32:57'!
PASSED!

!testRun: #WindowTest #test05 stamp: 'mm uu 10/30/2023 13:32:57'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:33:09' prior: 50655897!
test03

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'r'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!testRun: #WindowTest #test03 stamp: 'mm uu 10/30/2023 13:33:11'!
ERROR!

!testRun: #WindowTest #test03 stamp: 'mm uu 10/30/2023 13:33:11'!
ERROR!
!WindowLog methodsFor: 'logs' stamp: 'mm uu 10/30/2023 13:33:14'!
observeChangesForHead
	self shouldBeImplemented.! !
!WindowLog methodsFor: 'logs' stamp: 'mm uu 10/30/2023 13:33:32' prior: 50656466!
observeChangesForHead
	marsRover subscribeTo: #head with: [:aHead | window at: 2 put: 'Advancing towards ',aHead directionName] ! !

!testRun: #WindowTest #test03 stamp: 'mm uu 10/30/2023 13:33:35'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:33:41' prior: 50656386!
test05

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: 0@0.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.! !

!testRun: #WindowTest #test05 stamp: 'mm uu 10/30/2023 13:33:44'!
FAILURE!

!testRun: #WindowTest #test05 stamp: 'mm uu 10/30/2023 13:33:44'!
FAILURE!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:33:57' prior: 50656481!
test05

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: 0@0.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.! !

!testRun: #WindowTest #test05 stamp: 'mm uu 10/30/2023 13:33:59'!
PASSED!

!testRun: #WindowTest #test04 stamp: 'mm uu 10/30/2023 13:34:00'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'mm uu 10/30/2023 13:34:05' prior: 50656419!
test04

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!testRun: #WindowTest #test04 stamp: 'mm uu 10/30/2023 13:34:07'!
PASSED!

!testRun: #WindowTest #test03 stamp: 'mm uu 10/30/2023 13:34:09'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'mm uu 10/30/2023 13:34:11'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'mm uu 10/30/2023 13:34:11'!
PASSED!

!testRun: #WindowTest #test03 stamp: 'mm uu 10/30/2023 13:34:11'!
PASSED!

!testRun: #WindowTest #test04 stamp: 'mm uu 10/30/2023 13:34:11'!
PASSED!

!testRun: #WindowTest #test05 stamp: 'mm uu 10/30/2023 13:34:11'!
PASSED!

!methodRemoval: WindowLog #observeChangesFor:with: stamp: 'mm uu 10/30/2023 13:34:16'!
observeChangesFor: nameOfColaboratorToObserve with: blockForUpdates
	
	marsRover subscribeTo: nameOfColaboratorToObserve with: blockForUpdates !

!methodRemoval: Logger #observeChangesFor:with: stamp: 'mm uu 10/30/2023 13:34:20'!
observeChangesFor: nameOfColaboratorToObserve with: blockForUpdates
	marsRover subscribeTo: nameOfColaboratorToObserve with: blockForUpdates .!

----SNAPSHOT----(30 October 2023 13:34:36) CuisUniversity-5981.image priorSource: 10379568!

----STARTUP---- (30 October 2023 14:33:38) as C:\Users\Intekio\Desktop\windows64\CuisUniversity-5981.image!

!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:36:14'!
test01LoggerOfRoverAtCreationDoesNotHaveRegisteredChanges
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition.
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.! !

!methodRemoval: LogsTest #test01 stamp: 'h 10/30/2023 14:36:14'!
test01
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition.
	
	marsRover process: ''.
	
	self assert: logger showLogs size equals: 0.!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:36:43'!
test02LoggerRegistersRoversMovements
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!methodRemoval: LogsTest #test02 stamp: 'h 10/30/2023 14:36:43'!
test02
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	
	marsRover process: 'f'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 14:37:05'!
PASSED!

!testRun: #LogsTest #test01LoggerOfRoverAtCreationDoesNotHaveRegisteredChanges stamp: 'h 10/30/2023 14:37:06'!
PASSED!

!testRun: #LogsTest #test02LoggerRegistersRoversMovements stamp: 'h 10/30/2023 14:37:06'!
PASSED!

!testRun: #LogsTest #test03 stamp: 'h 10/30/2023 14:37:06'!
PASSED!

!testRun: #LogsTest #test04 stamp: 'h 10/30/2023 14:37:06'!
PASSED!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 14:37:06'!
PASSED!

!testRun: #LogsTest #test06 stamp: 'h 10/30/2023 14:37:06'!
PASSED!

!testRun: #LogsTest #test07 stamp: 'h 10/30/2023 14:37:06'!
PASSED!

!testRun: #LogsTest #test08 stamp: 'h 10/30/2023 14:37:06'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'h 10/30/2023 14:37:09'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'h 10/30/2023 14:37:09'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'h 10/30/2023 14:37:09'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'h 10/30/2023 14:37:09'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'h 10/30/2023 14:37:09'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'h 10/30/2023 14:37:09'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'h 10/30/2023 14:37:09'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'h 10/30/2023 14:37:09'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'h 10/30/2023 14:37:10'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'h 10/30/2023 14:37:10'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'h 10/30/2023 14:37:10'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'h 10/30/2023 14:37:10'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'h 10/30/2023 14:37:10'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'h 10/30/2023 14:37:10'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'h 10/30/2023 14:37:10'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'h 10/30/2023 14:37:14'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'h 10/30/2023 14:37:14'!
PASSED!

!testRun: #WindowTest #test03 stamp: 'h 10/30/2023 14:37:14'!
PASSED!

!testRun: #WindowTest #test04 stamp: 'h 10/30/2023 14:37:14'!
PASSED!

!testRun: #WindowTest #test05 stamp: 'h 10/30/2023 14:37:14'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:37:47'!
test03PositionOnlyLoggerDoesNotRegisterRotations
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.! !

!methodRemoval: LogsTest #test03 stamp: 'h 10/30/2023 14:37:47'!
test03
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	
	marsRover process: 'fr'.
	
	self assert: logger showLogs first equals: 0@1.
	self assert: logger showLogs size equals: 1.!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:38:09'!
test04LoggerRegistersMultipleMovements
	|marsRover logger logs|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	
	marsRover process: 'frffrb'.
	
	logs := logger showLogs .
	
	self assert: logs first equals: 0@1.
	self assert: logs second equals: 1@1.
	self assert: logs third equals: 2@1.
	self assert: logs fourth equals: 2@2.
	self assert: logger showLogs size equals: 4.! !

!methodRemoval: LogsTest #test04 stamp: 'h 10/30/2023 14:38:09'!
test04
	|marsRover logger logs|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	
	marsRover process: 'frffrb'.
	
	logs := logger showLogs .
	
	self assert: logs first equals: 0@1.
	self assert: logs second equals: 1@1.
	self assert: logs third equals: 2@1.
	self assert: logs fourth equals: 2@2.
	self assert: logger showLogs size equals: 4.!

!testRun: #LogsTest #test05 stamp: 'h 10/30/2023 14:38:11'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:38:32'!
test05LoggerRegistersRotations
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForHead.
	
	marsRover process: 'r'.
	
	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs size equals: 1.! !

!methodRemoval: LogsTest #test05 stamp: 'h 10/30/2023 14:38:32'!
test05
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForHead.
	
	marsRover process: 'r'.
	
	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs size equals: 1.!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:38:42'!
test06LoggerRegistersMultipleRotations
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForHead .
	
	marsRover process: 'rlll'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !

!methodRemoval: LogsTest #test06 stamp: 'h 10/30/2023 14:38:43'!
test06
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForHead .
	
	marsRover process: 'rlll'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:40:25'!
test07HeadingOnlyLoggerDoesNotRegisterPositionChange
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForHead .
	
	marsRover process: 'rlllf'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.! !

!methodRemoval: LogsTest #test07 stamp: 'h 10/30/2023 14:40:26'!
test07
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForHead .
	
	marsRover process: 'rlllf'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: 'South'.
	self assert: logger showLogs size equals: 4.!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:41:03'!
test08LoggerCanRegisterPositionAndHeadChangesSimultaneously
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	logger observeChangesForHead .
	
	marsRover process: 'rllfb'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: -1@0.
	self assert: logger showLogs fifth equals: 0@0.
	self assert: logger showLogs size equals: 5.! !

!methodRemoval: LogsTest #test08 stamp: 'h 10/30/2023 14:41:03'!
test08
	|marsRover logger|
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	logger := Logger for: marsRover.
	logger observeChangesForPosition .
	logger observeChangesForHead .
	
	marsRover process: 'rllfb'.

	self assert: logger showLogs first equals: 'East'.
	self assert: logger showLogs second equals: 'North'.
	self assert: logger showLogs third equals: 'West'.
	self assert: logger showLogs fourth equals: -1@0.
	self assert: logger showLogs fifth equals: 0@0.
	self assert: logger showLogs size equals: 5.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:43:33'!
test01WindowIsEmptyWithoutRoverChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForPosition.	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: ''.! !

!methodRemoval: WindowTest #test01 stamp: 'h 10/30/2023 14:43:33'!
test01

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForPosition.	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: ''.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:44:03'!
test02WindowRegistersPositionChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForPosition .
	
	rover process: 'f'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: ''.! !

!methodRemoval: WindowTest #test02 stamp: 'h 10/30/2023 14:44:03'!
test02

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForPosition .
	
	rover process: 'f'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: ''.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:44:19'!
test03WindowRegistesRoverRotations

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'r'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!methodRemoval: WindowTest #test03 stamp: 'h 10/30/2023 14:44:19'!
test03

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'r'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:45:18'!
test04WindowRegistersPositionAndHeadChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!methodRemoval: WindowTest #test04 stamp: 'h 10/30/2023 14:45:18'!
test04

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:46:14'!
test05WindowRegistersMultipleChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: 0@0.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.! !

!methodRemoval: WindowTest #test05 stamp: 'h 10/30/2023 14:46:14'!
test05

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: 0@0.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:47:11'!
test03HeadOnlyWindowDoesNotRegisterPositionChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'rf'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!testRun: #WindowTest #test03HeadOnlyWindowDoesNotRegisterPositionChanges stamp: 'h 10/30/2023 14:47:12'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:47:33'!
test02PositionOnlyWindowDoesNotRegistersHeadChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: ''.! !

!testRun: #WindowTest #test02PositionOnlyWindowDoesNotRegistersHeadChanges stamp: 'h 10/30/2023 14:47:34'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:47:41'!
test03PositionOnlyWindowDoesNotRegistersHeadChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: ''.! !

!methodRemoval: WindowTest #test02PositionOnlyWindowDoesNotRegistersHeadChanges stamp: 'h 10/30/2023 14:47:41'!
test02PositionOnlyWindowDoesNotRegistersHeadChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: ''.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:47:48'!
test04WindowRegistesRoverRotations

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'r'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!methodRemoval: WindowTest #test03WindowRegistesRoverRotations stamp: 'h 10/30/2023 14:47:48'!
test03WindowRegistesRoverRotations

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'r'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:47:57'!
test05HeadOnlyWindowDoesNotRegisterPositionChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'rf'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!methodRemoval: WindowTest #test03HeadOnlyWindowDoesNotRegisterPositionChanges stamp: 'h 10/30/2023 14:47:57'!
test03HeadOnlyWindowDoesNotRegisterPositionChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'rf'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:48:01'!
test06WindowRegistersMultipleChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: 0@0.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.! !

!methodRemoval: WindowTest #test05WindowRegistersMultipleChanges stamp: 'h 10/30/2023 14:48:01'!
test05WindowRegistersMultipleChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: 0@0.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:48:28'!
test05WindowRegistersPositionAndHeadChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!methodRemoval: WindowTest #test04WindowRegistersPositionAndHeadChanges stamp: 'h 10/30/2023 14:48:28'!
test04WindowRegistersPositionAndHeadChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:48:32'!
test06HeadOnlyWindowDoesNotRegisterPositionChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'rf'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!methodRemoval: WindowTest #test05HeadOnlyWindowDoesNotRegisterPositionChanges stamp: 'h 10/30/2023 14:48:32'!
test05HeadOnlyWindowDoesNotRegisterPositionChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'rf'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:48:36'!
test07WindowRegistersMultipleChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: 0@0.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.! !

!methodRemoval: WindowTest #test06WindowRegistersMultipleChanges stamp: 'h 10/30/2023 14:48:37'!
test06WindowRegistersMultipleChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fbrl'.
	
	self assert: windowLog showWindow first equals: 0@0.
	self assert: windowLog showWindow second equals: 'Advancing towards North'.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:49:38'!
test05HeadOnlyWindowDoesNotRegisterPositionChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'rf'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!methodRemoval: WindowTest #test06HeadOnlyWindowDoesNotRegisterPositionChanges stamp: 'h 10/30/2023 14:49:38'!
test06HeadOnlyWindowDoesNotRegisterPositionChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead.
	
	rover process: 'rf'.
	
	self assert: windowLog showWindow first equals: ''.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'h 10/30/2023 14:49:42'!
test06WindowRegistersPositionAndHeadChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.! !

!methodRemoval: WindowTest #test05WindowRegistersPositionAndHeadChanges stamp: 'h 10/30/2023 14:49:42'!
test05WindowRegistersPositionAndHeadChanges

	|windowLog rover|
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	windowLog := WindowLog for: rover.
	windowLog observeChangesForHead .
	windowLog observeChangesForPosition .
	
	rover process: 'fr'.
	
	self assert: windowLog showWindow first equals: 0@1.
	self assert: windowLog showWindow second equals: 'Advancing towards East'.!
!MarsRover methodsFor: 'observers' stamp: 'h 10/30/2023 14:51:46' prior: 50652186!
subscribeTo: instanceVariableName with: anObserverBlock
	(self instVarNamed: instanceVariableName) addObserverWith: anObserverBlock ! !

----SNAPSHOT----(30 October 2023 14:53:08) CuisUniversity-5981.image priorSource: 10397217!

----QUIT----(30 October 2023 14:53:13) CuisUniversity-5981.image priorSource: 10421767!